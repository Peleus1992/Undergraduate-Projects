###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     18/Jul/2014  09:08:07 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Project-related\STM32W108\myCode\实验4                #
#                    16点组网\工程源代码\hal\micro\cortexm3\micro-common.c    #
#    Command line =  "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\hal\micro\cortexm3\micro-common.c"   #
#                    -D BOARD_MB851 -D "PLATFORM_HEADER=\"hal/micro/cortexm3/ #
#                    compiler/iar.h\"" -D "BOARD_HEADER=\"hal/micro/cortexm3/ #
#                    stm32w108/board.h\"" -D CORTEXM3 -D CORTEXM3_STM32W108   #
#                    -D PHY_STM32W108XX -D DISABLE_WATCHDOG -D SUN_ROLE -D    #
#                    "__SOURCEFILE__=\"micro-common.c\"" -lC                  #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_SUN\Lis #
#                    t\" --diag_suppress Pa050 -o                             #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_SUN\Obj #
#                    \" --debug --endian=little --cpu=Cortex-M3 -e            #
#                    --fpu=None --dlib_config "G:\Peleus_Program Files\IAR    #
#                    for ARM\arm\INC\c\DLib_Config_Normal.h" -I               #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\hal\micro\cortexm3\" -I              #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\simp #
#                    lemac\include\" -I "F:\Project-related\STM32W108\myCode\ #
#                    实验4 16点组网\工程源代码\simplemac\demos\sample\..\..\. #
#                    .\" -I "F:\Project-related\STM32W108\myCode\实验4        #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\hal\ #
#                    " -I "F:\Project-related\STM32W108\myCode\实验4          #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\HAL\ #
#                    MICRO\CORTEXM3\STM32W108\" -I                            #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\simp #
#                    lemac\" -I "F:\Project-related\STM32W108\myCode\实验4    #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\shar #
#                    ed\" -Ohz --use_c++_inline                               #
#    List file    =  F:\Project-related\STM32W108\myCode\实验4                #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_SUN\Lis #
#                    t\micro-common.lst                                       #
#    Object file  =  F:\Project-related\STM32W108\myCode\实验4                #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_SUN\Obj #
#                    \micro-common.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

F:\Project-related\STM32W108\myCode\实验4 16点组网\工程源代码\hal\micro\cortexm3\micro-common.c
      1          /** @file micro-common.c
      2           *  @brief STM32W108 micro specific HAL functions common to 
      3           *  full and minimal hal
      4           *
      5           *
      6           * <!--(C) COPYRIGHT 2010 STMicroelectronics. All rights reserved.        -->
      7           */
      8          
      9          
     10          
     11          #include PLATFORM_HEADER
     12          #include "error.h"
     13          #include "hal/micro/micro-common.h"
     14          #include "hal/micro/cortexm3/micro-common.h"
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void halInternalEnableWatchDog(void)
     17          {
     18            //Just to be on the safe side, restart the watchdog before enabling it
     19            WDOG_RESET = 1;
   \                     halInternalEnableWatchDog:
   \   00000000   ....               LDR.N    R0,??DataTable4  ;; 0x40006000
   \   00000002   0121               MOVS     R1,#+1
   \   00000004   8160               STR      R1,[R0, #+8]
     20            WDOG_KEY = 0xEABE;
   \   00000006   4EF6BE21           MOVW     R1,#+60094
   \   0000000A   4160               STR      R1,[R0, #+4]
     21            WDOG_CFG = WDOG_ENABLE;
   \   0000000C   ....               B.N      ?Subroutine0
     22          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0121               MOVS     R1,#+1
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void halInternalResetWatchDog(void)
     25          {
     26            //Writing any value will restart the watchdog
     27            WDOG_RESET = 1;
   \                     halInternalResetWatchDog:
   \   00000000   ....               LDR.N    R0,??DataTable4_1  ;; 0x40006008
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
     28          }
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void halInternalDisableWatchDog(int8u magicKey)
     31          {
     32            if (magicKey == MICRO_DISABLE_WATCH_DOG_KEY) {
   \                     halInternalDisableWatchDog:
   \   00000000   A528               CMP      R0,#+165
   \   00000002   05D1               BNE.N    ??halInternalDisableWatchDog_0
     33              WDOG_KEY = 0xDEAD;
   \   00000004   ....               LDR.N    R0,??DataTable4  ;; 0x40006000
   \   00000006   4DF6AD61           MOVW     R1,#+57005
   \   0000000A   4160               STR      R1,[R0, #+4]
     34              WDOG_CFG = WDOG_DISABLE;
   \   0000000C   0221               MOVS     R1,#+2
   \   0000000E   0160               STR      R1,[R0, #+0]
     35            }
     36          }
   \                     ??halInternalDisableWatchDog_0:
   \   00000010   7047               BX       LR               ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          boolean halInternalWatchDogEnabled(void)
     39          {
     40            if(WDOG_CFG&WDOG_ENABLE) {
   \                     halInternalWatchDogEnabled:
   \   00000000   ....               LDR.N    R0,??DataTable4  ;; 0x40006000
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   10F00100           ANDS     R0,R0,#0x1
   \   00000008   18BF               IT       NE 
   \   0000000A   0120               MOVNE    R0,#+1
     41              return TRUE;
     42            } else {
     43              return FALSE;
   \   0000000C   7047               BX       LR               ;; return
     44            }
     45          }
     46          

   \                                 In section .text, align 2, keep-with-next
     47          void halGpioConfig(int32u io, int32u config)
     48          {
   \                     halGpioConfig:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   8208               LSRS     R2,R0,#+2
   \   00000004   ........           ADR.W    R3,??configRegs
   \   00000008   53F82220           LDR      R2,[R3, R2, LSL #+2]
   \   0000000C   1368               LDR      R3,[R2, #+0]
     49            static volatile int32u *const configRegs[] = 
     50              { (volatile int32u *)GPIO_PACFGL_ADDR,
     51                (volatile int32u *)GPIO_PACFGH_ADDR,
     52                (volatile int32u *)GPIO_PBCFGL_ADDR,
     53                (volatile int32u *)GPIO_PBCFGH_ADDR,
     54                (volatile int32u *)GPIO_PCCFGL_ADDR,
     55                (volatile int32u *)GPIO_PCCFGH_ADDR };
     56            int32u portcfg;
     57            portcfg = *configRegs[io/4];                // get current config                   
     58            portcfg = portcfg & ~((0xF)<<((io&3)*4));   // mask out config of this pin
     59            *configRegs[io/4] = portcfg | (config <<((io&3)*4));
   \   0000000E   00F00300           AND      R0,R0,#0x3
   \   00000012   8000               LSLS     R0,R0,#+2
   \   00000014   0F24               MOVS     R4,#+15
   \   00000016   8440               LSLS     R4,R4,R0
   \   00000018   A343               BICS     R3,R3,R4
   \   0000001A   01FA00F0           LSL      R0,R1,R0
   \   0000001E   1843               ORRS     R0,R0,R3
   \   00000020   1060               STR      R0,[R2, #+0]
     60          }
   \   00000022   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??configRegs:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   00B0004004B0       DC32 1073786880, 1073786884, 1073787904, 1073787908, 1073788928, 1073788932
   \              004000B40040
   \              04B4004000B8
   \              004004B80040
     61          
     62          
     63          
     64          
     65          
     66          
     67          

   \                                 In section .text, align 2, keep-with-next
     68          int16u halInternalStartSystemTimer(void)
     69          {
   \                     halInternalStartSystemTimer:
   \   00000000   80B5               PUSH     {R7,LR}
     70            //Since the SleepTMR is the only timer maintained during deep sleep, it is
     71            //used as the System Timer (RTC).  We maintain a 32 bit hardware timer
     72            //configured for a tick value time of 1024 ticks/second (0.9765625 ms/tick)
     73            //using either the 10 kHz internal SlowRC clock divided and calibrated to
     74            //1024 Hz or the external 32.768 kHz crystal divided to 1024 Hz.
     75            //With a tick time of ~1ms, this 32bit timer will wrap after ~48.5 days.
     76            
     77            //disable top-level interrupt while configuring
     78            INT_CFGCLR = INT_SLEEPTMR;
   \   00000002   ....               LDR.N    R0,??DataTable4_2  ;; 0xe000e180
   \   00000004   1021               MOVS     R1,#+16
   \   00000006   0160               STR      R1,[R0, #+0]
     79            
     80            #ifdef ENABLE_OSC32K
     81              #ifdef DIGITAL_OSC32_EXT
     82                //Disable both OSC32K and SLOWRC if using external digital clock input
     83                SLEEPTMR_CLKEN = 0;
     84              #else//!DIGITAL_OSC32_EXT
     85                //Enable the 32kHz XTAL (and disable SlowRC since it is not needed)
     86                SLEEPTMR_CLKEN = SLEEPTMR_CLK32KEN;
     87              #endif
     88              //Sleep timer configuration is the same for crystal and external clock
     89              SLEEPTMR_CFG = (SLEEPTMR_ENABLE            | //enable TMR
     90                             (0 << SLEEPTMR_DBGPAUSE_BIT)| //TMR paused when halted
     91                             (5 << SLEEPTMR_CLKDIV_BIT)  | //divide down to 1024Hz
     92                             (1 << SLEEPTMR_CLKSEL_BIT)) ; //select XTAL
     93            #else //!ENABLE_OSC32K
     94              //Enable the SlowRC (and disable 32kHz XTAL since it is not needed)
     95              SLEEPTMR_CLKEN = SLEEPTMR_CLK10KEN;
   \   00000008   ....               LDR.N    R0,??DataTable4_3  ;; 0x40000008
   \   0000000A   0221               MOVS     R1,#+2
   \   0000000C   0160               STR      R1,[R0, #+0]
     96              SLEEPTMR_CFG = (SLEEPTMR_ENABLE            | //enable TMR
     97                             (0 << SLEEPTMR_DBGPAUSE_BIT)| //TMR paused when halted
     98                             (0 << SLEEPTMR_CLKDIV_BIT)  | //already 1024Hz
     99                             (0 << SLEEPTMR_CLKSEL_BIT)) ; //select SlowRC
   \   0000000E   ....               LDR.N    R0,??DataTable4_4  ;; 0x4000600c
   \   00000010   4FF40061           MOV      R1,#+2048
   \   00000014   0160               STR      R1,[R0, #+0]
    100              #ifndef DISABLE_RC_CALIBRATION
    101                halInternalCalibrateSlowRc(); //calibrate SlowRC to 1024Hz
   \   00000016   ........           BL       halInternalCalibrateSlowRc
    102              #endif//DISABLE_RC_CALIBRATION
    103            #endif//ENABLE_OSC32K
    104            
    105            //clear out any stale interrupts
    106            INT_SLEEPTMRFLAG = (INT_SLEEPTMRWRAP | INT_SLEEPTMRCMPA | INT_SLEEPTMRCMPB);
   \   0000001A   ....               LDR.N    R0,??DataTable4_5  ;; 0x4000a014
   \   0000001C   0721               MOVS     R1,#+7
   \   0000001E   0160               STR      R1,[R0, #+0]
    107            //turn off second level interrupts.  they will be enabled elsewhere as needed
    108            INT_SLEEPTMRCFG = INT_SLEEPTMRCFG_RESET;
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   0164               STR      R1,[R0, #+64]
    109            //enable top-level interrupt
    110            INT_CFGSET = INT_SLEEPTMR;
   \   00000024   ....               LDR.N    R0,??DataTable4_6  ;; 0xe000e100
   \   00000026   1021               MOVS     R1,#+16
   \   00000028   0160               STR      R1,[R0, #+0]
    111            
    112            return 0;
   \   0000002A   0020               MOVS     R0,#+0
   \   0000002C   02BD               POP      {R1,PC}          ;; return
    113          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   00600040           DC32     0x40006000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   08600040           DC32     0x40006008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   80E100E0           DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   08000040           DC32     0x40000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0C600040           DC32     0x4000600c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   14A00040           DC32     0x4000a014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   00E100E0           DC32     0xe000e100
    114          
    115          

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     halGpioConfig                    8
     halInternalDisableWatchDog       0
     halInternalEnableWatchDog        0
     halInternalResetWatchDog         0
     halInternalStartSystemTimer      8
     halInternalWatchDogEnabled       0


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     halInternalEnableWatchDog     14
     ?Subroutine0                   6
     halInternalResetWatchDog       2
     halInternalDisableWatchDog    18
     halInternalWatchDogEnabled    14
     halGpioConfig                 36
     configRegs                    24
     halInternalStartSystemTimer   46
     ??DataTable4                   4
     ??DataTable4_1                 4
     ??DataTable4_2                 4
     ??DataTable4_3                 4
     ??DataTable4_4                 4
     ??DataTable4_5                 4
     ??DataTable4_6                 4

 
 188 bytes in section .text
 
 188 bytes of CODE memory

Errors: none
Warnings: none
