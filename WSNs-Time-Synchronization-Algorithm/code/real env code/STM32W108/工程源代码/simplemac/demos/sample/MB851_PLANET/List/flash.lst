###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     17/Jul/2014  09:45:01 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\flash.c  #
#    Command line =  "E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\flash.c #
#                    " -D BOARD_MB851 -D "PLATFORM_HEADER=\"hal/micro/cortexm #
#                    3/compiler/iar.h\"" -D "BOARD_HEADER=\"hal/micro/cortexm #
#                    3/stm32w108/board.h\"" -D CORTEXM3 -D                    #
#                    CORTEXM3_STM32W108 -D PHY_STM32W108XX -D                 #
#                    DISABLE_WATCHDOG -D PLANET_ROLE -D BOARD_MB851 -D        #
#                    "__SOURCEFILE__=\"flash.c\"" -lC "E:\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\ #
#                    List\" --diag_suppress Pa050 -o "E:\实验4                #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\ #
#                    Obj\" --debug --endian=little --cpu=Cortex-M3 -e         #
#                    --fpu=None --dlib_config "D:\study                       #
#                    soft\IAR6.10\IARsoft\arm\INC\c\DLib_Config_Normal.h" -I  #
#                    "E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\" -I    #
#                    "E:\实验4 16点组网\工程源代码\simplemac\demos\sample\..\ #
#                    ..\..\simplemac\include\" -I "E:\实验4                   #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\"    #
#                    -I "E:\实验4 16点组网\工程源代码\simplemac\demos\sample\ #
#                    ..\..\..\hal\" -I "E:\实验4                              #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\HAL\ #
#                    MICRO\CORTEXM3\STM32W108\" -I "E:\实验4                  #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\simp #
#                    lemac\" -I "E:\实验4 16点组网\工程源代码\simplemac\demos #
#                    \sample\..\..\..\shared\" -Ohz --use_c++_inline          #
#    List file    =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB85 #
#                    1_PLANET\List\flash.lst                                  #
#    Object file  =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB85 #
#                    1_PLANET\Obj\flash.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\flash.c
      1          /** @file hal/micro/cortexm3/flash.c
      2           * @brief Implements the generic flash manipulation routines.
      3           * 
      4           * The file 'flash-sw-spec.txt' should provide *all* the information needed
      5           * to understand and work with the FLITF and flash.
      6           * 
      7           * 
      8           * <!--(C) COPYRIGHT 2010 STMicroelectronics. All rights reserved.        -->
      9           */
     10          
     11          #include PLATFORM_HEADER
     12          #include "error.h"
     13          #include "hal/micro/cortexm3/bootloader/fib-bootloader.h"
     14          #include "hal/micro/cortexm3/mpu.h"
     15          #include "memmap.h"
     16          #include "flash.h"
     17          
     18          // A translation table used to convert FibStatus codes to corresponding
     19          //  StStatus values

   \                                 In section .text, align 4, keep-with-next
     20          static const StStatus fibToStStatus[] = {
   \                     fibToStStatus:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   000202024B4B       DC8 0, 2, 2, 2, 75, 75, 70, 71
   \              4647        
     21            ST_SUCCESS,                    // FIB_SUCCESS             0
     22            ST_BAD_ARGUMENT,               // FIB_ERR_UNALIGNED       1
     23            ST_BAD_ARGUMENT,               // FIB_ERR_INVALID_ADDRESS 2
     24            ST_BAD_ARGUMENT,               // FIB_ERR_INVALID_TYPE    3
     25            ST_ERR_FLASH_PROG_FAIL,        // FIB_ERR_WRITE_PROTECTED 4
     26            ST_ERR_FLASH_PROG_FAIL,        // FIB_ERR_WRITE_FAILED    5
     27            ST_ERR_FLASH_WRITE_INHIBITED,  // FIB_ERR_ERASE_REQUIRED  6
     28            ST_ERR_FLASH_VERIFY_FAILED     // FIB_ERR_VERIFY_FAILED   7
     29          };
     30            
     31          //The purpose of flashEraseIsActive and halFlashEraseIsActive() is so that
     32          //interrupts can query the flash library to find out of Flash Erase is
     33          //active when their ISR gets invoked.  This is useful because Flash Erase
     34          //causes the chip to go ATOMIC for 21ms and this delay will disrupt interrupt
     35          //latency.  By having a sinple API that an ISR can query for this state,
     36          //the ISR can appriopriately adjust for a 21ms latency time.

   \                                 In section .bss, align 1
     37          boolean flashEraseIsActive = FALSE;
   \                     flashEraseIsActive:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     38          boolean halFlashEraseIsActive(void)
     39          {
     40            return flashEraseIsActive;
   \                     halFlashEraseIsActive:
   \   00000000   ....               LDR.N    R0,??DataTable7
   \   00000002   0078               LDRB     R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
     41          }
     42          
     43          
     44          // Emulators do not have FIB bootloaders, so need to include a copy of
     45          // these core flash routines.  
     46          
     47          #if defined(ST_EMU_TEST)
     48          
     49          static void enableFlitf(void)
     50          {
     51            //First, unlock the FLITF by writing the two key values to the Flash
     52            //Protection Unlock register
     53            FPEC_KEY = FPEC_KEY1;
     54            FPEC_KEY = FPEC_KEY2;
     55            
     56            //Second, unlock the CIB by writing the two key values to the CIB
     57            //Protection Unlock register
     58            OPT_KEY = FPEC_KEY1;
     59            OPT_KEY = FPEC_KEY2;
     60            
     61            //Turn on the FPEC clock for flash manipulation operations
     62            FPEC_CLKREQ = FPEC_CLKREQ_FIELD;
     63            
     64            //make sure the FPEC clock is running before we proceed
     65            while( (FPEC_CLKSTAT&FPEC_CLKACK) != FPEC_CLKACK) {}
     66            
     67            //just in case, wait until the flash is no longer busy
     68            while( (FLASH_STATUS&FLASH_STATUS_FLA_BSY) == FLASH_STATUS_FLA_BSY ) {}
     69          }
     70          
     71          static void disableFlitf(void)
     72          {
     73            //make sure the FPEC is completely idle before turning off the clock
     74            while( (FPEC_CLKSTAT&FPEC_CLKBSY) == FPEC_CLKBSY) {}
     75            
     76            //Turn off the FPEC clock now that we're done
     77            FPEC_CLKREQ = FPEC_CLKREQ_RESET;
     78            
     79            //Set LOCK and clear OPTWREN to lock both the FLITF and the CIB.
     80            //NOTE: The PROG bit must also be cleared otherwise Flash can still
     81            //      be programmed even with the LOCK bit set.  BugzID: 6267
     82            FLASH_CTRL = FLASH_CTRL_LOCK; //lock the flash from further accesses
     83          }
     84          
     85          static FibStatus fibFlashWrite(int32u address, int8u *data, int32u length, int32u dummy)
     86          {
     87            int32u i;
     88            int16u *ptr;
     89            FibStatus status = FIB_SUCCESS;
     90            // Address and length must be half-word aligned.
     91            if ((address & 1) || (length & 1)) {
     92              return FIB_ERR_UNALIGNED;
     93            }
     94            // Start and end address must be in MFB or CIB.
     95            if (!((address >= MFB_BOTTOM && address + length <= MFB_TOP + 1)
     96                  || (address >= CIB_BOTTOM && address + length <= CIB_TOP + 1))) {
     97              return FIB_ERR_INVALID_ADDRESS;
     98            }
     99            enableFlitf();
    100            ptr = (int16u *)address;
    101            for (i = 0; i < length; i += 2) {
    102              int16u currentData = *ptr;
    103              int16u newData = HIGH_LOW_TO_INT(data[i + 1], data[i]);
    104              // Only program the data if it makes sense to do so.
    105              if (currentData == newData) {
    106                // If the new data matches the flash, don't bother doing anything.
    107              } else if (currentData == 0xFFFF || newData == 0x0000) {
    108                // If the flash is 0xFFFF we're allowed to write anything.
    109                // If the new data is 0x0000 it doesn't matter what the flash is.
    110                // OPTWREN must stay set to keep CIB unlocked.
    111                if ((CIB_OB_BOTTOM <= (int32u)ptr) && ((int32u)ptr <= CIB_OB_TOP)) {
    112                  FLASH_CTRL = (FLASH_CTRL_OPTWREN | FLASH_CTRL_OPTPROG);
    113                } else {
    114                  FLASH_CTRL = (FLASH_CTRL_OPTWREN | FLASH_CTRL_PROG);
    115                }
    116                // Assigning data to the address performs the actual write.
    117                (*ptr) = newData;
    118                // Wait for the busy bit to clear, indicating operation is done.
    119                while ((FLASH_STATUS & FLASH_STATUS_FLA_BSY) != 0) {}
    120                // Reset the operation complete flag.
    121                FLASH_STATUS = FLASH_STATUS_EOP;
    122                // Check if any error bits have been tripped, and if so, exit.
    123                // The bit PAGE_PROG_ERR is not relevant in this programming mode.
    124                if (FLASH_STATUS & (FLASH_STATUS_WRP_ERR | FLASH_STATUS_PROG_ERR)) {
    125                  if (FLASH_STATUS & FLASH_STATUS_WRP_ERR) {
    126                    status = FIB_ERR_WRITE_PROTECTED;
    127                  } else {
    128                    status = FIB_ERR_WRITE_FAILED;
    129                  }
    130                  FLASH_STATUS = FLASH_STATUS_WRP_ERR;
    131                  FLASH_STATUS = FLASH_STATUS_PROG_ERR;
    132                  break;
    133                }
    134              } else {
    135                status = FIB_ERR_ERASE_REQUIRED;
    136                break;
    137              }
    138              ptr++;
    139            }
    140            disableFlitf();
    141            return status;
    142          }
    143          
    144          static FibStatus fibFlashWriteVerify(int32u address, int8u *data, int32u length)
    145          {
    146            int32u i;
    147            int8u *ptr = (int8u *)address;
    148            for (i = 0; i < length; i++) {
    149              if (*ptr != data[i]) {
    150                return FIB_ERR_VERIFY_FAILED;
    151              }
    152              ptr++;
    153            }
    154            return FIB_SUCCESS;
    155          }
    156          
    157          static FibStatus fibFlashErase(FibEraseType eraseType, int32u address)
    158          {
    159            int32u eraseOp;
    160            int32u *ptr;
    161            int32u length;
    162            FibStatus status = FIB_SUCCESS;
    163            if (BYTE_0(eraseType) == MFB_MASS_ERASE) {
    164              eraseOp = FLASH_CTRL_MASSERASE;
    165              ptr = (int32u *)MFB_BOTTOM;
    166              length = MFB_SIZE_W;
    167            } else if (BYTE_0(eraseType) == MFB_PAGE_ERASE) {
    168              if (address < MFB_BOTTOM || address > MFB_TOP) {
    169                return FIB_ERR_INVALID_ADDRESS;
    170              }
    171              eraseOp = FLASH_CTRL_PAGEERASE;
    172              ptr = (int32u *)(address & MFB_PAGE_MASK_B);
    173              length = MFB_PAGE_SIZE_W;
    174            } else if (BYTE_0(eraseType) == CIB_ERASE) {
    175              eraseOp = FLASH_CTRL_OPTWREN | FLASH_CTRL_OPTERASE;
    176              ptr = (int32u *)CIB_BOTTOM;
    177              length = CIB_SIZE_W;
    178            } else {
    179              return FIB_ERR_INVALID_TYPE;
    180            }
    181            if ((eraseType & DO_ERASE) != 0) {
    182              enableFlitf();
    183              FLASH_CTRL = eraseOp;
    184              if (BYTE_0(eraseType) == MFB_PAGE_ERASE) {
    185                FLASH_ADDR = (address & MFB_PAGE_MASK_B);
    186              }
    187              eraseOp |= FLASH_CTRL_FLA_START;
    188              // Perform the actual erase.
    189              FLASH_CTRL = eraseOp;
    190              // Wait for the busy bit to clear, indicating operation is done.
    191              while ((FLASH_STATUS & FLASH_STATUS_FLA_BSY) != 0) {}
    192              // Reset the operation complete flag.
    193              FLASH_STATUS = FLASH_STATUS_EOP;
    194              // Check for errors; the only relevant one for erasing is write protection.
    195              if (FLASH_STATUS & FLASH_STATUS_WRP_ERR) {
    196                FLASH_STATUS = FLASH_STATUS_WRP_ERR;
    197                status = FIB_ERR_WRITE_PROTECTED;
    198              }
    199              disableFlitf();
    200            }
    201            if (status == FIB_SUCCESS
    202                && (eraseType & DO_VERIFY) != 0) {
    203              int32u i;
    204              for (i = 0; i < length; i++) {
    205                if (*ptr != 0xFFFFFFFF) {
    206                  return FIB_ERR_VERIFY_FAILED;
    207                }
    208                ptr++;
    209              }
    210            }
    211            return status;
    212          }
    213          #endif // ST_EMU_TEST
    214          

   \                                 In section .text, align 2, keep-with-next
    215          static boolean verifyFib(void)
    216          {
    217            // Ensure that a programmed FIB of a proper version is present
    218            return ( (halFixedAddressTable.baseTable.type == FIXED_ADDRESS_TABLE_TYPE) &&
    219                     ( ( (halFixedAddressTable.baseTable.version & FAT_MAJOR_VERSION_MASK) 
    220                         == 0x0000 ) &&
    221                       (halFixedAddressTable.baseTable.version >= 0x0002) 
    222                     )
    223                   );
   \                     verifyFib:
   \   00000000   ....               LDR.N    R0,??DataTable7_1
   \   00000002   018A               LDRH     R1,[R0, #+16]
   \   00000004   40F6A772           MOVW     R2,#+4007
   \   00000008   9142               CMP      R1,R2
   \   0000000A   09D1               BNE.N    ??verifyFib_0
   \   0000000C   418A               LDRH     R1,[R0, #+18]
   \   0000000E   4FF47F40           MOV      R0,#+65280
   \   00000012   0142               TST      R1,R0
   \   00000014   04D1               BNE.N    ??verifyFib_0
   \   00000016   0229               CMP      R1,#+2
   \   00000018   8041               SBCS     R0,R0,R0
   \   0000001A   C043               MVNS     R0,R0
   \   0000001C   C00F               LSRS     R0,R0,#+31
   \   0000001E   7047               BX       LR
   \                     ??verifyFib_0:
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   7047               BX       LR               ;; return
    224          }
    225          
    226          //The parameter 'eraseType' chooses which erasure will be performed while
    227          //the 'address' parameter chooses the page to be erased during MFB page erase.

   \                                 In section .text, align 2, keep-with-next
    228          StStatus halInternalFlashErase(int8u eraseType, int32u address)
    229          {
   \                     halInternalFlashErase:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0446               MOV      R4,R0
   \   00000006   8946               MOV      R9,R1
    230            FibStatus status;
    231            
    232            ATOMIC(
    233              BYPASS_MPU(
    234                flashEraseIsActive = TRUE;
    235                #if defined(ST_EMU_TEST) 
    236                  // Always try to use the FIB bootloader if its present
    237                  if(verifyFib()) {
    238                    status = halFixedAddressTable.fibFlashErase(
    239                                                       (((int32u)eraseType) | DO_ERASE), 
    240                                                       address);
    241                  } else {
    242                    status = fibFlashErase((((int32u)eraseType) | DO_ERASE), address);
    243                  }
    244                #else
    245           
    246           
    247           
    248                  assert(verifyFib());
    249                  status = halFixedAddressTable.fibFlashErase(
    250                                                     (((int32u)eraseType) | DO_ERASE), 
    251                                                     address);
    252                #endif
    253              )
    254            )
   \   00000008   ........           BL       _disableBasePri
   \   0000000C   0646               MOV      R6,R0
   \   0000000E   ....               LDR.N    R7,??DataTable7
   \   00000010   0120               MOVS     R0,#+1
   \   00000012   3870               STRB     R0,[R7, #+0]
   \   00000014   ........           BL       verifyFib
   \   00000018   20B9               CBNZ.N   R0,??halInternalFlashErase_0
   \   0000001A   E822               MOVS     R2,#+232
   \   0000001C   ........           BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000020   ........           BL       __iar_EmptyStepPoint
   \                     ??halInternalFlashErase_0:
   \   00000024   ....               LDR.N    R0,??DataTable7_1
   \   00000026   D0F82880           LDR      R8,[R0, #+40]
   \   0000002A   4946               MOV      R1,R9
   \   0000002C   4FF48070           MOV      R0,#+256
   \   00000030   2043               ORRS     R0,R0,R4
   \   00000032   C047               BLX      R8
   \   00000034   0546               MOV      R5,R0
   \   00000036   3046               MOV      R0,R6
   \   00000038   ........           BL       _writeBasePri
    255            //If there are any interrupts pending that could have been delayed for 21ms,
    256            //they will be serviced here since we exit the ATOMIC block.  These ISRs
    257            //can query the flash library and find out that erasing is active.  After
    258            //this point, we're no longer ATOMIC/disrupting latency so our erase
    259            //active flag should be cleared.
    260            flashEraseIsActive = FALSE;
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   3870               STRB     R0,[R7, #+0]
    261            
    262            if(status!=FIB_SUCCESS) {
   \   00000040   ........           ADR.W    R6,fibToStStatus
   \   00000044   0DB1               CBZ.N    R5,??halInternalFlashErase_1
    263              return fibToStStatus[status];
   \   00000046   A85D               LDRB     R0,[R5, R6]
   \   00000048   05E0               B.N      ??halInternalFlashErase_2
    264            }
    265          
    266            #if defined(ST_EMU_TEST)
    267              // Always try to use the FIB bootloader if its present
    268              if(verifyFib()) {
    269                status = halFixedAddressTable.fibFlashErase(
    270                                                    (((int32u)eraseType) | DO_VERIFY), 
    271                                                    address);
    272              } else {
    273                status = fibFlashErase((((int32u)eraseType) | DO_VERIFY), address);
    274              }
    275            #else
    276              status = halFixedAddressTable.fibFlashErase(
    277                                                  (((int32u)eraseType) | DO_VERIFY), 
    278                                                  address);
   \                     ??halInternalFlashErase_1:
   \   0000004A   4946               MOV      R1,R9
   \   0000004C   4FF40070           MOV      R0,#+512
   \   00000050   2043               ORRS     R0,R0,R4
   \   00000052   C047               BLX      R8
    279            #endif
    280            return fibToStStatus[status];
   \   00000054   805D               LDRB     R0,[R0, R6]
   \                     ??halInternalFlashErase_2:
   \   00000056   BDE8F283           POP      {R1,R4-R9,PC}    ;; return
    281          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           ADR.W    R1,`?<Constant "E:\\\\\\312\\265\\321\\3514 16\\265\\343\\3`
   \   00000004   ........           ADR.W    R0,`?<Constant "verifyFib()">`
   \   00000008   ........           B.W      __aeabi_assert
    282          
    283          
    284          //The parameter 'address' defines the starting address of where the
    285          //programming will occur - this parameter MUST be half-word aligned since all
    286          //programming operations are HW.  The parameter 'data' is a pointer to a buffer
    287          //containin the 16bit half-words to be written.  Length is the number of 16bit
    288          //half-words contained in 'data' to be written to flash.
    289          //NOTE: This function can NOT write the option bytes and will throw an error
    290          //if that is attempted.

   \                                 In section .text, align 2, keep-with-next
    291          StStatus halInternalFlashWrite(int32u address, int16u * data, int32u length)
    292          {
   \                     halInternalFlashWrite:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   8046               MOV      R8,R0
   \   00000006   8946               MOV      R9,R1
    293            FibStatus status;
    294              
    295            length = length * 2;  // fib routines specify length in bytes
   \   00000008   5600               LSLS     R6,R2,#+1
    296            
    297            ATOMIC(
    298              BYPASS_MPU( 
    299                #if defined(ST_EMU_TEST) 
    300                  // Always try to use the FIB bootloader if its present
    301                  if(verifyFib()) {
    302                    status = halFixedAddressTable.fibFlashWrite(address, 
    303                                                                (int8u *)data, 
    304                                                                length,
    305                                                                0);
    306                  } else {
    307                    status = fibFlashWrite(address, (int8u *)data, length, 0);
    308                  }
    309                #else
    310           
    311           
    312           
    313                  // Ensure that a programmed FIB of a proper version is present
    314                  assert(verifyFib());
    315                  status = halFixedAddressTable.fibFlashWrite(address, 
    316                                                              (int8u *)data, 
    317                                                              length,
    318                                                              0);
    319                #endif
    320              )
    321            )
   \   0000000A   ........           BL       _disableBasePri
   \   0000000E   0746               MOV      R7,R0
   \   00000010   ........           BL       verifyFib
   \   00000014   28B9               CBNZ.N   R0,??halInternalFlashWrite_0
   \   00000016   40F22912           MOVW     R2,#+297
   \   0000001A   ........           BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   0000001E   ........           BL       __iar_EmptyStepPoint
   \                     ??halInternalFlashWrite_0:
   \   00000022   ....               LDR.N    R0,??DataTable7_1
   \   00000024   446A               LDR      R4,[R0, #+36]
   \   00000026   0023               MOVS     R3,#+0
   \   00000028   3246               MOV      R2,R6
   \   0000002A   4946               MOV      R1,R9
   \   0000002C   4046               MOV      R0,R8
   \   0000002E   A047               BLX      R4
   \   00000030   0546               MOV      R5,R0
   \   00000032   3846               MOV      R0,R7
   \   00000034   ........           BL       _writeBasePri
    322            
    323            if(status!=FIB_SUCCESS) {
   \   00000038   ........           ADR.W    R7,fibToStStatus
   \   0000003C   0DB1               CBZ.N    R5,??halInternalFlashWrite_1
    324              return fibToStStatus[status];
   \   0000003E   E85D               LDRB     R0,[R5, R7]
   \   00000040   05E0               B.N      ??halInternalFlashWrite_2
    325            }
    326            
    327            #if defined(ST_EMU_TEST)
    328              // Always try to use the FIB bootloader if its present
    329              if(verifyFib()) {
    330                status = halFixedAddressTable.fibFlashWrite(address,
    331                                                            (int8u *)data,
    332                                                            0,
    333                                                            length);
    334              } else {
    335                status = fibFlashWriteVerify(address, (int8u *)data, length);
    336              }
    337            #else
    338              status = halFixedAddressTable.fibFlashWrite(address,
    339                                                          (int8u *)data,
    340                                                          0,
    341                                                          length);
   \                     ??halInternalFlashWrite_1:
   \   00000042   3346               MOV      R3,R6
   \   00000044   0022               MOVS     R2,#+0
   \   00000046   4946               MOV      R1,R9
   \   00000048   4046               MOV      R0,R8
   \   0000004A   A047               BLX      R4
    342            #endif
    343            
    344            return fibToStStatus[status];
   \   0000004C   C05D               LDRB     R0,[R0, R7]
   \                     ??halInternalFlashWrite_2:
   \   0000004E   BDE8F283           POP      {R1,R4-R9,PC}    ;; return
    345          }
    346          
    347          
    348          //The parameter 'byte' is the option byte number to be programmed.  This
    349          //parameter can have a value of 0 through 7.  'data' is the 8bit value to be
    350          //programmed into the option byte since the hardware will calculate the
    351          //compliment and program the full 16bit option byte.

   \                                 In section .text, align 2, keep-with-next
    352          StStatus halInternalCibOptionByteWrite(int8u byte, int8u data)
    353          {
   \                     halInternalCibOptionByteWrite:
   \   00000000   80B5               PUSH     {R7,LR}
    354            int16u dataAndInverse = HIGH_LOW_TO_INT(~data, data);
   \   00000002   CA43               MVNS     R2,R1
   \   00000004   92B2               UXTH     R2,R2
   \   00000006   01EB0221           ADD      R1,R1,R2, LSL #+8
   \   0000000A   ADF80010           STRH     R1,[SP, #+0]
    355            // There are only 8 option bytes, don't try to program more than that.
    356            if (byte > 7) {
   \   0000000E   0828               CMP      R0,#+8
   \   00000010   01D3               BCC.N    ??halInternalCibOptionByteWrite_0
    357              return ST_ERR_FLASH_PROG_FAIL;
   \   00000012   4B20               MOVS     R0,#+75
   \   00000014   02BD               POP      {R1,PC}
    358            }
    359            return halInternalFlashWrite(CIB_OB_BOTTOM + (byte << 1), &dataAndInverse, 1);
   \                     ??halInternalCibOptionByteWrite_0:
   \   00000016   0122               MOVS     R2,#+1
   \   00000018   00A9               ADD      R1,SP,#+0
   \   0000001A   ....               LDR.N    R3,??DataTable7_2  ;; 0x8040800
   \   0000001C   03EB4000           ADD      R0,R3,R0, LSL #+1
   \   00000020   ........           BL       halInternalFlashWrite
   \   00000024   02BD               POP      {R1,PC}          ;; return
    360          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     flashEraseIsActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   ........           DC32     halFixedAddressTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   00080408           DC32     0x8040800

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "verifyFib()">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   766572696679       DC8 118, 101, 114, 105, 102, 121, 70, 105, 98, 40
   \              46696228    
   \   0000000A   2900               DC8 41, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "E:\\\\\\312\\265\\321\\3514 16\\265\\343\\3`:
   \   00000000                      ; Initializer data, 56 bytes
   \   00000000   453A5CCAB5D1       DC8 69, 58, 92, 202, 181, 209, 233, 52, 32, 49
   \              E9342031    
   \   0000000A   36B5E3D7E9CD       DC8 54, 181, 227, 215, 233, 205, 248, 92, 185, 164
   \              F85CB9A4    
   \   00000014   B3CCD4B4B4FA       DC8 179, 204, 212, 180, 180, 250, 194, 235, 92, 104
   \              C2EB5C68    
   \   0000001E   616C5C6D6963       DC8 97, 108, 92, 109, 105, 99, 114, 111, 92, 99
   \              726F5C63    
   \   00000028   6F727465786D       DC8 111, 114, 116, 101, 120, 109, 51, 92, 102, 108
   \              335C666C    
   \   00000032   6173682E6300       DC8 97, 115, 104, 46, 99, 0
    361          
    362          

   Maximum stack usage in bytes:

     Function                      .cstack
     --------                      -------
     halFlashEraseIsActive              0
     halInternalCibOptionByteWrite      8
     halInternalFlashErase             32
     halInternalFlashWrite             32
     verifyFib                          0


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     fibToStStatus                                     8
     flashEraseIsActive                                1
     halFlashEraseIsActive                             6
     verifyFib                                        36
     halInternalFlashErase                            90
     ?Subroutine0                                     12
     halInternalFlashWrite                            82
     halInternalCibOptionByteWrite                    38
     ??DataTable7                                      4
     ??DataTable7_1                                    4
     ??DataTable7_2                                    4
     ?<Constant "verifyFib()">                        12
     ?<Constant "E:\\\312\265\321\3514 16\265\343\3   56

 
   1 byte  in section .bss
 352 bytes in section .text
 
 352 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
