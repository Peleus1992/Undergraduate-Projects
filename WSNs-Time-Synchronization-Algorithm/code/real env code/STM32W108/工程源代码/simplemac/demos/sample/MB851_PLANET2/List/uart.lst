###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     05/Jul/2014  18:42:02 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  I:\实验4 无线传感器节点多点通信实验\工程源代码\hal\micro #
#                    \cortexm3\uart.c                                         #
#    Command line =  "I:\实验4 无线传感器节点多点通信实验\工程源代码\hal\micr #
#                    o\cortexm3\uart.c" -D BOARD_MB851 -D                     #
#                    "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\""  #
#                    -D "BOARD_HEADER=\"hal/micro/cortexm3/stm32w108/board.h\ #
#                    "" -D CORTEXM3 -D CORTEXM3_STM32W108 -D PHY_STM32W108XX  #
#                    -D DISABLE_WATCHDOG -D PLANET_ROLE -D BOARD_MB851 -D     #
#                    "__SOURCEFILE__=\"uart.c\"" -lC "I:\实验4                #
#                    无线传感器节点多点通信实验\工程源代码\simplemac\demos\sa #
#                    mple\MB851_PLANET2\List\" --diag_suppress Pa050 -o       #
#                    "I:\实验4 无线传感器节点多点通信实验\工程源代码\simplema #
#                    c\demos\sample\MB851_PLANET2\Obj\" --debug               #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "D:\study soft\IAR6.10\IARsoft\arm\INC\c\D #
#                    Lib_Config_Normal.h" -I "I:\实验4                        #
#                    无线传感器节点多点通信实验\工程源代码\hal\micro\cortexm3 #
#                    \" -I "I:\实验4 无线传感器节点多点通信实验\工程源代码\si #
#                    mplemac\demos\sample\..\..\..\simplemac\include\" -I     #
#                    "I:\实验4 无线传感器节点多点通信实验\工程源代码\simplema #
#                    c\demos\sample\..\..\..\" -I "I:\实验4                   #
#                    无线传感器节点多点通信实验\工程源代码\simplemac\demos\sa #
#                    mple\..\..\..\hal\" -I "I:\实验4                         #
#                    无线传感器节点多点通信实验\工程源代码\simplemac\demos\sa #
#                    mple\..\..\..\HAL\MICRO\CORTEXM3\STM32W108\" -I          #
#                    "I:\实验4 无线传感器节点多点通信实验\工程源代码\simplema #
#                    c\demos\sample\..\..\..\simplemac\" -I "I:\实验4         #
#                    无线传感器节点多点通信实验\工程源代码\simplemac\demos\sa #
#                    mple\..\..\..\shared\" -Ohz --use_c++_inline             #
#    List file    =  I:\实验4 无线传感器节点多点通信实验\工程源代码\simplemac #
#                    \demos\sample\MB851_PLANET2\List\uart.lst                #
#    Object file  =  I:\实验4 无线传感器节点多点通信实验\工程源代码\simplemac #
#                    \demos\sample\MB851_PLANET2\Obj\uart.o                   #
#                                                                             #
#                                                                             #
###############################################################################

I:\实验4 无线传感器节点多点通信实验\工程源代码\hal\micro\cortexm3\uart.c
      1          /** @file hal/micro/cortexm3/uart.c
      2           * @brief STM32W  uart drivers, supporting IAR's standard library
      3           *        IO routines.
      4           *
      5           * <!--(C) COPYRIGHT 2010 STMicroelectronics. All rights reserved.        -->
      6           */
      7          
      8          #include PLATFORM_HEADER
      9          #include "hal/micro/micro-common.h"
     10          #include "hal/micro/cortexm3/micro-common.h"
     11          #include "uart.h"
     12          #ifdef __GNUC__
     13          #include <sys/stat.h>
     14          #include <stdio.h>
     15          #define _LLIO_STDIN ((int) stdin)
     16          #define _LLIO_STDOUT ((int) stdout)
     17          #define _LLIO_STDERR ((int) stderr)
     18          #define _LLIO_ERROR  (-1)
     19          #define __write _write
     20          #define __read _read
     21          #undef putchar
     22          void __io_putchar( char c );
     23          int putchar (int c)
     24          {
     25            __io_putchar((char) c);
     26            return c;
     27          }
     28          #endif
     29          #define RECEIVE_QUEUE_SIZE (128)
     30          

   \                                 In section .bss, align 4
     31          int8u rxQ[RECEIVE_QUEUE_SIZE];
   \                     rxQ:
   \   00000000                      DS8 128

   \                                 In section .bss, align 2
     32          int16u rxHead;
   \                     rxHead:
   \   00000000                      DS8 2
     33          int16u rxTail;
   \                     rxTail:
   \   00000002                      DS8 2
     34          int16u rxUsed;
   \                     rxUsed:
   \   00000004                      DS8 2
     35          
     36          //////////////////////////////////////////////////////////////////////////////
     37          // Initialization
     38          

   \                                 In section .text, align 2, keep-with-next
     39          void uartInit(int32u baudrate, int8u databits, SerialParity parity, int8u stopbits)
     40          {
   \                     uartInit:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0746               MOV      R7,R0
   \   00000004   0E46               MOV      R6,R1
   \   00000006   1446               MOV      R4,R2
   \   00000008   1D46               MOV      R5,R3
     41            int32u tempcfg;
     42            int32u tmp;
     43            
     44            assert( (baudrate >= 300) && (baudrate <=921600) );
   \   0000000A   A7F59670           SUB      R0,R7,#+300
   \   0000000E   ....               LDR.N    R1,??DataTable5  ;; 0xe0ed5
   \   00000010   8842               CMP      R0,R1
   \   00000012   08D3               BCC.N    ??uartInit_0
   \   00000014   2C22               MOVS     R2,#+44
   \   00000016   ........           ADR.W    R1,`?<Constant "I:\\\\\\312\\265\\321\\3514 \\316\\336\\317`
   \   0000001A   ........           ADR.W    R0,`?<Constant "(baudrate >= 300) && ...">`
   \   0000001E   ........           BL       __aeabi_assert
   \   00000022   ........           BL       __iar_EmptyStepPoint
     45              
     46            tmp = (2*12000000L + baudrate/2) / baudrate;
   \                     ??uartInit_0:
   \   00000026   ....               LDR.N    R0,??DataTable5_1  ;; 0x16e3600
   \   00000028   00EB5700           ADD      R0,R0,R7, LSR #+1
   \   0000002C   B0FBF7F0           UDIV     R0,R0,R7
     47            SC1_UARTFRAC = tmp & 1;
   \   00000030   ....               LDR.N    R1,??DataTable5_2  ;; 0x4000c854
   \   00000032   00F00102           AND      R2,R0,#0x1
   \   00000036   8A61               STR      R2,[R1, #+24]
     48            SC1_UARTPER = tmp / 2;
   \   00000038   4008               LSRS     R0,R0,#+1
   \   0000003A   4861               STR      R0,[R1, #+20]
     49            
     50            if(databits == 7) {
   \   0000003C   072E               CMP      R6,#+7
   \   0000003E   0CBF               ITE      EQ 
   \   00000040   0020               MOVEQ    R0,#+0
   \   00000042   0220               MOVNE    R0,#+2
     51              tempcfg = 0;
     52            } else {
     53              tempcfg = SC_UART8BIT;
     54            }
     55            
     56            if (parity == PARITY_ODD) {
   \   00000044   012C               CMP      R4,#+1
   \   00000046   08BF               IT       EQ 
   \   00000048   40F01800           ORREQ    R0,R0,#0x18
     57              tempcfg |= SC_UARTPAR | SC_UARTODD;
   \   0000004C   03D0               BEQ.N    ??uartInit_1
     58            } else if( parity == PARITY_EVEN ) {
   \   0000004E   022C               CMP      R4,#+2
   \   00000050   08BF               IT       EQ 
   \   00000052   40F00800           ORREQ    R0,R0,#0x8
     59              tempcfg |= SC_UARTPAR;
     60            }
     61          
     62            if ((stopbits & 0x0F) >= 2) {
   \                     ??uartInit_1:
   \   00000056   05F00F02           AND      R2,R5,#0xF
   \   0000005A   022A               CMP      R2,#+2
   \   0000005C   A8BF               IT       GE 
   \   0000005E   40F00400           ORRGE    R0,R0,#0x4
     63              tempcfg |= SC_UART2STP;
     64            }
     65            SC1_UARTCFG = tempcfg;
   \   00000062   8860               STR      R0,[R1, #+8]
     66          
     67            SC1_MODE = SC1_MODE_UART;
   \   00000064   0120               MOVS     R0,#+1
   \   00000066   0860               STR      R0,[R1, #+0]
     68          
     69            rxHead=0;
   \   00000068   ....               LDR.N    R0,??DataTable5_3
   \   0000006A   0021               MOVS     R1,#+0
   \   0000006C   0180               STRH     R1,[R0, #+0]
     70            rxTail=0;
   \   0000006E   4180               STRH     R1,[R0, #+2]
     71            rxUsed=0;
   \   00000070   8180               STRH     R1,[R0, #+4]
     72          
     73            halGpioConfig(PORTB_PIN(1),GPIOCFG_OUT_ALT);
   \   00000072   0921               MOVS     R1,#+9
   \   00000074   0920               MOVS     R0,#+9
   \   00000076   ........           BL       halGpioConfig
     74            halGpioConfig(PORTB_PIN(2),GPIOCFG_IN);
   \   0000007A   0421               MOVS     R1,#+4
   \   0000007C   0A20               MOVS     R0,#+10
   \   0000007E   ........           BL       halGpioConfig
     75          
     76            // Make the RX Valid interrupt level sensitive (instead of edge)
     77            SC1_INTMODE = SC_RXVALLEVEL;
   \   00000082   ....               LDR.N    R0,??DataTable5_4  ;; 0x4000a808
   \   00000084   0121               MOVS     R1,#+1
   \   00000086   C164               STR      R1,[R0, #+76]
     78            // Enable just RX interrupts; TX interrupts are controlled separately
     79            INT_SC1CFG |= (INT_SCRXVAL   |
     80                           INT_SCRXOVF   |
     81                           INT_SC1FRMERR |
     82                           INT_SC1PARERR);
   \   00000088   016C               LDR      R1,[R0, #+64]
   \   0000008A   46F20902           MOVW     R2,#+24585
   \   0000008E   1143               ORRS     R1,R2,R1
   \   00000090   0164               STR      R1,[R0, #+64]
     83            INT_SC1FLAG = 0xFFFF; // Clear any stale interrupts
   \   00000092   4FF6FF71           MOVW     R1,#+65535
   \   00000096   0160               STR      R1,[R0, #+0]
     84            INT_CFGSET = INT_SC1;
   \   00000098   ....               LDR.N    R0,??DataTable5_5  ;; 0xe000e100
   \   0000009A   2021               MOVS     R1,#+32
   \   0000009C   0160               STR      R1,[R0, #+0]
     85          }
   \   0000009E   F1BD               POP      {R0,R4-R7,PC}    ;; return
     86          
     87          //////////////////////////////////////////////////////////////////////////////
     88          // Transmit
     89          
     90          // IAR Standard library hook for serial output

   \                                 In section .text, align 2, keep-with-next
     91          size_t __write(int handle, const unsigned char * buffer, size_t size)
     92          {
   \                     __write:
   \   00000000   10B5               PUSH     {R4,LR}
     93            size_t nChars = 0;
   \   00000002   0023               MOVS     R3,#+0
     94          
     95            /* This template only writes to "standard out" and "standard err",
     96             * for all other file handles it returns failure. */
     97            if (handle != _LLIO_STDOUT && handle != _LLIO_STDERR) {
   \   00000004   0128               CMP      R0,#+1
   \   00000006   04D0               BEQ.N    ??__write_0
   \   00000008   0228               CMP      R0,#+2
   \   0000000A   02D0               BEQ.N    ??__write_0
     98              return _LLIO_ERROR;
   \                     ??__write_1:
   \   0000000C   4FF0FF30           MOV      R0,#-1
   \   00000010   10BD               POP      {R4,PC}
     99            }
    100          
    101            if (buffer == 0) {
   \                     ??__write_0:
   \   00000012   ....               LDR.N    R0,??DataTable5_6  ;; 0x4000c83c
   \   00000014   0029               CMP      R1,#+0
   \   00000016   04D1               BNE.N    ??__write_2
    102              // This means that we should flush internal buffers.  
    103              //spin until TX complete (TX is idle)
    104              while ((SC1_UARTSTAT&SC_UARTTXIDLE)!=SC_UARTTXIDLE) {}
   \                     ??__write_3:
   \   00000018   C168               LDR      R1,[R0, #+12]
   \   0000001A   4906               LSLS     R1,R1,#+25
   \   0000001C   FCD5               BPL.N    ??__write_3
    105              return 0;
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   10BD               POP      {R4,PC}
    106            }
    107            
    108            // ensure port is configured for UART
    109            if(SC1_MODE != SC1_MODE_UART) {
   \                     ??__write_2:
   \   00000022   8469               LDR      R4,[R0, #+24]
   \   00000024   012C               CMP      R4,#+1
   \   00000026   F1D1               BNE.N    ??__write_1
   \   00000028   06E0               B.N      ??__write_4
    110              return _LLIO_ERROR;
    111            }
    112          
    113            while(size--) {
    114              //spin until data register has room for more data
    115              while ((SC1_UARTSTAT&SC_UARTTXFREE)!=SC_UARTTXFREE) {}
   \                     ??__write_5:
   \   0000002A   C468               LDR      R4,[R0, #+12]
   \   0000002C   6407               LSLS     R4,R4,#+29
   \   0000002E   FCD5               BPL.N    ??__write_5
    116              SC1_DATA = *buffer;
   \   00000030   11F8014B           LDRB     R4,[R1], #+1
   \   00000034   0460               STR      R4,[R0, #+0]
    117              buffer++;
    118          
    119              ++nChars;
   \   00000036   5B1C               ADDS     R3,R3,#+1
    120            }
   \                     ??__write_4:
   \   00000038   1446               MOV      R4,R2
   \   0000003A   621E               SUBS     R2,R4,#+1
   \   0000003C   002C               CMP      R4,#+0
   \   0000003E   F4D1               BNE.N    ??__write_5
    121          
    122            return nChars;
   \   00000040   1846               MOV      R0,R3
   \   00000042   10BD               POP      {R4,PC}          ;; return
    123          }
    124          #ifdef __GNUC__
    125          int fflush (FILE *f)
    126          #endif
    127          #ifdef __ICCARM__

   \                                 In section .text, align 2, keep-with-next
    128          size_t fflush(int handle)
    129          #endif
    130          {
    131            return __write(_LLIO_STDOUT, NULL, 0);
   \                     fflush:
   \   00000000   ....               B.N      ?Subroutine0
    132          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0022               MOVS     R2,#+0
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   0120               MOVS     R0,#+1
   \   00000006   ....               B.N      __write
    133          
    134          static void halInternalUart1TxIsr(void)
    135          {
    136            // Nothing for now, as ouput is blocking from the __write function
    137          }
    138          
    139          
    140          //////////////////////////////////////////////////////////////////////////////
    141          // Receive
    142          
    143          // IAR Standard library hook for serial input

   \                                 In section .text, align 2, keep-with-next
    144          size_t __read(int handle, unsigned char * buffer, size_t size)
    145          {
   \                     __read:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0C46               MOV      R4,R1
   \   00000006   9046               MOV      R8,R2
    146            int nChars = 0;
    147          
    148            /* This template only reads from "standard in", for all other file
    149             * handles it returns failure. */
    150            if (handle != _LLIO_STDIN)
   \   00000008   10B1               CBZ.N    R0,??__read_0
    151            {
    152              return _LLIO_ERROR;
   \   0000000A   4FF0FF30           MOV      R0,#-1
   \   0000000E   1DE0               B.N      ??__read_1
    153            }
    154          
    155            for(nChars = 0; (rxUsed>0) && (nChars < size); nChars++) {
   \                     ??__read_0:
   \   00000010   0026               MOVS     R6,#+0
   \   00000012   ....               LDR.N    R7,??DataTable5_7
   \   00000014   ....               LDR.N    R5,??DataTable5_3
   \   00000016   14E0               B.N      ??__read_2
    156              ATOMIC(
    157                *buffer++ = rxQ[rxTail];
    158                rxTail = (rxTail+1) % RECEIVE_QUEUE_SIZE;
    159                rxUsed--;
    160              )
   \                     ??__read_3:
   \   00000018   ........           BL       _disableBasePri
   \   0000001C   6988               LDRH     R1,[R5, #+2]
   \   0000001E   C95D               LDRB     R1,[R1, R7]
   \   00000020   04F8011B           STRB     R1,[R4], #+1
   \   00000024   6988               LDRH     R1,[R5, #+2]
   \   00000026   491C               ADDS     R1,R1,#+1
   \   00000028   8A11               ASRS     R2,R1,#+6
   \   0000002A   01EB5262           ADD      R2,R1,R2, LSR #+25
   \   0000002E   D211               ASRS     R2,R2,#+7
   \   00000030   A1EBC211           SUB      R1,R1,R2, LSL #+7
   \   00000034   6980               STRH     R1,[R5, #+2]
   \   00000036   A988               LDRH     R1,[R5, #+4]
   \   00000038   491E               SUBS     R1,R1,#+1
   \   0000003A   A980               STRH     R1,[R5, #+4]
   \   0000003C   ........           BL       _writeBasePri
    161            }
   \   00000040   761C               ADDS     R6,R6,#+1
   \                     ??__read_2:
   \   00000042   A888               LDRH     R0,[R5, #+4]
   \   00000044   08B1               CBZ.N    R0,??__read_4
   \   00000046   4645               CMP      R6,R8
   \   00000048   E6D3               BCC.N    ??__read_3
    162          
    163            return nChars;
   \                     ??__read_4:
   \   0000004A   3046               MOV      R0,R6
   \                     ??__read_1:
   \   0000004C   BDE8F081           POP      {R4-R8,PC}       ;; return
    164          }
    165          
    166          static void halInternalUart1RxIsr(void)
    167          {
    168          
    169            // At present we really don't care which interrupt(s)
    170            // occurred, just that one did.  Loop reading RXVALID
    171            // data, processing any errors noted
    172            // along the way.
    173            while ( SC1_UARTSTAT & SC_UARTRXVAL ) {
    174              int8u errors = SC1_UARTSTAT & (SC_UARTFRMERR |
    175                                             SC_UARTRXOVF  |
    176                                             SC_UARTPARERR );
    177              int8u incoming = (int8u) SC1_DATA;
    178          
    179              if ( (errors == 0) && (rxUsed < (RECEIVE_QUEUE_SIZE-1)) ) {
    180                rxQ[rxHead] = incoming;
    181                rxHead = (rxHead+1) % RECEIVE_QUEUE_SIZE;
    182                rxUsed++;
    183              } else {
    184                // IAR standard library doesn't allow for any error handling in the 
    185                //  case of rx errors or not having space in the receive queue, so the
    186                //  errors are just silently dropped.
    187              }
    188            } // end of while ( SC1_UARTSTAT & SC1_UARTRXVAL )
    189          }
    190          
    191          
    192          //////////////////////////////////////////////////////////////////////////////
    193          // Interrupts
    194          

   \                                 In section .text, align 2, keep-with-next
    195          void halSc1Isr(void)
    196          {
   \                     halSc1Isr:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    197            int32u interrupt;
    198          
    199            //this read and mask is performed in two steps otherwise the compiler
    200            //will complain about undefined order of volatile access
    201            interrupt = INT_SC1FLAG;
   \   00000002   ....               LDR.N    R0,??DataTable5_4  ;; 0x4000a808
   \   00000004   0168               LDR      R1,[R0, #+0]
    202            interrupt &= INT_SC1CFG;
   \   00000006   026C               LDR      R2,[R0, #+64]
   \   00000008   02EA0104           AND      R4,R2,R1
   \   0000000C   ....               LDR.N    R1,??DataTable5_7
   \   0000000E   ....               LDR.N    R2,??DataTable5_3
   \   00000010   ....               LDR.N    R3,??DataTable5_6  ;; 0x4000c83c
   \   00000012   002C               CMP      R4,#+0
   \   00000014   19E0               B.N      ??halSc1Isr_0
    203            
    204            while (interrupt != 0) {
    205            
    206              INT_SC1FLAG = interrupt; // acknowledge the interrupts early
    207          
    208              // RX events
    209              if ( interrupt & (INT_SCRXVAL   | // RX has data
    210                                INT_SCRXOVF   | // RX Overrun error
    211                                INT_SC1FRMERR | // RX Frame error
    212                                INT_SC1PARERR ) // RX Parity error
    213                 ) {
   \                     ??halSc1Isr_1:
   \   00000016   DC68               LDR      R4,[R3, #+12]
   \   00000018   1D68               LDR      R5,[R3, #+0]
   \   0000001A   14F03804           ANDS     R4,R4,#0x38
   \   0000001E   0ED1               BNE.N    ??halSc1Isr_2
   \   00000020   9488               LDRH     R4,[R2, #+4]
   \   00000022   7F2C               CMP      R4,#+127
   \   00000024   0BD2               BCS.N    ??halSc1Isr_2
   \   00000026   1688               LDRH     R6,[R2, #+0]
   \   00000028   7554               STRB     R5,[R6, R1]
   \   0000002A   751C               ADDS     R5,R6,#+1
   \   0000002C   AE11               ASRS     R6,R5,#+6
   \   0000002E   05EB5666           ADD      R6,R5,R6, LSR #+25
   \   00000032   F611               ASRS     R6,R6,#+7
   \   00000034   A5EBC615           SUB      R5,R5,R6, LSL #+7
   \   00000038   1580               STRH     R5,[R2, #+0]
   \   0000003A   641C               ADDS     R4,R4,#+1
   \   0000003C   9480               STRH     R4,[R2, #+4]
   \                     ??halSc1Isr_2:
   \   0000003E   DC68               LDR      R4,[R3, #+12]
   \   00000040   A407               LSLS     R4,R4,#+30
   \   00000042   E8D4               BMI.N    ??halSc1Isr_1
    214                halInternalUart1RxIsr();
    215              }
    216              
    217              // TX events
    218              if ( interrupt & (INT_SCTXFREE | // TX has room
    219                                INT_SCTXIDLE ) // TX idle (more room)
    220                 ) {
    221                halInternalUart1TxIsr();
    222              }
    223          
    224              interrupt = INT_SC1FLAG;
   \                     ??halSc1Isr_3:
   \   00000044   0468               LDR      R4,[R0, #+0]
    225              interrupt &= INT_SC1CFG;
   \   00000046   056C               LDR      R5,[R0, #+64]
   \   00000048   2C40               ANDS     R4,R5,R4
   \                     ??halSc1Isr_0:
   \   0000004A   05D0               BEQ.N    ??halSc1Isr_4
   \   0000004C   0460               STR      R4,[R0, #+0]
   \   0000004E   46F20905           MOVW     R5,#+24585
   \   00000052   2C42               TST      R4,R5
   \   00000054   F3D1               BNE.N    ??halSc1Isr_2
   \   00000056   F5E7               B.N      ??halSc1Isr_3
    226            }
    227          }
   \                     ??halSc1Isr_4:
   \   00000058   70BD               POP      {R4-R6,PC}       ;; return
    228          
    229          /*******************************************************************************
    230          * Function Name  : __io_getcharNonBlocking
    231          * Description    : Non blocking read 
    232          * Input          : none
    233          * Output         : dataByte: buffer containing the read byte if any
    234          * Return         : TRUE if there is a data, FALSE otherwise
    235          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    236          boolean __io_getcharNonBlocking(int8u *data)
    237          {
   \                     __io_getcharNonBlocking:
   \   00000000   80B5               PUSH     {R7,LR}
    238            if (__read(_LLIO_STDIN,data,1))
   \   00000002   0122               MOVS     R2,#+1
   \   00000004   0146               MOV      R1,R0
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ........           BL       __read
   \   0000000C   00B1               CBZ.N    R0,??__io_getcharNonBlocking_0
   \   0000000E   0120               MOVS     R0,#+1
   \                     ??__io_getcharNonBlocking_0:
   \   00000010   C0B2               UXTB     R0,R0
    239              return TRUE;
    240            else
    241              return FALSE;
   \   00000012   02BD               POP      {R1,PC}          ;; return
    242          }/* end serialReadByte() */
    243          

   \                                 In section .text, align 2, keep-with-next
    244          void __io_putchar( char c )
    245          {
   \                     __io_putchar:
   \   00000000   01B5               PUSH     {R0,LR}
    246            __write(_LLIO_STDOUT, (unsigned char *)&c, 1);
   \   00000002   0122               MOVS     R2,#+1
   \   00000004   00A9               ADD      R1,SP,#+0
   \   00000006   0120               MOVS     R0,#+1
   \   00000008   ........           BL       __write
    247          }
   \   0000000C   01BD               POP      {R0,PC}          ;; return
    248          

   \                                 In section .text, align 2, keep-with-next
    249          int __io_getchar()
    250          {
   \                     __io_getchar:
   \   00000000   80B5               PUSH     {R7,LR}
    251            unsigned char c;
    252            __read(_LLIO_STDIN, &c, 1);
   \   00000002   0122               MOVS     R2,#+1
   \   00000004   00A9               ADD      R1,SP,#+0
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ........           BL       __read
    253            return (int)(c);
   \   0000000C   9DF80000           LDRB     R0,[SP, #+0]
   \   00000010   02BD               POP      {R1,PC}          ;; return
    254          }
    255          

   \                                 In section .text, align 4, keep-with-next
    256          void __io_flush( void )
    257          {
    258            __write(_LLIO_STDOUT, NULL, 0);
   \                     __io_flush:
   \   00000000                      REQUIRE ?Subroutine0
   \   00000000                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   D50E0E00           DC32     0xe0ed5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   00366E01           DC32     0x16e3600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   54C80040           DC32     0x4000c854

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   ........           DC32     rxHead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   08A80040           DC32     0x4000a808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   00E100E0           DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   3CC80040           DC32     0x4000c83c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   ........           DC32     rxQ

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "(baudrate >= 300) && ...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   286261756472       DC8 40, 98, 97, 117, 100, 114, 97, 116, 101, 32
   \              61746520    
   \   0000000A   3E3D20333030       DC8 62, 61, 32, 51, 48, 48, 41, 32, 38, 38
   \              29202626    
   \   00000014   202862617564       DC8 32, 40, 98, 97, 117, 100, 114, 97, 116, 101
   \              72617465    
   \   0000001E   203C3D393231       DC8 32, 60, 61, 57, 50, 49, 54, 48, 48, 41
   \              36303029    
   \   00000028   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "I:\\\\\\312\\265\\321\\3514 \\316\\336\\317`:
   \   00000000                      ; Initializer data, 76 bytes
   \   00000000   493A5CCAB5D1       DC8 73, 58, 92, 202, 181, 209, 233, 52, 32, 206
   \              E93420CE    
   \   0000000A   DECFDFB4ABB8       DC8 222, 207, 223, 180, 171, 184, 208, 198, 247, 189
   \              D0C6F7BD    
   \   00000014   DAB5E3B6E0B5       DC8 218, 181, 227, 182, 224, 181, 227, 205, 168, 208
   \              E3CDA8D0    
   \   0000001E   C5CAB5D1E95C       DC8 197, 202, 181, 209, 233, 92, 185, 164, 179, 204
   \              B9A4B3CC    
   \   00000028   D4B4B4FAC2EB       DC8 212, 180, 180, 250, 194, 235, 92, 104, 97, 108
   \              5C68616C    
   \   00000032   5C6D6963726F       DC8 92, 109, 105, 99, 114, 111, 92, 99, 111, 114
   \              5C636F72    
   \   0000003C   7465786D335C       DC8 116, 101, 120, 109, 51, 92, 117, 97, 114, 116
   \              75617274    
   \   00000046   2E6300000000       DC8 46, 99, 0, 0, 0, 0
    259          }

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     __io_flush                   8
     __io_getchar                 8
     __io_getcharNonBlocking      8
     __io_putchar                 8
     __read                      24
     __write                      8
     fflush                       8
     halSc1Isr                   16
     uartInit                    24


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     rxQ                                             128
     rxHead                                            6
     rxTail
     rxUsed
     uartInit                                        160
     __write                                          68
     fflush                                            2
     ?Subroutine0                                      8
     __read                                           80
     halSc1Isr                                        90
     __io_getcharNonBlocking                          20
     __io_putchar                                     14
     __io_getchar                                     18
     __io_flush                                        0
     ??DataTable5                                      4
     ??DataTable5_1                                    4
     ??DataTable5_2                                    4
     ??DataTable5_3                                    4
     ??DataTable5_4                                    4
     ??DataTable5_5                                    4
     ??DataTable5_6                                    4
     ??DataTable5_7                                    4
     ?<Constant "(baudrate >= 300) && ...">           44
     ?<Constant "I:\\\312\265\321\3514 \316\336\317   76

 
 134 bytes in section .bss
 612 bytes in section .text
 
 612 bytes of CODE memory
 134 bytes of DATA memory

Errors: none
Warnings: none
