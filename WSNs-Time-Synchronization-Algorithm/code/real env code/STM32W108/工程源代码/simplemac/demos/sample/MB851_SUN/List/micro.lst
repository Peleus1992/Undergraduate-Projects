###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     18/Jul/2014  09:08:05 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Project-related\STM32W108\myCode\实验4                #
#                    16点组网\工程源代码\hal\micro\cortexm3\micro.c           #
#    Command line =  "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\hal\micro\cortexm3\micro.c" -D       #
#                    BOARD_MB851 -D "PLATFORM_HEADER=\"hal/micro/cortexm3/com #
#                    piler/iar.h\"" -D "BOARD_HEADER=\"hal/micro/cortexm3/stm #
#                    32w108/board.h\"" -D CORTEXM3 -D CORTEXM3_STM32W108 -D   #
#                    PHY_STM32W108XX -D DISABLE_WATCHDOG -D SUN_ROLE -D       #
#                    "__SOURCEFILE__=\"micro.c\"" -lC                         #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_SUN\Lis #
#                    t\" --diag_suppress Pa050 -o                             #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_SUN\Obj #
#                    \" --debug --endian=little --cpu=Cortex-M3 -e            #
#                    --fpu=None --dlib_config "G:\Peleus_Program Files\IAR    #
#                    for ARM\arm\INC\c\DLib_Config_Normal.h" -I               #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\hal\micro\cortexm3\" -I              #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\simp #
#                    lemac\include\" -I "F:\Project-related\STM32W108\myCode\ #
#                    实验4 16点组网\工程源代码\simplemac\demos\sample\..\..\. #
#                    .\" -I "F:\Project-related\STM32W108\myCode\实验4        #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\hal\ #
#                    " -I "F:\Project-related\STM32W108\myCode\实验4          #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\HAL\ #
#                    MICRO\CORTEXM3\STM32W108\" -I                            #
#                    "F:\Project-related\STM32W108\myCode\实验4               #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\simp #
#                    lemac\" -I "F:\Project-related\STM32W108\myCode\实验4    #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\shar #
#                    ed\" -Ohz --use_c++_inline                               #
#    List file    =  F:\Project-related\STM32W108\myCode\实验4                #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_SUN\Lis #
#                    t\micro.lst                                              #
#    Object file  =  F:\Project-related\STM32W108\myCode\实验4                #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_SUN\Obj #
#                    \micro.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\Project-related\STM32W108\myCode\实验4 16点组网\工程源代码\hal\micro\cortexm3\micro.c
      1          /** @file micro.c
      2           * @brief STM32W108 micro specific minimal HAL functions
      3           *
      4           *
      5           * <!--(C) COPYRIGHT 2010 STMicroelectronics. All rights reserved.        -->
      6           */
      7          
      8          #include PLATFORM_HEADER
      9          #include "error.h"
     10          #include "hal/micro/micro-common.h"
     11          #include "hal/micro/cortexm3/micro-common.h"
     12          #include "micro/system-timer.h"
     13          #include "micro/adc.h"
     14          #include "micro/cortexm3/memmap.h"
     15          #include "micro/cortexm3/iap_bootloader.h"
     16          
     17          #include <stdlib.h>
     18          #include <string.h>
     19          
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void halInit(void)
     22          {
   \                     halInit:
   \   00000000   80B5               PUSH     {R7,LR}
     23            //Disable the REG_EN external regulator enable signal.  Out of reset this
     24            //signal overrides PA7.  By disabling it early, PA7 is reclaimed as a GPIO.
     25            //If an external regulator is required, the following line of code should
     26            //be deleted.
     27            GPIO_DBGCFG &= ~GPIO_EXTREGEN;
   \   00000002   ....               LDR.N    R0,??DataTable5  ;; 0x4000bc00
   \   00000004   0168               LDR      R1,[R0, #+0]
   \   00000006   21F01001           BIC      R1,R1,#0x10
   \   0000000A   0160               STR      R1,[R0, #+0]
     28            halInternalSetRegTrim(FALSE);
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   ........           BL       halInternalSetRegTrim
     29            halPowerUp();
   \   00000012   ........           BL       halPowerUp
     30            halInternalCalibrateFastRc();
   \   00000016   ........           BL       halInternalCalibrateFastRc
     31            
     32            #ifndef DISABLE_WATCHDOG
     33              halInternalEnableWatchDog();
     34            #endif
     35          
     36            halInternalStartSystemTimer();
   \   0000001A   BDE80140           POP      {R0,LR}
   \   0000001E   ........           B.W      halInternalStartSystemTimer
     37          }
     38          
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void halReboot(void)
     41          {
   \                     halReboot:
   \   00000000   80B5               PUSH     {R7,LR}
     42            INTERRUPTS_OFF();
   \   00000002   ........           BL       _disableBasePri
     43            
     44          
     45            //FCLK must be 6MHz to allow the SYSRESETREQ signal to cleanly
     46            //propagate and reset the chip.  Switch SYSCLK first since we need
     47            //the cycles used by switching FCLK to guarantee the SYSCLK is
     48            //stable and ready for SYSRESETREQ.
     49            OSC24M_CTRL = OSC24M_CTRL_RESET; //Guarantee SYSCLK is sourced from OSCHF
   \   00000006   ....               LDR.N    R0,??DataTable5_1  ;; 0x4000401c
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   0160               STR      R1,[R0, #+0]
     50            CPU_CLKSEL = CPU_CLKSEL_RESET;   //Guarantee FCLK is sourced from PCLK
   \   0000000C   4160               STR      R1,[R0, #+4]
     51            
     52            SCS_AIRCR = (0x05FA0000 | SCS_AIRCR_SYSRESETREQ); // trigger the reset
   \   0000000E   ....               LDR.N    R0,??DataTable5_2  ;; 0xe000ed0c
   \   00000010   ....               LDR.N    R1,??DataTable5_3  ;; 0x5fa0004
   \   00000012   0160               STR      R1,[R0, #+0]
     53            //NOTE: SYSRESETREQ is not the same as nRESET.  It will not do the debug
     54            //pieces: DWT, ITM, FPB, vector catch, etc
     55          }
   \   00000014   01BD               POP      {R0,PC}          ;; return
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void halPowerDown(void)
     58          {
     59          }
   \                     halPowerDown:
   \   00000000   7047               BX       LR               ;; return
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void halPowerUp(void)
     62          {
   \                     halPowerUp:
   \   00000000   80B5               PUSH     {R7,LR}
     63            halInternalInitAdc();
   \   00000002   ........           BL       halInternalInitAdc
     64            halCommonCalibratePads();  
   \   00000006   ........           BL       halCommonCalibratePads
     65            halInternalSwitchToXtal();
   \   0000000A   BDE80140           POP      {R0,LR}
   \   0000000E   ........           B.W      halInternalSwitchToXtal
     66          }
     67          

   \                                 In section .data, align 2
     68          static int16u seed0 = 0xbeef;
   \                     seed0:
   \   00000000   EFBE               DC16 48879
   \   00000002   CEFA               DC16 64206
     69          static int16u seed1 = 0xface;
     70          

   \                                 In section .text, align 2, keep-with-next
     71          void halCommonSeedRandom(int32u seed)
     72          {
     73            seed0 = (int16u) seed;
     74            if (seed0 == 0)
   \                     halCommonSeedRandom:
   \   00000000   81B2               UXTH     R1,R0
   \   00000002   09B9               CBNZ.N   R1,??halCommonSeedRandom_0
     75              seed0 = 0xbeef;
   \   00000004   4BF6EF61           MOVW     R1,#+48879
   \                     ??halCommonSeedRandom_0:
   \   00000008   ....               LDR.N    R2,??DataTable5_4
   \   0000000A   1180               STRH     R1,[R2, #+0]
     76            seed1 = (int16u) (seed >> 16);
   \   0000000C   000C               LSRS     R0,R0,#+16
     77            if (seed1 == 0)
   \   0000000E   08BF               IT       EQ 
   \   00000010   4FF6CE20           MOVWEQ   R0,#+64206
     78              seed1 = 0xface;
   \   00000014   5080               STRH     R0,[R2, #+2]
     79          }
   \   00000016   7047               BX       LR               ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          static int16u shift(int16u *val, int16u taps)
     82          {
     83            int16u newVal = *val;
   \                     shift:
   \   00000000   0288               LDRH     R2,[R0, #+0]
     84          
     85            if (newVal & 0x8000)
   \   00000002   1304               LSLS     R3,R2,#+16
   \   00000004   48BF               IT       MI 
   \   00000006   4A40               EORMI    R2,R1,R2
     86              newVal ^= taps;
     87            *val = newVal << 1;
   \   00000008   5100               LSLS     R1,R2,#+1
   \   0000000A   0180               STRH     R1,[R0, #+0]
     88            return newVal;
   \   0000000C   1046               MOV      R0,R2
   \   0000000E   7047               BX       LR               ;; return
     89          }
     90          

   \                                 In section .text, align 2, keep-with-next
     91          int16u halCommonGetRandom(void)
     92          {
   \                     halCommonGetRandom:
   \   00000000   38B5               PUSH     {R3-R5,LR}
     93            return (shift(&seed0, 0x0062)
     94                    ^ shift(&seed1, 0x100B));
   \   00000002   ....               LDR.N    R4,??DataTable5_4
   \   00000004   6221               MOVS     R1,#+98
   \   00000006   2046               MOV      R0,R4
   \   00000008   ........           BL       shift
   \   0000000C   0546               MOV      R5,R0
   \   0000000E   41F20B01           MOVW     R1,#+4107
   \   00000012   A01C               ADDS     R0,R4,#+2
   \   00000014   ........           BL       shift
   \   00000018   6840               EORS     R0,R0,R5
   \   0000001A   32BD               POP      {R1,R4,R5,PC}    ;; return
     95          }
     96          

   \                                 In section .text, align 2, keep-with-next
     97          void halCommonMemCopy(void *dest, const void *source, int8u bytes)
     98          {
     99            memcpy(dest, source, bytes);
   \                     halCommonMemCopy:
   \   00000000   ........           B.W      __aeabi_memcpy
    100          }
    101          

   \                                 In section .text, align 2, keep-with-next
    102          int8s halCommonMemCompare(const void *source0, const void *source1, int8u bytes)
    103          {
   \                     halCommonMemCompare:
   \   00000000   80B5               PUSH     {R7,LR}
    104            return memcmp(source0, source1, bytes);
   \   00000002   ........           BL       memcmp
   \   00000006   40B2               SXTB     R0,R0
   \   00000008   02BD               POP      {R1,PC}          ;; return
    105          }
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void halCommonMemSet(void *dest, int8u val, int16u bytes)
    108          {
   \                     halCommonMemSet:
   \   00000000   1346               MOV      R3,R2
    109            memset(dest, val, bytes);
   \   00000002   0A46               MOV      R2,R1
   \   00000004   1946               MOV      R1,R3
   \   00000006   ........           B.W      __aeabi_memset
    110          }
    111          
    112          #pragma pack(1)
    113          typedef struct appSwitchStruct {
    114            int32u signature;
    115            int8u mode;
    116            int8u channel;
    117            union {
    118              int16u panID;
    119              int16u offset;
    120            } param;
    121          } appSwitchStructType;
    122          #pragma pack()
    123          static appSwitchStructType *appSwitch = (appSwitchStructType *) RAM_BOTTOM;
    124          /* Magic number for System bootloader activation, please don't touch */

   \                                 In section .text, align 4, keep-with-next
    125          static const int16u blOffset[] = {
   \                     blOffset:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   0003D803           DC16 768, 984
    126            0x0715 - 0x03ad - 0x68,
    127            0x0719 - 0x03ad + 0x6C
    128          };
    129          

   \                                 In section .text, align 2, keep-with-next
    130          StStatus halBootloaderStart(int8u mode, int8u channel, int16u panID)
    131          {
   \                     halBootloaderStart:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    132            if ((SCS_VTOR == IAP_BOOTLOADER_APPLICATION_ADDRESS) && (mode <= IAP_BOOTLOADER_MODE_OTA)) {
   \   00000002   ....               LDR.N    R3,??DataTable5_5  ;; 0xe000ed08
   \   00000004   1B68               LDR      R3,[R3, #+0]
   \   00000006   ....               LDR.N    R4,??DataTable5_6  ;; 0x8003000
   \   00000008   A342               CMP      R3,R4
   \   0000000A   2ED1               BNE.N    ??halBootloaderStart_0
   \   0000000C   0228               CMP      R0,#+2
   \   0000000E   2CD2               BCS.N    ??halBootloaderStart_0
    133              if (mode ==  IAP_BOOTLOADER_MODE_UART) {
   \   00000010   4FF00053           MOV      R3,#+536870912
   \   00000014   D8B9               CBNZ.N   R0,??halBootloaderStart_1
    134                int8u cut = *(volatile int8u *) 0x08040798;
   \   00000016   ....               LDR.N    R1,??DataTable5_7  ;; 0x8040798
   \   00000018   0978               LDRB     R1,[R1, #+0]
    135                if ( (halFixedAddressTable.baseTable.type == FIXED_ADDRESS_TABLE_TYPE) &&
    136                     ( ( (halFixedAddressTable.baseTable.version & FAT_MAJOR_VERSION_MASK) 
    137                         == 0x0000 ) &&
    138                       (halFixedAddressTable.baseTable.version == 0x0003) 
    139          	     ) && (cut >= 2) && (cut <=3 )
    140          	   ) {
   \   0000001A   ....               LDR.N    R2,??DataTable5_8
   \   0000001C   148A               LDRH     R4,[R2, #+16]
   \   0000001E   40F6A775           MOVW     R5,#+4007
   \   00000022   AC42               CMP      R4,R5
   \   00000024   11D1               BNE.N    ??halBootloaderStart_2
   \   00000026   528A               LDRH     R2,[R2, #+18]
   \   00000028   4FF47F44           MOV      R4,#+65280
   \   0000002C   2242               TST      R2,R4
   \   0000002E   0CD1               BNE.N    ??halBootloaderStart_2
   \   00000030   032A               CMP      R2,#+3
   \   00000032   0AD1               BNE.N    ??halBootloaderStart_2
   \   00000034   8A1E               SUBS     R2,R1,#+2
   \   00000036   022A               CMP      R2,#+2
   \   00000038   07D2               BCS.N    ??halBootloaderStart_2
    141                  appSwitch->param.offset = blOffset[cut - 2];
   \   0000003A   ........           ADR.W    R2,blOffset
   \   0000003E   02EB4101           ADD      R1,R2,R1, LSL #+1
   \   00000042   31F8041C           LDRH     R1,[R1, #-4]
   \   00000046   D980               STRH     R1,[R3, #+6]
   \   00000048   09E0               B.N      ??halBootloaderStart_3
    142                } else {
    143          	/* Cut not supported */
    144          	return ST_ERR_FATAL;
   \                     ??halBootloaderStart_2:
   \   0000004A   0120               MOVS     R0,#+1
   \   0000004C   32BD               POP      {R1,R4,R5,PC}
    145                }
    146              } else {
    147                appSwitch->channel = ((channel >= 11) && (channel <= 26)) ? channel :IAP_BOOTLOADER_DEFAULT_CHANNEL ;
   \                     ??halBootloaderStart_1:
   \   0000004E   A1F10B04           SUB      R4,R1,#+11
   \   00000052   E4B2               UXTB     R4,R4
   \   00000054   102C               CMP      R4,#+16
   \   00000056   28BF               IT       CS 
   \   00000058   0F21               MOVCS    R1,#+15
   \   0000005A   5971               STRB     R1,[R3, #+5]
    148                appSwitch->param.panID = panID;
   \   0000005C   DA80               STRH     R2,[R3, #+6]
    149              }
    150              appSwitch->signature = IAP_BOOTLOADER_APP_SWITCH_SIGNATURE;
   \                     ??halBootloaderStart_3:
   \   0000005E   ....               LDR.N    R1,??DataTable5_9  ;; 0xb001204d
   \   00000060   1960               STR      R1,[R3, #+0]
    151              appSwitch->mode = mode;
   \   00000062   1871               STRB     R0,[R3, #+4]
    152              halReboot();
   \   00000064   ........           BL       halReboot
   \   00000068   EFE7               B.N      ??halBootloaderStart_2
    153            }
    154            
    155            return (mode <= IAP_BOOTLOADER_MODE_OTA) ? ST_ERR_FATAL: ST_BAD_ARGUMENT;
   \                     ??halBootloaderStart_0:
   \   0000006A   0228               CMP      R0,#+2
   \   0000006C   EDD3               BCC.N    ??halBootloaderStart_2
   \   0000006E   0220               MOVS     R0,#+2
   \   00000070   32BD               POP      {R1,R4,R5,PC}    ;; return
    156          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   00BC0040           DC32     0x4000bc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   1C400040           DC32     0x4000401c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0CED00E0           DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0400FA05           DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   ........           DC32     seed0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   08ED00E0           DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   00300008           DC32     0x8003000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   98070408           DC32     0x8040798

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   ........           DC32     halFixedAddressTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   4D2001B0           DC32     0xb001204d

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     halBootloaderStart      16
     halCommonGetRandom      16
     halCommonMemCompare      8
     halCommonMemCopy         4
     halCommonMemSet          4
     halCommonSeedRandom      0
     halInit                  8
     halPowerDown             0
     halPowerUp               8
     halReboot                8
     shift                    0


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     halInit               34
     halReboot             22
     halPowerDown           2
     halPowerUp            18
     seed0                  4
     seed1
     halCommonSeedRandom   24
     shift                 16
     halCommonGetRandom    28
     halCommonMemCopy       4
     halCommonMemCompare   10
     halCommonMemSet       10
     blOffset               4
     halBootloaderStart   114
     ??DataTable5           4
     ??DataTable5_1         4
     ??DataTable5_2         4
     ??DataTable5_3         4
     ??DataTable5_4         4
     ??DataTable5_5         4
     ??DataTable5_6         4
     ??DataTable5_7         4
     ??DataTable5_8         4
     ??DataTable5_9         4

 
   4 bytes in section .data
 326 bytes in section .text
 
 326 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
