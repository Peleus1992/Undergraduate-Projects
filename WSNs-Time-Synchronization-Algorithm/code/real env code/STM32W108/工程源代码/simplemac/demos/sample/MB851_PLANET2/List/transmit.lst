###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     05/Jul/2014  18:42:01 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac #
#                    \demos\sample\transmit.c                                 #
#    Command line =  "I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplema #
#                    c\demos\sample\transmit.c" -D BOARD_MB851 -D             #
#                    "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\""  #
#                    -D "BOARD_HEADER=\"hal/micro/cortexm3/stm32w108/board.h\ #
#                    "" -D CORTEXM3 -D CORTEXM3_STM32W108 -D PHY_STM32W108XX  #
#                    -D DISABLE_WATCHDOG -D PLANET_ROLE -D BOARD_MB851 -D     #
#                    "__SOURCEFILE__=\"transmit.c\"" -lC "I:\ÊµÑé4            #
#                    ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac\demos\sa #
#                    mple\MB851_PLANET2\List\" --diag_suppress Pa050 -o       #
#                    "I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplema #
#                    c\demos\sample\MB851_PLANET2\Obj\" --debug               #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "D:\study soft\IAR6.10\IARsoft\arm\INC\c\D #
#                    Lib_Config_Normal.h" -I "I:\ÊµÑé4                        #
#                    ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac\demos\sa #
#                    mple\" -I "I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂ #
#                    ë\simplemac\demos\sample\..\..\..\simplemac\include\"    #
#                    -I "I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simpl #
#                    emac\demos\sample\..\..\..\" -I "I:\ÊµÑé4                #
#                    ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac\demos\sa #
#                    mple\..\..\..\hal\" -I "I:\ÊµÑé4                         #
#                    ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac\demos\sa #
#                    mple\..\..\..\HAL\MICRO\CORTEXM3\STM32W108\" -I          #
#                    "I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplema #
#                    c\demos\sample\..\..\..\simplemac\" -I "I:\ÊµÑé4         #
#                    ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac\demos\sa #
#                    mple\..\..\..\shared\" -Ohz --use_c++_inline             #
#    List file    =  I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac #
#                    \demos\sample\MB851_PLANET2\List\transmit.lst            #
#    Object file  =  I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac #
#                    \demos\sample\MB851_PLANET2\Obj\transmit.o               #
#                                                                             #
#                                                                             #
###############################################################################

I:\ÊµÑé4 ÎÞÏß´«¸ÐÆ÷½Úµã¶àµãÍ¨ÐÅÊµÑé\¹¤³ÌÔ´´úÂë\simplemac\demos\sample\transmit.c
      1          /*******************************************************************************
      2          * SimpleMAC sample application: transmit.c
      3          *
      4          * transmit.c handles packet transmission for the SimpleMAC sample application.
      5          *
      6          * COPYRIGHT 2010 STMicroelectronics. All rights reserved. 
      7          *******************************************************************************/
      8          
      9          #include PLATFORM_HEADER
     10          #include <stdio.h>
     11          #include <stdlib.h>
     12          #include <string.h>
     13          #include "error.h"
     14          #include "hal/hal.h"
     15          #include "include/phy-library.h"
     16          
     17          #include "transmit.h"
     18          
     19          //NOTE: The packet itself (and therefore TransmitCompleteIsrCallback) knows
     20          //      if the packet needs an ACK and if the packet should be retransmitted.
     21          //-inUse says a tx slot has a valid packet and the slot cannot be reused
     22          //-sendNow tells the tick to send the packet now
     23          //-dsShortAddr is the short address the packet is being sent to
     24          //-packet is the actual data buffer being transmitted
     25          //-sfdPtr says where SfdSentIsrCallback should write the SFD
     26          typedef struct {
     27            boolean inUse;
     28            boolean sendNow;
     29            u16 dstShortAddr;
     30            u8 packet[128];
     31            u8 * sfdPtr;
     32          } TxQueueType;
     33          u8 txDirectQHead=0;
     34          u8 txDirectQTail=0;

   \                                 In section .bss, align 4
     35          TxQueueType txDirectQ[TX_DIRECT_QUEUE_SIZE]={0,};
   \                     txDirectQ:
   \   00000000                      DS8 680
     36          //The indirect transmit queue is exactly size 1.  This application can
     37          //only hold a single indirect packet regardless of the number of planets.

   \                                 In section .bss, align 4
     38          TxQueueType txIndirectQ={0,};
   \                     txIndirectQ:
   \   00000000                      DS8 136

   \                                 In section .data, align 4
   \                     txDirectQHead:
   \   00000000   00                 DC8 0
   \                     txDirectQTail:
   \   00000001   00                 DC8 0
     39          
     40          //These variables are for the packet currently being transmitted.
     41          boolean * txPacketInUse; //points to the relevant variable in the Q
     42          u8   * txPacket;      //points to the relevant variable in the Q
     43          u8   * txPacketSfd;   //points to the relevant variable in the Q
     44          u8     txPacketAttemptsLeft=TX_ATTEMPTS_COUNT;
   \                     txPacketAttemptsLeft:
   \   00000002   04                 DC8 4
     45          boolean   txPacketInFlight=FALSE;
   \                     txPacketInFlight:
   \   00000003   00                 DC8 0
     46          boolean   txPacketIsDirect=TRUE;
   \                     txPacketIsDirect:
   \   00000004   01                 DC8 1
     47          u32    txPacketDroppedNotifcation=0;
     48          boolean   framePendingPktEnroute=FALSE;
   \                     framePendingPktEnroute:
   \   00000005   00                 DC8 0
     49          u16    framePendingMsTick;
   \                     framePendingMsTick:
   \   00000006   0000               DC8 0, 0
   \                     txPacketInUse:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     txPacket:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     txPacketSfd:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     txPacketDroppedNotifcation:
   \   00000014   00000000           DC32 0
     50          
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void clearDirectQueue(void)
     53          {
     54            u8 i;
     55            
     56            if(txPacketInFlight && txPacketIsDirect) {
   \                     clearDirectQueue:
   \   00000000   ....               LDR.N    R0,??DataTable22
   \   00000002   C178               LDRB     R1,[R0, #+3]
   \   00000004   0029               CMP      R1,#+0
   \   00000006   06D0               BEQ.N    ??clearDirectQueue_0
   \   00000008   0179               LDRB     R1,[R0, #+4]
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   03D0               BEQ.N    ??clearDirectQueue_0
     57              printf("Direct transmission in progess.  txDirectQ NOT cleared.\r\n");
   \   0000000E   ........           ADR.W    R0,`?<Constant "Direct transmission i...">`
   \   00000012   ........           B.W      printf
     58              return;
     59            }
     60            
     61            txPacketAttemptsLeft=0;
   \                     ??clearDirectQueue_0:
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   8170               STRB     R1,[R0, #+2]
     62            for(i=0;i<TX_DIRECT_QUEUE_SIZE;i++) {
   \   0000001A   ....               LDR.N    R1,??DataTable22_1
     63              txDirectQ[i].inUse=FALSE;
   \   0000001C   0022               MOVS     R2,#+0
   \   0000001E   0A70               STRB     R2,[R1, #+0]
   \   00000020   81F88820           STRB     R2,[R1, #+136]
   \   00000024   81F81021           STRB     R2,[R1, #+272]
   \   00000028   81F89821           STRB     R2,[R1, #+408]
   \   0000002C   81F82022           STRB     R2,[R1, #+544]
     64            }
     65            txDirectQHead=0;
   \   00000030   0270               STRB     R2,[R0, #+0]
     66            txDirectQTail=0;
   \   00000032   4270               STRB     R2,[R0, #+1]
     67          }
   \   00000034   7047               BX       LR               ;; return
     68          
     69          

   \                                 In section .text, align 2, keep-with-next
     70          void clearIndirectQueue(void)
     71          {
     72            if(txPacketInFlight && !txPacketIsDirect) {
   \                     clearIndirectQueue:
   \   00000000   ....               LDR.N    R0,??DataTable22
   \   00000002   C178               LDRB     R1,[R0, #+3]
   \   00000004   0029               CMP      R1,#+0
   \   00000006   06D0               BEQ.N    ??clearIndirectQueue_0
   \   00000008   0179               LDRB     R1,[R0, #+4]
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   03D1               BNE.N    ??clearIndirectQueue_0
     73              printf("Indirect transmission in progess.  txIndirectQ NOT cleared.\r\n");
   \   0000000E   ........           ADR.W    R0,`?<Constant "Indirect transmission...">`
   \   00000012   ........           B.W      printf
     74              return;
     75            }
     76            
     77            txPacketAttemptsLeft=0;
   \                     ??clearIndirectQueue_0:
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   8170               STRB     R1,[R0, #+2]
     78            txIndirectQ.inUse=FALSE;
   \   0000001A   ....               LDR.N    R0,??DataTable22_2
   \   0000001C   0170               STRB     R1,[R0, #+0]
     79          }
   \   0000001E   7047               BX       LR               ;; return
     80          
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void packetIsDone(void)
     83          {
     84            *txPacketInUse=FALSE;
   \                     packetIsDone:
   \   00000000   ....               LDR.N    R0,??DataTable22
   \   00000002   8168               LDR      R1,[R0, #+8]
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   0A70               STRB     R2,[R1, #+0]
     85            txPacketInFlight=FALSE;
   \   00000008   C270               STRB     R2,[R0, #+3]
     86          }
   \   0000000A   7047               BX       LR               ;; return
     87          

   \                                 In section .text, align 2, keep-with-next
     88          void advanceHead(void)
     89          {
     90            txDirectQHead++;
   \                     advanceHead:
   \   00000000   ....               LDR.N    R0,??DataTable22
   \   00000002   0178               LDRB     R1,[R0, #+0]
   \   00000004   491C               ADDS     R1,R1,#+1
     91            if(txDirectQHead>=TX_DIRECT_QUEUE_SIZE) {
   \   00000006   C9B2               UXTB     R1,R1
   \   00000008   0529               CMP      R1,#+5
   \   0000000A   28BF               IT       CS 
   \   0000000C   0021               MOVCS    R1,#+0
     92              txDirectQHead=0;
   \   0000000E   0170               STRB     R1,[R0, #+0]
     93            }
     94          }
   \   00000010   7047               BX       LR               ;; return
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void advanceTail(void)
     97          {
     98            if(txPacketIsDirect) {
   \                     advanceTail:
   \   00000000   ....               LDR.N    R0,??DataTable22
   \   00000002   4178               LDRB     R1,[R0, #+1]
   \   00000004   0279               LDRB     R2,[R0, #+4]
   \   00000006   22B1               CBZ.N    R2,??advanceTail_0
     99              txDirectQTail++;
   \   00000008   491C               ADDS     R1,R1,#+1
    100              if(txDirectQTail>=TX_DIRECT_QUEUE_SIZE) {
   \   0000000A   C9B2               UXTB     R1,R1
   \   0000000C   0529               CMP      R1,#+5
   \   0000000E   28BF               IT       CS 
   \   00000010   0021               MOVCS    R1,#+0
    101                txDirectQTail=0; 
   \                     ??advanceTail_0:
   \   00000012   4170               STRB     R1,[R0, #+1]
    102              }
    103            }
    104          }
   \   00000014   7047               BX       LR               ;; return
    105          
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void indirectTxTick(void)
    108          {
    109            StStatus status = ST_SUCCESS;
    110          
    111            //Send next available packet if there already isn't a packet in flight.
    112            if(txIndirectQ.inUse && txIndirectQ.sendNow && txPacketInFlight==FALSE) {
   \                     indirectTxTick:
   \   00000000   ....               LDR.N    R0,??DataTable22_2
   \   00000002   0178               LDRB     R1,[R0, #+0]
   \   00000004   01B9               CBNZ.N   R1,??indirectTxTick_0
   \   00000006   7047               BX       LR
   \                     ??indirectTxTick_0:
   \   00000008   10B5               PUSH     {R4,LR}
   \   0000000A   4178               LDRB     R1,[R0, #+1]
   \   0000000C   C1B1               CBZ.N    R1,??indirectTxTick_1
   \   0000000E   ....               LDR.N    R4,??DataTable22
   \   00000010   E178               LDRB     R1,[R4, #+3]
   \   00000012   A9B9               CBNZ.N   R1,??indirectTxTick_1
    113              //Linkup our current transmission to the Q.
    114              txPacketInUse = &txIndirectQ.inUse;
   \   00000014   ........           BL       ?Subroutine3
    115              txPacket = txIndirectQ.packet;
    116              txPacketSfd = txIndirectQ.sfdPtr;
    117              txPacketIsDirect = FALSE;
   \                     ??CrossCallReturnLabel_4:
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   2171               STRB     R1,[R4, #+4]
    118              txPacketInFlight = TRUE;
   \   0000001C   0121               MOVS     R1,#+1
   \   0000001E   E170               STRB     R1,[R4, #+3]
    119              txPacketAttemptsLeft = TX_ATTEMPTS_COUNT;
   \   00000020   0421               MOVS     R1,#+4
   \   00000022   A170               STRB     R1,[R4, #+2]
    120              //Now send the packet!
    121              if(txPacketSfd != NULL) {
   \   00000024   08B1               CBZ.N    R0,??CrossCallReturnLabel_9
    122                //Since we're going to inject the TX SFD into the packet, we have to
    123                //enable the SfdSentIsrCallback.  The SfdSentIsrCallback will then
    124                //disable itself when it is done injecting the SFD.
    125                ST_RadioEnableSfdSentNotification(TRUE);
   \   00000026   ........           BL       ?Subroutine4
    126              }
    127              status = ST_RadioTransmit(txPacket);
    128              assert(status==ST_SUCCESS);
   \                     ??CrossCallReturnLabel_9:
   \   0000002A   ........           BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   0000002E   20B1               CBZ.N    R0,??indirectTxTick_2
   \   00000030   8022               MOVS     R2,#+128
   \   00000032   ........           BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_3:
   \   00000036   ........           BL       __iar_EmptyStepPoint
    129              txPacketAttemptsLeft--;
   \                     ??indirectTxTick_2:
   \   0000003A   A078               LDRB     R0,[R4, #+2]
   \   0000003C   401E               SUBS     R0,R0,#+1
   \   0000003E   A070               STRB     R0,[R4, #+2]
    130            }
    131          }
   \                     ??indirectTxTick_1:
   \   00000040   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   E068               LDR      R0,[R4, #+12]
   \   00000002   ........           B.W      ST_RadioTransmit

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0120               MOVS     R0,#+1
   \   00000002   ........           B.W      ST_RadioEnableSfdSentNotification

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   A060               STR      R0,[R4, #+8]
   \   00000002   011D               ADDS     R1,R0,#+4
   \   00000004   E160               STR      R1,[R4, #+12]
   \   00000006   D0F88400           LDR      R0,[R0, #+132]
   \   0000000A   2061               STR      R0,[R4, #+16]
   \   0000000C   7047               BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ........           ADR.W    R1,`?<Constant "I:\\\\\\312\\265\\321\\3514 \\316\\336\\317`
   \   00000004   ........           ADR.W    R0,`?<Constant "status==ST_SUCCESS">`
   \   00000008   ........           B.W      __aeabi_assert
    132          
    133          

   \                                 In section .text, align 2, keep-with-next
    134          void directTxTick(void)
    135          {
   \                     directTxTick:
   \   00000000   10B5               PUSH     {R4,LR}
    136            StStatus status = ST_SUCCESS;
    137            //Send next available packet if there already isn't a packet in flight.
    138            if(txDirectQ[txDirectQTail].inUse==TRUE && txPacketInFlight==FALSE) {
   \   00000002   ....               LDR.N    R4,??DataTable22
   \   00000004   6078               LDRB     R0,[R4, #+1]
   \   00000006   8821               MOVS     R1,#+136
   \   00000008   4843               MULS     R0,R1,R0
   \   0000000A   ....               LDR.N    R1,??DataTable22_1
   \   0000000C   425C               LDRB     R2,[R0, R1]
   \   0000000E   012A               CMP      R2,#+1
   \   00000010   17D1               BNE.N    ??directTxTick_0
   \   00000012   E278               LDRB     R2,[R4, #+3]
   \   00000014   AAB9               CBNZ.N   R2,??directTxTick_0
    139              //Linkup our current transmission to the Q.
    140              txPacketInUse = &txDirectQ[txDirectQTail].inUse;
   \   00000016   4018               ADDS     R0,R0,R1
   \   00000018   ........           BL       ?Subroutine3
    141              txPacket = txDirectQ[txDirectQTail].packet;
    142              txPacketSfd = txDirectQ[txDirectQTail].sfdPtr;
    143              txPacketIsDirect = TRUE;
   \                     ??CrossCallReturnLabel_5:
   \   0000001C   0121               MOVS     R1,#+1
   \   0000001E   2171               STRB     R1,[R4, #+4]
    144              txPacketInFlight = TRUE;
   \   00000020   E170               STRB     R1,[R4, #+3]
    145              txPacketAttemptsLeft = TX_ATTEMPTS_COUNT;
   \   00000022   0421               MOVS     R1,#+4
   \   00000024   A170               STRB     R1,[R4, #+2]
    146              //Now send the packet!
    147              if(txPacketSfd != NULL) {
   \   00000026   08B1               CBZ.N    R0,??CrossCallReturnLabel_8
    148                //Since we're going to inject the TX SFD into the packet, we have to
    149                //enable the SfdSentIsrCallback.  The SfdSentIsrCallback will then
    150                //disable itself when it is done injecting the SFD.
    151                ST_RadioEnableSfdSentNotification(TRUE);
   \   00000028   ........           BL       ?Subroutine4
    152              }
    153              status = ST_RadioTransmit(txPacket);
    154              assert(status==ST_SUCCESS);
   \                     ??CrossCallReturnLabel_8:
   \   0000002C   ........           BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   00000030   20B1               CBZ.N    R0,??directTxTick_1
   \   00000032   9A22               MOVS     R2,#+154
   \   00000034   ........           BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_2:
   \   00000038   ........           BL       __iar_EmptyStepPoint
    155              txPacketAttemptsLeft--;
   \                     ??directTxTick_1:
   \   0000003C   A078               LDRB     R0,[R4, #+2]
   \   0000003E   401E               SUBS     R0,R0,#+1
   \   00000040   A070               STRB     R0,[R4, #+2]
    156            }
    157          }
   \                     ??directTxTick_0:
   \   00000042   10BD               POP      {R4,PC}          ;; return
    158          
    159          

   \                                 In section .text, align 2, keep-with-next
    160          void txTick(void)
    161          {
   \                     txTick:
   \   00000000   10B5               PUSH     {R4,LR}
    162            indirectTxTick();
   \   00000002   ........           BL       indirectTxTick
    163            directTxTick();
   \   00000006   ........           BL       directTxTick
    164            if(txPacketDroppedNotifcation) {
   \   0000000A   ....               LDR.N    R4,??DataTable22
   \   0000000C   6069               LDR      R0,[R4, #+20]
   \   0000000E   30B1               CBZ.N    R0,??txTick_0
    165              printf("Failed all transmit attempts.  Dropping the packet.\r\n");
   \   00000010   ........           ADR.W    R0,`?<Constant "Failed all transmit a...">`
   \   00000014   ........           BL       printf
    166              txPacketDroppedNotifcation--;
   \   00000018   6069               LDR      R0,[R4, #+20]
   \   0000001A   401E               SUBS     R0,R0,#+1
   \   0000001C   6061               STR      R0,[R4, #+20]
    167            }
    168          }
   \                     ??txTick_0:
   \   0000001E   10BD               POP      {R4,PC}          ;; return
    169          
    170          

   \                                 In section .text, align 2, keep-with-next
    171          void transmitIndirectPacketNow(void)
    172          {
    173            txIndirectQ.sendNow=TRUE;
   \                     transmitIndirectPacketNow:
   \   00000000   ....               LDR.N    R0,??DataTable22_2
   \   00000002   0121               MOVS     R1,#+1
   \   00000004   4170               STRB     R1,[R0, #+1]
    174            indirectTxTick();
   \   00000006   ....               B.N      indirectTxTick
    175          }
    176          
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void directTransmit(u16 dstShortAddr, u8 * packet, u8 sfdPtrOffset)
    179          {
   \                     directTransmit:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   1446               MOV      R4,R2
    180            TxQueueType * headPkt;
    181            
    182            headPkt = &txDirectQ[txDirectQHead];
   \   00000004   ....               LDR.N    R2,??DataTable22
   \   00000006   1278               LDRB     R2,[R2, #+0]
   \   00000008   8823               MOVS     R3,#+136
   \   0000000A   ....               LDR.N    R5,??DataTable22_1
   \   0000000C   03FB0255           MLA      R5,R3,R2,R5
    183            if(headPkt->inUse) {
   \   00000010   2A78               LDRB     R2,[R5, #+0]
   \   00000012   12B1               CBZ.N    R2,??directTransmit_0
    184              printf("txDirectQ is full!  Dropping new TX packet.\r\n");
   \   00000014   ........           ADR.W    R0,`?<Constant "txDirectQ is full!  D...">`
   \   00000018   ....               B.N      ?Subroutine0
    185              return;
    186            }
    187            
    188            //Place new packet into the Q
    189            headPkt->sendNow=TRUE;
   \                     ??directTransmit_0:
   \   0000001A   0122               MOVS     R2,#+1
   \   0000001C   ........           BL       ?Subroutine1
    190            headPkt->dstShortAddr=dstShortAddr;
    191            memcpy(headPkt->packet, packet, packet[0]+1);
    192            if(sfdPtrOffset > 0) {
   \                     ??CrossCallReturnLabel_1:
   \   00000020   002C               CMP      R4,#+0
   \   00000022   1ABF               ITTE     NE 
   \   00000024   6019               ADDNE    R0,R4,R5
   \   00000026   001D               ADDNE    R0,R0,#+4
   \   00000028   0020               MOVEQ    R0,#+0
    193              headPkt->sfdPtr=headPkt->packet+sfdPtrOffset;
    194            } else {
    195              headPkt->sfdPtr=NULL;
   \   0000002A   C5F88400           STR      R0,[R5, #+132]
    196            }
    197            
    198            //Mark the new packet ready to be sent.
    199            headPkt->inUse=TRUE;
   \   0000002E   0120               MOVS     R0,#+1
   \   00000030   2870               STRB     R0,[R5, #+0]
    200            
    201            //Make room for another packet in the Q.
    202            advanceHead();
   \   00000032   BDE83140           POP      {R0,R4,R5,LR}
   \   00000036   ....               B.N      advanceHead
    203          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   6A70               STRB     R2,[R5, #+1]
   \   00000002   6880               STRH     R0,[R5, #+2]
   \   00000004   0878               LDRB     R0,[R1, #+0]
   \   00000006   421C               ADDS     R2,R0,#+1
   \   00000008   281D               ADDS     R0,R5,#+4
   \   0000000A   ........           B.W      __aeabi_memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   BDE83240           POP      {R1,R4,R5,LR}
   \   00000004   ........           B.W      printf
    204          
    205          

   \                                 In section .text, align 2, keep-with-next
    206          void indirectTransmit(u16 dstShortAddr, u8 * packet, u8 sfdPtrOffset)
    207          {
   \                     indirectTransmit:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   1446               MOV      R4,R2
    208            if(txIndirectQ.inUse) {
   \   00000004   ....               LDR.N    R5,??DataTable22_2
   \   00000006   2A78               LDRB     R2,[R5, #+0]
   \   00000008   12B1               CBZ.N    R2,??indirectTransmit_0
    209              printf("txIndirectQ is full!  Dropping new TX packet.\r\n");
   \   0000000A   ........           ADR.W    R0,`?<Constant "txIndirectQ is full! ...">`
   \   0000000E   ....               B.N      ?Subroutine0
    210              return;
    211            }
    212            
    213            //Place new packet into the Q
    214            txIndirectQ.sendNow=FALSE;
   \                     ??indirectTransmit_0:
   \   00000010   ........           BL       ?Subroutine1
    215            txIndirectQ.dstShortAddr=dstShortAddr;
    216            memcpy(txIndirectQ.packet, packet, packet[0]+1);
    217            if(sfdPtrOffset > 0) {
   \                     ??CrossCallReturnLabel_0:
   \   00000014   002C               CMP      R4,#+0
   \   00000016   02D0               BEQ.N    ??indirectTransmit_1
    218              txIndirectQ.sfdPtr=txIndirectQ.packet+sfdPtrOffset;
   \   00000018   6019               ADDS     R0,R4,R5
   \   0000001A   001D               ADDS     R0,R0,#+4
   \   0000001C   00E0               B.N      ??indirectTransmit_2
    219            } else {
    220              txIndirectQ.sfdPtr=NULL;
   \                     ??indirectTransmit_1:
   \   0000001E   0020               MOVS     R0,#+0
   \                     ??indirectTransmit_2:
   \   00000020   C5F88400           STR      R0,[R5, #+132]
    221            }
    222            
    223            //Mark the new packet ready to be sent.
    224            txIndirectQ.inUse=TRUE;
   \   00000024   0120               MOVS     R0,#+1
   \   00000026   2870               STRB     R0,[R5, #+0]
    225          }
   \   00000028   31BD               POP      {R0,R4,R5,PC}    ;; return
    226          
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void enqueueTxPacket(boolean direct,
    229                               u16 dstShortAddr,
    230                               u8 * packet,
    231                               u8 sfdPtrOffset)
    232          {
   \                     enqueueTxPacket:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0C46               MOV      R4,R1
   \   00000004   1146               MOV      R1,R2
   \   00000006   1A46               MOV      R2,R3
    233            if(direct) {
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   2046               MOV      R0,R4
   \   0000000C   02D0               BEQ.N    ??enqueueTxPacket_0
    234              directTransmit(dstShortAddr, packet, sfdPtrOffset);
   \   0000000E   ........           BL       directTransmit
   \   00000012   01E0               B.N      ??enqueueTxPacket_1
    235            } else {
    236              indirectTransmit(dstShortAddr, packet, sfdPtrOffset);
   \                     ??enqueueTxPacket_0:
   \   00000014   ........           BL       indirectTransmit
    237            }
    238            
    239            txTick();
   \                     ??enqueueTxPacket_1:
   \   00000018   BDE81040           POP      {R4,LR}
   \   0000001C   ....               B.N      txTick
    240          }
    241          
    242          

   \                                 In section .text, align 2, keep-with-next
    243          void ST_RadioTransmitCompleteIsrCallback(StStatus status,
    244                                                     u32 sfdSentTime,
    245                                                     boolean framePending)
    246          {
   \                     ST_RadioTransmitCompleteIsrCallback:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0146               MOV      R1,R0
   \   00000006   1546               MOV      R5,R2
    247            StStatus status_code = ST_SUCCESS;
    248            TX_DETAILS(printf("ST_RadioTransmitCompleteIsrCallback\r\n");)
    249            TX_DETAILS(printf("sfdSentTime = 0x%05X\r\n", sfdSentTime);)
    250            TX_DETAILS(printf("framePending = %d\r\n", framePending);)
    251            TX_DETAILS(printf("status = 0x%02X - ", status);)
    252            
    253            switch(status) {
   \   00000008   ....               LDR.N    R4,??DataTable22
   \   0000000A   A268               LDR      R2,[R4, #+8]
   \   0000000C   2369               LDR      R3,[R4, #+16]
   \   0000000E   A678               LDRB     R6,[R4, #+2]
   \   00000010   ........           ADR.W    R7,`?<Constant "status_code==ST_SUCCESS">`
   \   00000014   ........           ADR.W    R0,`?<Constant "FALSE">`
   \   00000018   ........           ADR.W    R8,`?<Constant "I:\\\\\\312\\265\\321\\3514 \\316\\336\\317`
   \   0000001C   51B1               CBZ.N    R1,??ST_RadioTransmitCompleteIsrCallback_0
   \   0000001E   4029               CMP      R1,#+64
   \   00000020   15D0               BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_1
   \   00000022   8829               CMP      R1,#+136
   \   00000024   36D0               BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_2
   \   00000026   8929               CMP      R1,#+137
   \   00000028   37D0               BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_3
   \   0000002A   8D29               CMP      R1,#+141
   \   0000002C   26D0               BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_4
   \   0000002E   8F29               CMP      R1,#+143
   \   00000030   03D0               BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_5
   \   00000032   35E0               B.N      ??ST_RadioTransmitCompleteIsrCallback_6
    254              case ST_SUCCESS:
    255                TX_DETAILS(printf("ST_SUCCESS\r\n");)
    256                //The inFlight packet required no ACK and was successfully sent,
    257                //therefore I am done with this packet.
    258                packetIsDone();
   \                     ??ST_RadioTransmitCompleteIsrCallback_0:
   \   00000034   ........           BL       ?Subroutine6
    259                advanceTail();
    260                break;
   \                     ??CrossCallReturnLabel_15:
   \   00000038   39E0               B.N      ??ST_RadioTransmitCompleteIsrCallback_7
    261              case ST_PHY_ACK_RECEIVED:
    262                TX_DETAILS(printf("ST_PHY_ACK_RECEIVED\r\n");)
    263                //The inFlight packet required an ACK and is done
    264                packetIsDone();
   \                     ??ST_RadioTransmitCompleteIsrCallback_5:
   \   0000003A   ........           BL       ?Subroutine6
    265                advanceTail();
    266                //Save the framePending bit and calculate the framePending timeout
    267                //so that sleepy devices stay awake to accept incoming packets.
    268                if(framePending) {
   \                     ??CrossCallReturnLabel_14:
   \   0000003E   002D               CMP      R5,#+0
   \   00000040   35D0               BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_7
    269                  framePendingPktEnroute = TRUE;
   \   00000042   0120               MOVS     R0,#+1
   \   00000044   6071               STRB     R0,[R4, #+5]
    270                  framePendingMsTick = halCommonGetInt16uMillisecondTick();
   \   00000046   ........           BL       halCommonGetInt16uMillisecondTick
   \   0000004A   E080               STRH     R0,[R4, #+6]
   \   0000004C   2FE0               B.N      ??ST_RadioTransmitCompleteIsrCallback_7
    271                }
    272                break;
    273              case ST_MAC_NO_ACK_RECEIVED:
    274                TX_DETAILS(printf("ST_MAC_NO_ACK_RECEIVED\r\n");)
    275                //The inFlight packet required and ACK, which we didn't get, so
    276                //it must be retransmitted
    277                if(txPacketAttemptsLeft>0) {
   \                     ??ST_RadioTransmitCompleteIsrCallback_1:
   \   0000004E   8EB1               CBZ.N    R6,??ST_RadioTransmitCompleteIsrCallback_8
    278                  if(txPacketSfd != NULL) {
   \   00000050   0BB1               CBZ.N    R3,??CrossCallReturnLabel_7
    279                    ST_RadioEnableSfdSentNotification(TRUE);
   \   00000052   ........           BL       ?Subroutine4
    280                  }
    281                  status_code = ST_RadioTransmit(txPacket);
    282                  assert(status_code==ST_SUCCESS);
   \                     ??CrossCallReturnLabel_7:
   \   00000056   ........           BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   0000005A   38B1               CBZ.N    R0,??ST_RadioTransmitCompleteIsrCallback_9
   \   0000005C   4FF48D72           MOV      R2,#+282
   \                     ??ST_RadioTransmitCompleteIsrCallback_10:
   \   00000060   4146               MOV      R1,R8
   \   00000062   3846               MOV      R0,R7
   \   00000064   ........           BL       __aeabi_assert
   \   00000068   ........           BL       __iar_EmptyStepPoint
    283                  txPacketAttemptsLeft--;
   \                     ??ST_RadioTransmitCompleteIsrCallback_9:
   \   0000006C   A078               LDRB     R0,[R4, #+2]
   \   0000006E   401E               SUBS     R0,R0,#+1
   \   00000070   A070               STRB     R0,[R4, #+2]
   \   00000072   1CE0               B.N      ??ST_RadioTransmitCompleteIsrCallback_7
    284                } else {
    285                  txPacketDroppedNotifcation++;
   \                     ??ST_RadioTransmitCompleteIsrCallback_8:
   \   00000074   6069               LDR      R0,[R4, #+20]
   \   00000076   401C               ADDS     R0,R0,#+1
   \   00000078   6061               STR      R0,[R4, #+20]
    286                  //Failed all transmit attempts.  Dropping the packet.
    287                  packetIsDone();
   \   0000007A   DBE7               B.N      ??ST_RadioTransmitCompleteIsrCallback_0
    288                  advanceTail();
    289                }
    290                break;
    291              case ST_PHY_TX_CCA_FAIL:
    292                TX_DETAILS(printf("ST_PHY_TX_CCA_FAIL\r\n");)
    293                //The inFlight packet never got sent and must be retransmitted
    294                if(txPacketAttemptsLeft>0) {
   \                     ??ST_RadioTransmitCompleteIsrCallback_4:
   \   0000007C   002E               CMP      R6,#+0
   \   0000007E   F9D0               BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_8
    295                  if(txPacketSfd != NULL) {
   \   00000080   0BB1               CBZ.N    R3,??CrossCallReturnLabel_6
    296                    ST_RadioEnableSfdSentNotification(TRUE);
   \   00000082   ........           BL       ?Subroutine4
    297                  }
    298                  status_code = ST_RadioTransmit(txPacket);
    299                  assert(status_code==ST_SUCCESS);
   \                     ??CrossCallReturnLabel_6:
   \   00000086   ........           BL       ?Subroutine5
    300                  txPacketAttemptsLeft--;
    301                } else {
   \                     ??CrossCallReturnLabel_10:
   \   0000008A   0028               CMP      R0,#+0
   \   0000008C   EED0               BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_9
   \   0000008E   40F22B12           MOVW     R2,#+299
   \   00000092   E5E7               B.N      ??ST_RadioTransmitCompleteIsrCallback_10
    302                  txPacketDroppedNotifcation++;
    303                  //Failed all transmit attempts.  Dropping the packet.
    304                  packetIsDone();
    305                  advanceTail();
    306                }
    307                break;
    308              case ST_PHY_TX_UNDERFLOW:
    309                assert(FALSE);
   \                     ??ST_RadioTransmitCompleteIsrCallback_2:
   \   00000094   40F23512           MOVW     R2,#+309
   \   00000098   04E0               B.N      ??ST_RadioTransmitCompleteIsrCallback_11
    310                break;
    311              case ST_PHY_TX_INCOMPLETE:
    312                assert(FALSE);
   \                     ??ST_RadioTransmitCompleteIsrCallback_3:
   \   0000009A   4FF49C72           MOV      R2,#+312
   \   0000009E   01E0               B.N      ??ST_RadioTransmitCompleteIsrCallback_11
    313                break;
    314              default:
    315                assert(FALSE);
   \                     ??ST_RadioTransmitCompleteIsrCallback_6:
   \   000000A0   40F23B12           MOVW     R2,#+315
   \                     ??ST_RadioTransmitCompleteIsrCallback_11:
   \   000000A4   4146               MOV      R1,R8
   \   000000A6   ........           BL       __aeabi_assert
   \   000000AA   ........           BL       __iar_EmptyStepPoint
    316            };
    317          }
   \                     ??ST_RadioTransmitCompleteIsrCallback_7:
   \   000000AE   BDE8F081           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   1070               STRB     R0,[R2, #+0]
   \   00000004   E070               STRB     R0,[R4, #+3]
   \   00000006   ....               B.N      advanceTail
    318          
    319          

   \                                 In section .text, align 2, keep-with-next
    320          void ST_RadioSfdSentIsrCallback(u32 sfdSentTime)
    321          {
    322            //Inject the SFD time into the packet being transmitted.
    323            txPacketSfd[0] = (sfdSentTime>> 0)&0xFF;
   \                     ST_RadioSfdSentIsrCallback:
   \   00000000   ....               LDR.N    R1,??DataTable22
   \   00000002   0A69               LDR      R2,[R1, #+16]
   \   00000004   1070               STRB     R0,[R2, #+0]
    324            txPacketSfd[1] = (sfdSentTime>> 8)&0xFF;
   \   00000006   0A69               LDR      R2,[R1, #+16]
   \   00000008   030A               LSRS     R3,R0,#+8
   \   0000000A   5370               STRB     R3,[R2, #+1]
    325            txPacketSfd[2] = (sfdSentTime>>16)&0xFF;
   \   0000000C   0A69               LDR      R2,[R1, #+16]
   \   0000000E   000C               LSRS     R0,R0,#+16
   \   00000010   9070               STRB     R0,[R2, #+2]
    326            //Mark the SFD time as valid.  This is important to do because if
    327            //this ISR doesn't operate fast enough the packet might be gone before
    328            //the time is fully injected.
    329            txPacketSfd[2] |= 0x80;
   \   00000012   0869               LDR      R0,[R1, #+16]
   \   00000014   8178               LDRB     R1,[R0, #+2]
   \   00000016   41F08001           ORR      R1,R1,#0x80
   \   0000001A   8170               STRB     R1,[R0, #+2]
    330            
    331            //To prevent this IsrCallback from being triggered more times than desired,
    332            //it is only enabled immediately before specific transmissions and then
    333            //immediately disabled here.
    334            ST_RadioEnableSfdSentNotification(FALSE);
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   ........           B.W      ST_RadioEnableSfdSentNotification
    335          }
    336          
    337          

   \                                 In section .text, align 2, keep-with-next
    338          boolean isDataPendingForShortId(u16 shortId)
    339          {
    340            return ((shortId==txIndirectQ.dstShortAddr)&&txIndirectQ.inUse) ? TRUE:FALSE;
   \                     isDataPendingForShortId:
   \   00000000   ....               LDR.N    R1,??DataTable22_2
   \   00000002   4A88               LDRH     R2,[R1, #+2]
   \   00000004   9042               CMP      R0,R2
   \   00000006   04D1               BNE.N    ??isDataPendingForShortId_0
   \   00000008   0878               LDRB     R0,[R1, #+0]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   02D0               BEQ.N    ??isDataPendingForShortId_1
   \   0000000E   0120               MOVS     R0,#+1
   \   00000010   7047               BX       LR
   \                     ??isDataPendingForShortId_0:
   \   00000012   0020               MOVS     R0,#+0
   \                     ??isDataPendingForShortId_1:
   \   00000014   7047               BX       LR               ;; return
    341          }
    342          
    343          

   \                                 In section .text, align 2, keep-with-next
    344          boolean ST_RadioDataPendingShortIdIsrCallback(u16 shortId)
    345          {
    346            return isDataPendingForShortId(shortId);
   \                     ST_RadioDataPendingShortIdIsrCallback:
   \   00000000   ....               B.N      isDataPendingForShortId
    347          }
    348          
    349          
    350          //This application does not use long IDs with indirect transmissions.

   \                                 In section .text, align 2, keep-with-next
    351          boolean ST_RadioDataPendingLongIdIsrCallback(u8* longId)
    352          {
    353            return FALSE;
   \                     ST_RadioDataPendingLongIdIsrCallback:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   7047               BX       LR               ;; return
    354          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     txDirectQHead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   ........           DC32     txDirectQ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   ........           DC32     txIndirectQ

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Direct transmission i...">`:
   \   00000000                      ; Initializer data, 60 bytes
   \   00000000   446972656374       DC8 68, 105, 114, 101, 99, 116, 32, 116, 114, 97
   \              20747261    
   \   0000000A   6E736D697373       DC8 110, 115, 109, 105, 115, 115, 105, 111, 110, 32
   \              696F6E20    
   \   00000014   696E2070726F       DC8 105, 110, 32, 112, 114, 111, 103, 101, 115, 115
   \              67657373    
   \   0000001E   2E2020747844       DC8 46, 32, 32, 116, 120, 68, 105, 114, 101, 99
   \              69726563    
   \   00000028   7451204E4F54       DC8 116, 81, 32, 78, 79, 84, 32, 99, 108, 101
   \              20636C65    
   \   00000032   617265642E0D       DC8 97, 114, 101, 100, 46, 13, 10, 0, 0, 0
   \              0A000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Indirect transmission...">`:
   \   00000000                      ; Initializer data, 64 bytes
   \   00000000   496E64697265       DC8 73, 110, 100, 105, 114, 101, 99, 116, 32, 116
   \              63742074    
   \   0000000A   72616E736D69       DC8 114, 97, 110, 115, 109, 105, 115, 115, 105, 111
   \              7373696F    
   \   00000014   6E20696E2070       DC8 110, 32, 105, 110, 32, 112, 114, 111, 103, 101
   \              726F6765    
   \   0000001E   73732E202074       DC8 115, 115, 46, 32, 32, 116, 120, 73, 110, 100
   \              78496E64    
   \   00000028   697265637451       DC8 105, 114, 101, 99, 116, 81, 32, 78, 79, 84
   \              204E4F54    
   \   00000032   20636C656172       DC8 32, 99, 108, 101, 97, 114, 101, 100, 46, 13
   \              65642E0D    
   \   0000003C   0A000000           DC8 10, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "status==ST_SUCCESS">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   737461747573       DC8 115, 116, 97, 116, 117, 115, 61, 61, 83, 84
   \              3D3D5354    
   \   0000000A   5F5355434345       DC8 95, 83, 85, 67, 67, 69, 83, 83, 0, 0
   \              53530000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "I:\\\\\\312\\265\\321\\3514 \\316\\336\\317`:
   \   00000000                      ; Initializer data, 84 bytes
   \   00000000   493A5CCAB5D1       DC8 73, 58, 92, 202, 181, 209, 233, 52, 32, 206
   \              E93420CE    
   \   0000000A   DECFDFB4ABB8       DC8 222, 207, 223, 180, 171, 184, 208, 198, 247, 189
   \              D0C6F7BD    
   \   00000014   DAB5E3B6E0B5       DC8 218, 181, 227, 182, 224, 181, 227, 205, 168, 208
   \              E3CDA8D0    
   \   0000001E   C5CAB5D1E95C       DC8 197, 202, 181, 209, 233, 92, 185, 164, 179, 204
   \              B9A4B3CC    
   \   00000028   D4B4B4FAC2EB       DC8 212, 180, 180, 250, 194, 235, 92, 115, 105, 109
   \              5C73696D    
   \   00000032   706C656D6163       DC8 112, 108, 101, 109, 97, 99, 92, 100, 101, 109
   \              5C64656D    
   \   0000003C   6F735C73616D       DC8 111, 115, 92, 115, 97, 109, 112, 108, 101, 92
   \              706C655C    
   \   00000046   7472616E736D       DC8 116, 114, 97, 110, 115, 109, 105, 116, 46, 99
   \              69742E63    
   \   00000050   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Failed all transmit a...">`:
   \   00000000                      ; Initializer data, 56 bytes
   \   00000000   4661696C6564       DC8 70, 97, 105, 108, 101, 100, 32, 97, 108, 108
   \              20616C6C    
   \   0000000A   207472616E73       DC8 32, 116, 114, 97, 110, 115, 109, 105, 116, 32
   \              6D697420    
   \   00000014   617474656D70       DC8 97, 116, 116, 101, 109, 112, 116, 115, 46, 32
   \              74732E20    
   \   0000001E   2044726F7070       DC8 32, 68, 114, 111, 112, 112, 105, 110, 103, 32
   \              696E6720    
   \   00000028   746865207061       DC8 116, 104, 101, 32, 112, 97, 99, 107, 101, 116
   \              636B6574    
   \   00000032   2E0D0A000000       DC8 46, 13, 10, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "txDirectQ is full!  D...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   747844697265       DC8 116, 120, 68, 105, 114, 101, 99, 116, 81, 32
   \              63745120    
   \   0000000A   69732066756C       DC8 105, 115, 32, 102, 117, 108, 108, 33, 32, 32
   \              6C212020    
   \   00000014   44726F707069       DC8 68, 114, 111, 112, 112, 105, 110, 103, 32, 110
   \              6E67206E    
   \   0000001E   657720545820       DC8 101, 119, 32, 84, 88, 32, 112, 97, 99, 107
   \              7061636B    
   \   00000028   65742E0D0A00       DC8 101, 116, 46, 13, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "txIndirectQ is full! ...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   7478496E6469       DC8 116, 120, 73, 110, 100, 105, 114, 101, 99, 116
   \              72656374    
   \   0000000A   512069732066       DC8 81, 32, 105, 115, 32, 102, 117, 108, 108, 33
   \              756C6C21    
   \   00000014   202044726F70       DC8 32, 32, 68, 114, 111, 112, 112, 105, 110, 103
   \              70696E67    
   \   0000001E   206E65772054       DC8 32, 110, 101, 119, 32, 84, 88, 32, 112, 97
   \              58207061    
   \   00000028   636B65742E0D       DC8 99, 107, 101, 116, 46, 13, 10, 0
   \              0A00        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "status_code==ST_SUCCESS">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   737461747573       DC8 115, 116, 97, 116, 117, 115, 95, 99, 111, 100
   \              5F636F64    
   \   0000000A   653D3D53545F       DC8 101, 61, 61, 83, 84, 95, 83, 85, 67, 67
   \              53554343    
   \   00000014   45535300           DC8 69, 83, 83, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FALSE">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   46414C534500       DC8 70, 65, 76, 83, 69, 0, 0, 0
   \              0000        
    355          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     ST_RadioDataPendingLongIdIsrCallback
                                         0
     ST_RadioDataPendingShortIdIsrCallback
                                         8
     ST_RadioSfdSentIsrCallback          8
     ST_RadioTransmitCompleteIsrCallback
                                        24
     advanceHead                         0
     advanceTail                         0
     clearDirectQueue                    8
     clearIndirectQueue                  8
     directTransmit                     16
     directTxTick                        8
     enqueueTxPacket                     8
     indirectTransmit                   16
     indirectTxTick                      8
     isDataPendingForShortId             0
     packetIsDone                        0
     transmitIndirectPacketNow           8
     txTick                              8


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     txDirectQ                                       680
     txIndirectQ                                     136
     txDirectQHead                                    24
     txDirectQTail
     txPacketAttemptsLeft
     txPacketInFlight
     txPacketIsDirect
     framePendingPktEnroute
     framePendingMsTick
     txPacketInUse
     txPacket
     txPacketSfd
     txPacketDroppedNotifcation
     clearDirectQueue                                 54
     clearIndirectQueue                               32
     packetIsDone                                     12
     advanceHead                                      18
     advanceTail                                      22
     indirectTxTick                                   66
     ?Subroutine5                                      6
     ?Subroutine4                                      6
     ?Subroutine3                                     14
     ?Subroutine2                                     12
     directTxTick                                     68
     txTick                                           32
     transmitIndirectPacketNow                         8
     directTransmit                                   56
     ?Subroutine1                                     14
     ?Subroutine0                                      8
     indirectTransmit                                 42
     enqueueTxPacket                                  30
     ST_RadioTransmitCompleteIsrCallback
                                                     178
     ?Subroutine6                                      8
     ST_RadioSfdSentIsrCallback                       34
     isDataPendingForShortId                          22
     ST_RadioDataPendingShortIdIsrCallback
                                                       2
     ST_RadioDataPendingLongIdIsrCallback
                                                       4
     ??DataTable22                                     4
     ??DataTable22_1                                   4
     ??DataTable22_2                                   4
     ?<Constant "Direct transmission i...">           60
     ?<Constant "Indirect transmission...">           64
     ?<Constant "status==ST_SUCCESS">                 20
     ?<Constant "I:\\\312\265\321\3514 \316\336\317   84
     ?<Constant "Failed all transmit a...">           56
     ?<Constant "txDirectQ is full!  D...">           48
     ?<Constant "txIndirectQ is full! ...">           48
     ?<Constant "status_code==ST_SUCCESS">            24
     ?<Constant "FALSE">                               8

 
   816 bytes in section .bss
    24 bytes in section .data
 1 172 bytes in section .text
 
 1 172 bytes of CODE memory
   840 bytes of DATA memory

Errors: none
Warnings: none
