###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     17/Jul/2014  09:45:15 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\sola #
#                    r-system.c                                               #
#    Command line =  "E:\实验4 16点组网\工程源代码\simplemac\demos\sample\sol #
#                    ar-system.c" -D BOARD_MB851 -D                           #
#                    "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\""  #
#                    -D "BOARD_HEADER=\"hal/micro/cortexm3/stm32w108/board.h\ #
#                    "" -D CORTEXM3 -D CORTEXM3_STM32W108 -D PHY_STM32W108XX  #
#                    -D DISABLE_WATCHDOG -D PLANET_ROLE -D BOARD_MB851 -D     #
#                    "__SOURCEFILE__=\"solar-system.c\"" -lC "E:\实验4        #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\ #
#                    List\" --diag_suppress Pa050 -o "E:\实验4                #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\ #
#                    Obj\" --debug --endian=little --cpu=Cortex-M3 -e         #
#                    --fpu=None --dlib_config "D:\study                       #
#                    soft\IAR6.10\IARsoft\arm\INC\c\DLib_Config_Normal.h" -I  #
#                    "E:\实验4 16点组网\工程源代码\simplemac\demos\sample\"   #
#                    -I "E:\实验4 16点组网\工程源代码\simplemac\demos\sample\ #
#                    ..\..\..\simplemac\include\" -I "E:\实验4                #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\"    #
#                    -I "E:\实验4 16点组网\工程源代码\simplemac\demos\sample\ #
#                    ..\..\..\hal\" -I "E:\实验4                              #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\HAL\ #
#                    MICRO\CORTEXM3\STM32W108\" -I "E:\实验4                  #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\simp #
#                    lemac\" -I "E:\实验4 16点组网\工程源代码\simplemac\demos #
#                    \sample\..\..\..\shared\" -Ohz --use_c++_inline          #
#    List file    =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB85 #
#                    1_PLANET\List\solar-system.lst                           #
#    Object file  =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB85 #
#                    1_PLANET\Obj\solar-system.o                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\实验4 16点组网\工程源代码\simplemac\demos\sample\solar-system.c
      1          /*******************************************************************************
      2          * SimpleMAC sample application: solar-system.c
      3          *
      4          * It supports sun and planet roles. 
      5          * Sun role allows user to form a network. 
      6          * Planet role allows an user to join to a network created by a sun.
      7          *
      8          * COPYRIGHT 2010 STMicroelectronics. All rights reserved.                 
      9          *******************************************************************************/
     10          /*****************************************************************
     11          文件名：solar-system.c
     12          版本号：v1.0
     13          创建日期：2012-4-1
     14          作者：大连飞翔科技有限公司,  www.fesxp.com, support@fesxp.com
     15          硬件描述：STM32W108,FES2440
     16          主要函数描述：main()函数实现SUN节点和多个PLANET节点通信
     17          修改日志：2012-4-28 by Cheng Zhu 审核，并删除不必要的部分
     18                    2012-5-16 by Cheng Zhu 删除main函数中变量lastPeriodicEventsQsTick
     19                    2012-5-16 by Cheng Zhu 注释JOIN_DENIED_PACKET中的无限循环
     20          *****************************************************************/
     21          #include PLATFORM_HEADER
     22          #include BOARD_HEADER
     23          #include <stdio.h>
     24          #include <stdlib.h>
     25          #include <string.h>
     26          #include "error.h"
     27          #include "hal/hal.h"
     28          #include "include/phy-library.h"
     29          #include "hal/micro/cortexm3/iap_bootloader.h"
     30          
     31          #include "transmit.h"
     32          
     33          //RX_DETAILS is a debugging macro for printing receive details.
     34          //WARNING:  THIS MACRO WILL CAUSE PRINTS FROM ISR CONTEXT!
     35          #define RX_DETAILS(x)   
     36          //This macro causes the main loop to print details of the periodic events
     37          //and sleep events.
     38          #define MAIN_DETAILS(x) x
     39          
     40          //This mask is passed into halSleepForQsWithOptions, indicating that
     41          //the chip should wake on UART receive activity (GPIO PB2).
     42          #define UART_ACTIVE_MASK (0x00000400)
     43          
     44          //Define the number of quarter seconds between periodic maintenance events.
     45          //The periodic events do not need to occur very often, so run these
     46          //events once a minute.
     47          #define PERIODIC_MAINTENANCE_EVENTS_RATE (1*60*4)
     48          
     49          //Define the number of entries in the planet table.
     50          //#define PLANET_TABLE_SIZE (5)
     51          #define PLANET_TABLE_SIZE (10)
     52          
     53          //Define the number of energy readings that shold be taken on a given
     54          //channel when forming a network and looking for a channel with the
     55          //least ammount of activity.
     56          #define ENERGY_SAMPLES_COUNT (32)
     57          
     58          //每套实验箱对应一个PANID值，不同实验箱不应相同，以防干扰
     59          #define MyPANID 0x101
     60          

   \                                 In section .data, align 4
     61          RadioTransmitConfig radioTransmitConfig = {
   \                     radioTransmitConfig:
   \   00000000   010104030501       DC8 1, 1, 4, 3, 5, 1, 0, 0
   \              0000        
     62            TRUE, //waitForAck
     63            TRUE, //checkCca
     64            RADIO_CCA_ATTEMPT_MAX_DEFAULT, //ccaAttemptMax
     65            RADIO_BACKOFF_EXPONENT_MIN_DEFAULT, //backoffExponentMin
     66            RADIO_BACKOFF_EXPONENT_MAX_DEFAULT, //backoffExponentMax
     67            TRUE  //appendCrc
     68          };
     69          
     70          //******************************************************************************
     71          // Define values used in constructing and decoding packets
     72          
     73          //These define the magic values needed when constructing the FCF of the
     74          //packets.  802.15.4 defines these numbers.
     75          #define FCF_DATA     (0x01)
     76          #define FCF_MACCMD   (0x03)
     77          #define FCF_ACKREQ   (0x20)
     78          #define FCF_INTRAPAN (0x40)
     79          #define FCF_NODST    (0x00)
     80          #define FCF_SHORTDST (0x08)
     81          #define FCF_LONGDST  (0x0C)
     82          #define FCF_NOSRC    (0x00)
     83          #define FCF_SHORTSRC (0x80)
     84          #define FCF_LONGSRC  (0xC0)
     85          
     86          //This app uses only two frame types: MAC Command and Data.
     87          #define FT_DATA          (FCF_DATA)
     88          #define FT_MAC_COMMAND   (FCF_MACCMD)
     89          
     90          //The following seven payload types are used with FT_DATA and the numerical
     91          //values are custom to this app.
     92          #define PT_GENERIC_DATA  (0x00)
     93          #define PT_SUN_SEARCH    (0x01)
     94          #define PT_SUN_AVAILABLE (0x02)
     95          #define PT_JOIN_REQUEST  (0x03)
     96          #define PT_JOIN_ACCEPTED (0x04)
     97          #define PT_JOIN_DENIED   (0x05)
     98          #define PT_LEAVING       (0x06)
     99          #define PT_TIME_DATA     (0x07)
    100          #define PT_SLEEPING      (0x08)
    101          #define PT_LED           (0x09)
    102          #define PT_TRSEND        (0x0A)
    103          //This payload type is used with FT_MAC_COMMAND and the numerical value
    104          //is defined by 802.15.4.
    105          #define PT_POLLING       (0x04)
    106          
    107          //The packet type is identified by its frame type and its payload type.
    108          //These are stored in different parts of the packet.  Since payload type
    109          //requires a specific frame type, I roll these two values into definitions
    110          //that are easier to read when switching on a decoded packet.  Frame type
    111          //occupies the upper nibble and payload type occupies the lower.
    112          #define GENERIC_DATA_PACKET  ((FT_DATA       <<4) | (PT_GENERIC_DATA <<0))
    113          #define CHANGE_TIME_PACKET    ((FT_DATA       <<4) | (PT_TIME_DATA  <<0))
    114          #define SYN_SLEEPING_WAITTIME ((FT_DATA       <<4) | (PT_SLEEPING   <<0))
    115          #define SYN_LED_WAITTIME     ((FT_DATA       <<4) | (PT_LED   <<0))   
    116          #define TRSEND_PACKET        ((FT_DATA       <<4) | (PT_TRSEND   <<0))  
    117          #define SUN_SEARCH_PACKET    ((FT_DATA       <<4) | (PT_SUN_SEARCH   <<0))
    118          #define SUN_AVAILABLE_PACKET ((FT_DATA       <<4) | (PT_SUN_AVAILABLE<<0))
    119          #define JOIN_REQUEST_PACKET  ((FT_DATA       <<4) | (PT_JOIN_REQUEST <<0))
    120          #define JOIN_ACCEPTED_PACKET ((FT_DATA       <<4) | (PT_JOIN_ACCEPTED<<0))
    121          #define JOIN_DENIED_PACKET   ((FT_DATA       <<4) | (PT_JOIN_DENIED  <<0))
    122          #define LEAVING_PACKET       ((FT_DATA       <<4) | (PT_LEAVING      <<0))
    123          #define POLLING_PACKET       ((FT_MAC_COMMAND<<4) | (PT_POLLING      <<0))
    124          
    125          //******************************************************************************
    126          // Define data structures
    127          typedef struct {
    128            boolean packetBeingProcessed;
    129            u8 packet[128];
    130            boolean ackFramePendingSet;
    131            u32 time;
    132            u16 errors;
    133            s8 rssi;
    134            u8 lqi;
    135          } RadioReceiveType;

   \                                 In section .bss, align 4
    136          RadioReceiveType rxData = {FALSE,};
   \                     rxData:
   \   00000000                      DS8 140
    137          
    138          typedef struct {
    139            boolean active;
    140            u16 shortAddr;
    141            u8 longAddr[8];
    142          } PlanetTableType;
    143          
    144          
    145          //******************************************************************************
    146          // Define global radio state and convenience macros
    147          RadioPowerMode radioPowerState = ST_RADIO_POWER_MODE_OFF;
    148          #define TURN_RADIO_ON()                             \
    149            do {                                              \
    150              ST_RadioWake();                               \
    151              radioPowerState = ST_RADIO_POWER_MODE_RX_ON; \
    152            } while(0)
    153          #define TURN_RADIO_OFF()                          \
    154            do {                                            \
    155              ST_RadioSleep();                            \
    156              radioPowerState = ST_RADIO_POWER_MODE_OFF; \
    157            } while(0)
    158          //Derek: 函数申明
    159          void replySync();
    160          //Derek: Sync消息所用全局变量
    161          u32 T1=-1, T2=-1, T3=-1, T4=-1, T5=-1;
    162          u32 back=-1;

   \                                 In section .bss, align 8
    163          double diff=0,p11=0,x=0;
   \                     diff:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     `p11`:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     x:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
    164          double TT1=0, TT2=0, TT3=0, TT4=0, TT5=0;
   \                     TT1:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     TT2:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     TT3:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     TT4:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     TT5:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
    165          double timeoffset;
   \                     timeoffset:
   \   00000000                      DS8 8
    166          void replySyncback();
    167          void sendSync();
    168          //******************************************************************************
    169          // Define global network state; initialized when forming/joining/leaving
    170          boolean activeInNetwork = FALSE;
    171          boolean availableSunFound = FALSE;
    172          boolean networkJoinedStopSearching = FALSE;
    173          u8 shortAddrCounter = 0;
    174          u8 currSeqNum = 0;
    175          u8 autoSendRate = 0;

   \                                 In section .bss, align 2
    176          u16 autoSendRateDstShortAddr = 0x0000;
   \                     autoSendRateDstShortAddr:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    177          u16 autoSendLastQsTick;
   \                     autoSendLastQsTick:
   \   00000000                      DS8 2

   \                                 In section .data, align 4
   \                     radioPowerState:
   \   00000000   01                 DC8 1
   \                     activeInNetwork:
   \   00000001   00                 DC8 0
   \                     availableSunFound:
   \   00000002   00                 DC8 0
   \                     networkJoinedStopSearching:
   \   00000003   00                 DC8 0
   \                     shortAddrCounter:
   \   00000004   00                 DC8 0
   \                     currSeqNum:
   \   00000005   00                 DC8 0
   \                     autoSendRate:
   \   00000006   00                 DC8 0
    178          u8 autoPollRate = 0;
   \                     autoPollRate:
   \   00000007   00                 DC8 0
   \                     T2:
   \   00000008   FFFFFFFF           DC32 4294967295
   \                     T3:
   \   0000000C   FFFFFFFF           DC32 4294967295

   \                                 In section .data, align 4
   \                     T1:
   \   00000000   FFFFFFFF           DC32 4294967295

   \                                 In section .data, align 4
   \                     T4:
   \   00000000   FFFFFFFF           DC32 4294967295

   \                                 In section .data, align 4
   \                     T5:
   \   00000000   FFFFFFFF           DC32 4294967295

   \                                 In section .data, align 4
   \                     back:
   \   00000000   FFFFFFFF           DC32 4294967295

   \                                 In section .bss, align 2
    179          u16 autoPollLastQsTick;
   \                     autoPollLastQsTick:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
    180          PlanetTableType planetTable[PLANET_TABLE_SIZE];
   \                     planetTable:
   \   00000000                      DS8 120

   \                                 In section .bss, align 2
    181          u16 counter=0;
   \                     counter:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    182          u16 counter2=0;
   \                     counter2:
   \   00000000                      DS8 2
    183          //static u8 currnum=0;
    184          //u16 shortaddr[PLANET_TABLE_SIZE];
    185          
    186          #ifdef PLANET_ROLE

   \                                 In section .bss, align 1
    187          u8 planet_join_by_button = 0;
   \                     planet_join_by_button:
   \   00000000                      DS8 1
    188          #endif
    189          
    190          void sendVddDataPacket(u16 vddMillivolts,u16 dstShortAddr,boolean sendDirectly);
    191          

   \                                 In section .text, align 2, keep-with-next
    192          void initNetworkState(void)
    193          {
   \                     initNetworkState:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    194            u8 i;
    195            
    196            activeInNetwork = FALSE;
   \   00000002   ........           LDR.W    R4,??DataTable41_1
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   6070               STRB     R0,[R4, #+1]
    197            networkJoinedStopSearching = FALSE;
   \   0000000A   E070               STRB     R0,[R4, #+3]
    198            shortAddrCounter = 0;
   \   0000000C   2071               STRB     R0,[R4, #+4]
    199            currSeqNum = halCommonGetRandom()&0xFF; //802.15.4 says to start with a random seq num
   \   0000000E   ........           BL       halCommonGetRandom
   \   00000012   6071               STRB     R0,[R4, #+5]
    200            autoSendRate = 0;
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   A071               STRB     R0,[R4, #+6]
    201            autoPollRate = 0;
   \   00000018   E071               STRB     R0,[R4, #+7]
    202            txPacketInFlight = FALSE;
   \   0000001A   ........           LDR.W    R0,??DataTable41_2
   \   0000001E   0021               MOVS     R1,#+0
   \   00000020   0170               STRB     R1,[R0, #+0]
    203            framePendingPktEnroute = FALSE;
   \   00000022   ........           LDR.W    R0,??DataTable41_3
   \   00000026   0170               STRB     R1,[R0, #+0]
    204            for(i=0;i<PLANET_TABLE_SIZE;i++) {
   \   00000028   0024               MOVS     R4,#+0
   \   0000002A   ........           LDR.W    R5,??DataTable41_4
    205              planetTable[i].active = FALSE;
   \                     ??initNetworkState_0:
   \   0000002E   0C20               MOVS     R0,#+12
   \   00000030   6043               MULS     R0,R0,R4
   \   00000032   0021               MOVS     R1,#+0
   \   00000034   4155               STRB     R1,[R0, R5]
    206              planetTable[i].shortAddr = 0x0000;
   \   00000036   4019               ADDS     R0,R0,R5
   \   00000038   4180               STRH     R1,[R0, #+2]
    207              memset(planetTable[i].longAddr, 0, sizeof(planetTable[i].longAddr));
   \   0000003A   0821               MOVS     R1,#+8
   \   0000003C   001D               ADDS     R0,R0,#+4
   \   0000003E   ........           BL       __aeabi_memclr
    208            }
   \   00000042   641C               ADDS     R4,R4,#+1
   \   00000044   0A2C               CMP      R4,#+10
   \   00000046   F2DB               BLT.N    ??initNetworkState_0
    209            ST_RadioSetPanId(0xFFFF);  //return to broadcast PAN ID
   \   00000048   4FF6FF70           MOVW     R0,#+65535
   \   0000004C   ........           BL       ST_RadioSetPanId
    210            ST_RadioSetNodeId(0xFFFE); //return to long addressing node ID
   \   00000050   4FF6FE70           MOVW     R0,#+65534
   \   00000054   ........           BL       ST_RadioSetNodeId
    211            clearDirectQueue();
   \   00000058   ........           BL       clearDirectQueue
    212            clearIndirectQueue();
   \   0000005C   BDE83140           POP      {R0,R4,R5,LR}
   \   00000060   ........           B.W      clearIndirectQueue
    213          }
    214          
    215          
    216          //******************************************************************************
    217          // LQI calculation.

   \                                 In section .text, align 2, keep-with-next
    218          u8 calculateLqi(u16 chipErrors, u8 packetLength)
    219          {
    220            //The chipErrors parameter is the 10 bit chip error count from the radio.
    221            //The packetLength parameter is the byte size of the packet, including
    222            //  the length byte at the start and the 2 crc bytes at the end.
    223            u32 lqi;
    224            
    225            //To obtain the LQI, convert the total chip errors in a packet (err/packet)
    226            //to the chip errors per byte (err/byte).  Scale up the chipErrors value
    227            //to maintain reasonable precision during the division.  We don't
    228            //care about packets that have more than 4 chip errors per byte (6.25% chip
    229            //error rate), so we scale up by a factor of 64.
    230            lqi = chipErrors << 6;
    231            lqi /= packetLength;
   \                     calculateLqi:
   \   00000000   8001               LSLS     R0,R0,#+6
   \   00000002   B0FBF1F0           UDIV     R0,R0,R1
    232            
    233            //802.15.4 says that an LQI should represent the best link quality as 0xFF
    234            //and the worst LQI as 0x00.
    235            return (0xFF - (u8)((lqi > 0xFF) ? (0xFF) : (lqi)));
   \   00000006   FF28               CMP      R0,#+255
   \   00000008   88BF               IT       HI 
   \   0000000A   FF20               MOVHI    R0,#+255
   \   0000000C   C0F1FF00           RSB      R0,R0,#+255
   \   00000010   C0B2               UXTB     R0,R0
   \   00000012   7047               BX       LR               ;; return
    236          }
    237          
    238          
    239          //******************************************************************************
    240          // Packet reception processing
    241          
    242          //ST_RadioReceiveIsrCallback executes in ISR context and copies the
    243          //incoming packet into the rxData structure so it can be processed
    244          //outside of ISR context by processRxPacket.

   \                                 In section .text, align 2, keep-with-next
    245          void ST_RadioReceiveIsrCallback(u8 *packet,
    246                                            boolean ackFramePendingSet,
    247                                            u32 time,
    248                                            u16 errors,
    249                                            s8 rssi)
    250          {
   \                     ST_RadioReceiveIsrCallback:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   9DF91440           LDRSB    R4,[SP, #+20]
    251            u8 i;
    252            RX_DETAILS(printf("#");)
    253            if(activeInNetwork) {
   \   00000006   ........           LDR.W    R5,??DataTable41_1
   \   0000000A   6D78               LDRB     R5,[R5, #+1]
   \   0000000C   C5B1               CBZ.N    R5,??ST_RadioReceiveIsrCallback_0
    254              //If there isn't already one being processed, save the
    255              //incoming packet into the app's buffer for processing
    256              //outside of ISR context.
    257              if(!rxData.packetBeingProcessed) {
   \   0000000E   ........           LDR.W    R5,??DataTable41_5
   \   00000012   2E78               LDRB     R6,[R5, #+0]
   \   00000014   A6B9               CBNZ.N   R6,??ST_RadioReceiveIsrCallback_0
    258                for(i=0;i<=packet[0];i++) {
   \   00000016   06E0               B.N      ??ST_RadioReceiveIsrCallback_1
    259                  rxData.packet[i] = packet[i];
   \                     ??ST_RadioReceiveIsrCallback_2:
   \   00000018   7719               ADDS     R7,R6,R5
   \   0000001A   16F800C0           LDRB     R12,[R6, R0]
   \   0000001E   87F801C0           STRB     R12,[R7, #+1]
    260                  //printf("%02X ",rxData.packet[i]);
    261                }
   \   00000022   761C               ADDS     R6,R6,#+1
   \   00000024   F6B2               UXTB     R6,R6
   \                     ??ST_RadioReceiveIsrCallback_1:
   \   00000026   0778               LDRB     R7,[R0, #+0]
   \   00000028   B742               CMP      R7,R6
   \   0000002A   F5DA               BGE.N    ??ST_RadioReceiveIsrCallback_2
    262                //printf("\r\n");
    263             
    264                rxData.ackFramePendingSet = ackFramePendingSet;
   \   0000002C   85F88110           STRB     R1,[R5, #+129]
    265                rxData.time = time;
   \   00000030   C5F88420           STR      R2,[R5, #+132]
    266                rxData.errors = errors;
   \   00000034   A5F88830           STRH     R3,[R5, #+136]
    267                rxData.rssi = rssi;
   \   00000038   85F88A40           STRB     R4,[R5, #+138]
    268                rxData.packetBeingProcessed = TRUE;
   \   0000003C   0120               MOVS     R0,#+1
   \   0000003E   2870               STRB     R0,[R5, #+0]
    269                //processRxPacket() in the main loop handles the rest
    270              }
    271            }
    272          }
   \                     ??ST_RadioReceiveIsrCallback_0:
   \   00000040   F0BD               POP      {R4-R7,PC}       ;; return
    273          
    274          //processRxPacket handles decoding all received packets and taking action
    275          //in response to received packets.  This function executes outside of
    276          //ISR context and operates on the rxData structure.  The rxData structure
    277          //is populated by ST_RadioReceiveIsrCallback.

   \                                 In section .text, align 2, keep-with-next
    278          void processRxPacket(void)
    279          {
   \                     processRxPacket:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   A3B0               SUB      SP,SP,#+140
    280            boolean pktHasSrcPanId = FALSE;
   \   00000006   0026               MOVS     R6,#+0
    281            u8 srcAddrOffset = 0;
   \   00000008   B346               MOV      R11,R6
    282            u16 srcPanId=0xFFFF;
   \   0000000A   4FF6FF78           MOVW     R8,#+65535
   \   0000000E   C146               MOV      R9,R8
    283            u16 shortSrcAddr=0;
    284            u8 longSrcAddr[8]={0,};
   \   00000010   00A8               ADD      R0,SP,#+0
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   0A46               MOV      R2,R1
   \   00000016   06C0               STM      R0!,{R1,R2}
    285            u8 payloadStart;
    286            u8 packetType;
    287            u8 packet[128];
    288           
    289            if(!rxData.packetBeingProcessed) {
   \   00000018   ........           LDR.W    R5,??DataTable41_5
   \   0000001C   2878               LDRB     R0,[R5, #+0]
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   00F0E480           BEQ.W    ??processRxPacket_0
    290              return;
    291            }
    292          #ifdef PLANET_ROLE
    293          
    294            if(rxData.packet[13]=='S')
   \   00000024   ........           LDR.W    R7,??DataTable41_1
   \   00000028   A87B               LDRB     R0,[R5, #+14]
   \   0000002A   5328               CMP      R0,#+83
   \   0000002C   04D1               BNE.N    ??processRxPacket_1
    295            { //LGZ:b1
    296              //printf("LGZ has reply");
    297              T2=halCommonGetInt32uMillisecondTick();
   \   0000002E   ........           BL       halCommonGetInt32uMillisecondTick
   \   00000032   B860               STR      R0,[R7, #+8]
    298              replySync();
   \   00000034   ........           BL       replySync
    299            }
    300          /*
    301            if(rxData.packet[13]=='L')
    302              { 
    303                counter++;
    304             // printf("p11 already,This is the %d cycle\r\n",counter);
    305              printf("%d   ",counter);
    306              T2=0;
    307              T2=((((((T2|rxData.packet[17])<<8)|rxData.packet[16])<<8)|rxData.packet[15])<<8)|rxData.packet[14];
    308              
    309              
    310              u16 ww1,ww2,ww3,ww4,ww5,ww6,ww7,ww8;
    311              double mm;
    312              TT2=T2;
    313              TT5=T5;
    314              
    315              p11=TT2-TT5-diff;
    316              diff=TT2-TT5;
    317              if(p11<0)
    318              {
    319                p11=-p11;
    320                printf("-");
    321              }
    322              /*
                     ^
Warning[Pe009]: nested comment is not allowed
    323              mm=diff;
    324              ww1=mm/10000000;
    325              ww2=(mm-ww1*10000000)/1000000;
    326              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    327              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    328              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    329              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    330              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    331              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    332              printf("diff: %d",ww1); 
    333              printf("%d",ww2); 
    334              printf("%d",ww3);
    335              printf("%d",ww4); 
    336              printf("%d",ww5);
    337              printf("%d",ww6); 
    338              printf("%d",ww7);
    339              printf("%d\r\n",ww8); 
    340              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    341              
    342              
    343              
    344              mm=T5;
    345              ww1=mm/10000000;
    346              ww2=(mm-ww1*10000000)/1000000;
    347              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    348              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    349              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    350              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    351              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    352              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    353              printf("T5: %d",ww1); 
    354              printf("%d",ww2); 
    355              printf("%d",ww3);
    356              printf("%d",ww4); 
    357              printf("%d",ww5);
    358              printf("%d",ww6); 
    359              printf("%d",ww7);
    360              printf("%d\r\n",ww8); 
    361              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    362              
    363              mm=T2;
    364              ww1=mm/10000000;
    365              ww2=(mm-ww1*10000000)/1000000;
    366              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    367              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    368              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    369              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    370              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    371              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    372              printf("T2: %d",ww1); 
    373              printf("%d",ww2); 
    374              printf("%d",ww3);
    375              printf("%d",ww4); 
    376              printf("%d",ww5);
    377              printf("%d",ww6); 
    378              printf("%d",ww7);
    379              printf("%d\r\n",ww8); 
    380              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    381              
    382              //*0.9769625
                      ^
Warning[Pe009]: nested comment is not allowed

    u16 shortSrcAddr=0;
        ^
"E:\实验4 16点组网\工程源代码\simplemac\demos\sample\solar-system.c",283  Warning[Pe550]: 
          variable "shortSrcAddr" was set but never used
    383              mm=p11;
    384              ww1=mm/10000000;
    385              ww2=(mm-ww1*10000000)/1000000;
    386              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    387              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    388              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    389              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    390              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    391              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    392              //printf("T2-T5-diff: %d",ww1); 
    393              printf("%d",ww1); 
    394              printf("%d",ww2); 
    395              printf("%d",ww3);
    396              printf("%d",ww4); 
    397              printf("%d",ww5);
    398              printf("%d",ww6); 
    399              printf("%d",ww7);
    400              printf("%d\r\n",ww8); 
    401              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    402              }
    403           else if(rxData.packet[13]=='S')
    404            { //LGZ:p11
    405              T5=halCommonGetInt32uMillisecondTick();
    406              //printf("T5 has start;\r\n");
    407              //rxData.packetBeingProcessed = 0;
    408              
    409            }*/
    410            
    411          #endif
    412           
    413          #ifdef SUN_ROLE
    414           //LGZ
    415            if((rxData.packet[13]=='r')&&(rxData.packet[14]=='p')&&(rxData.packet[15]=='0')&&(rxData.packet[16]=='y'))
    416            { 
    417              counter2++;
    418              //printf("This is the %d cycle\r\n",counter2);
    419              printf("%d   ",counter2);
    420              T4=halCommonGetInt32uMillisecondTick();
    421              T2=0;
    422              T2=((((((T2|rxData.packet[20])<<8)|rxData.packet[19])<<8)|rxData.packet[18])<<8)|rxData.packet[17];
    423              
    424              back=T2;
    425              //replySyncback();//LGZ:立刻回复p11
    426              //sendSync();
    427              
    428              T3=0;
    429              T3=((((((T3|rxData.packet[24])<<8)|rxData.packet[23])<<8)|rxData.packet[22])<<8)|rxData.packet[21];
    430              TT1=T1;
    431              TT2=T2;
    432              TT3=T3;
    433              TT4=T4;
    434              
    435              /*timeoffset=((TT2-TT1)+(TT3-TT4))-2*x;
    436              x=(((TT2-TT1)+(TT3-TT4)))/2;*/
    437              
    438              timeoffset=((TT2-TT1)+(TT3-TT4));
    439              
    440              
    441              if(timeoffset<0)
    442              {
    443                timeoffset=-timeoffset;
    444                printf("-");
    445              }
    446              //timeoffset=timeoffset*100;
    447              u16 ww1,ww2,ww3,ww4,ww5,ww6,ww7,ww8;
    448              double mm;
    449              /*
    450             printf("PLANET0:\r\n");
    451              mm=T1;
    452              ww1=mm/10000000;
    453              ww2=(mm-ww1*10000000)/1000000;
    454              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    455              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    456              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    457              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    458              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    459              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    460              printf("T1: %d",ww1); 
    461              printf("%d",ww2); 
    462              printf("%d",ww3);
    463              printf("%d",ww4); 
    464              printf("%d",ww5);
    465              printf("%d",ww6); 
    466              printf("%d",ww7);
    467              printf("%d\r\n",ww8); 
    468              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    469              
    470              mm=T2;
    471              ww1=mm/10000000;
    472              ww2=(mm-ww1*10000000)/1000000;
    473              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    474              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    475              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    476              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    477              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    478              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    479              printf("T2: %d",ww1); 
    480              printf("%d",ww2); 
    481              printf("%d",ww3);
    482              printf("%d",ww4); 
    483              printf("%d",ww5);
    484              printf("%d",ww6); 
    485              printf("%d",ww7);
    486              printf("%d\r\n",ww8); 
    487              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    488              
    489              mm=T3;
    490              ww1=mm/10000000;
    491              ww2=(mm-ww1*10000000)/1000000;
    492              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    493              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    494              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    495              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    496              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    497              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    498              printf("T3: %d",ww1); 
    499              printf("%d",ww2); 
    500              printf("%d",ww3);
    501              printf("%d",ww4); 
    502              printf("%d",ww5);
    503              printf("%d",ww6); 
    504              printf("%d",ww7);
    505              printf("%d\r\n",ww8); 
    506              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    507              
    508              mm=T4;
    509              ww1=mm/10000000;
    510              ww2=(mm-ww1*10000000)/1000000;
    511              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    512              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    513              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    514              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    515              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    516              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    517              printf("T4: %d",ww1); 
    518              printf("%d",ww2); 
    519              printf("%d",ww3);
    520              printf("%d",ww4); 
    521              printf("%d",ww5);
    522              printf("%d",ww6); 
    523              printf("%d",ww7);
    524              printf("%d\r\n",ww8); 
    525              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    526              */
    527                mm=timeoffset;
    528              ww1=mm/10000000;
    529              ww2=(mm-ww1*10000000)/1000000;
    530              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
    531              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
    532              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
    533              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
    534              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
    535              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
    536              //printf("((T2-T1)+(T3-T4)): %d",ww1); 
    537              printf("%d",ww1); 
    538              printf("%d",ww2); 
    539              printf("%d",ww3);
    540              printf("%d",ww4); 
    541              printf("%d",ww5);
    542              printf("%d",ww6); 
    543              printf("%d",ww7);
    544              printf("%d\r\n",ww8); 
    545              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
    546            } 
    547          
    548          #endif
    549           
    550            
    551           /* RX_DETAILS(
    552              printf("\r\n");
    553              printf("RX:");
    554              for(i=0;i<=rxData.packet[0];i++) {
    555                printf(" %02X", rxData.packet[i]);
    556              }
    557              printf("\r\n");
    558              printf("ackFramePendingSet = %d\r\n", rxData.ackFramePendingSet);
    559              printf("time = 0x%05X\r\n", rxData.time);
    560              printf("errors = %d\r\n", rxData.errors);
    561              printf("rssi = %d\r\n", rxData.rssi);
    562            );*/
    563            //Derek 检测Sync消息
    564          
    565            //At a minimum there must be a dst PAN, a short dst addr, a short src
    566            //addr, and a payload/command type.  That's a minimum of 10 bytes.
    567            if(rxData.packet[0]<10) {
   \                     ??processRxPacket_1:
   \   00000038   6878               LDRB     R0,[R5, #+1]
   \   0000003A   0A28               CMP      R0,#+10
   \   0000003C   06D3               BCC.N    ??processRxPacket_2
    568              RX_DETAILS(printf("Length byte too short\r\n");)
    569              goto stopProcessing;
    570            }
    571            
    572            //Determine the frame type.
    573            switch(rxData.packet[1]&0x7) {
   \   0000003E   A878               LDRB     R0,[R5, #+2]
   \   00000040   00F00701           AND      R1,R0,#0x7
   \   00000044   0129               CMP      R1,#+1
   \   00000046   02D0               BEQ.N    ??processRxPacket_3
   \   00000048   0329               CMP      R1,#+3
   \   0000004A   03D0               BEQ.N    ??processRxPacket_4
   \                     ??processRxPacket_2:
   \   0000004C   CCE0               B.N      ??processRxPacket_5
    574              case FT_DATA:
    575                RX_DETAILS(printf("FT_DATA\r\n");)
    576                packetType = (FT_DATA<<4);
   \                     ??processRxPacket_3:
   \   0000004E   4FF0100A           MOV      R10,#+16
    577                break;
   \   00000052   01E0               B.N      ??processRxPacket_6
    578              case FT_MAC_COMMAND:
    579                RX_DETAILS(printf("FT_MAC_COMMAND\r\n");)
    580                packetType = (FT_MAC_COMMAND<<4);
   \                     ??processRxPacket_4:
   \   00000054   4FF0300A           MOV      R10,#+48
    581                break;
    582              default:
    583                RX_DETAILS(printf("Unknown frame type\r\n");)
    584                goto stopProcessing;
    585            };
    586            
    587            //Is there a source PAN ID in the packet?
    588            if((rxData.packet[1]&0x40)!=0x40) {
   \                     ??processRxPacket_6:
   \   00000058   4006               LSLS     R0,R0,#+25
   \   0000005A   5CBF               ITT      PL 
   \   0000005C   0126               MOVPL    R6,#+1
   \   0000005E   4FF0020B           MOVPL    R11,#+2
    589              pktHasSrcPanId=TRUE;
    590              srcAddrOffset = 2;
    591            }
    592            
    593            //There are 4 possible addressing modes in our application:
    594            switch(rxData.packet[2]) {
   \   00000062   0BF11004           ADD      R4,R11,#+16
   \   00000066   0BEB0500           ADD      R0,R11,R5
   \   0000006A   E978               LDRB     R1,[R5, #+3]
   \   0000006C   8829               CMP      R1,#+136
   \   0000006E   06D0               BEQ.N    ??processRxPacket_7
   \   00000070   8C29               CMP      R1,#+140
   \   00000072   15D0               BEQ.N    ??processRxPacket_8
   \   00000074   C829               CMP      R1,#+200
   \   00000076   0AD0               BEQ.N    ??processRxPacket_9
   \   00000078   CC29               CMP      R1,#+204
   \   0000007A   15D0               BEQ.N    ??processRxPacket_10
   \   0000007C   B4E0               B.N      ??processRxPacket_5
    595              case FCF_SHORTDST + FCF_SHORTSRC:
    596                RX_DETAILS(printf("short dst, short src\r\n");)
    597                shortSrcAddr = (rxData.packet[8+srcAddrOffset+1]<<8)|
    598                               (rxData.packet[8+srcAddrOffset+0]<<0);
    599                payloadStart = 10+srcAddrOffset;
   \                     ??processRxPacket_7:
   \   0000007E   0BF10A04           ADD      R4,R11,#+10
    600                if(pktHasSrcPanId) {
   \   00000082   DEB1               CBZ.N    R6,??processRxPacket_11
    601                  srcPanId = (rxData.packet[9]<<8)|(rxData.packet[8]<<0);
   \                     ??processRxPacket_12:
   \   00000084   A87A               LDRB     R0,[R5, #+10]
   \   00000086   697A               LDRB     R1,[R5, #+9]
   \                     ??processRxPacket_13:
   \   00000088   41EA0029           ORR      R9,R1,R0, LSL #+8
   \   0000008C   16E0               B.N      ??processRxPacket_11
    602                }
    603                break;
    604              case FCF_SHORTDST + FCF_LONGSRC:
    605                RX_DETAILS(printf("short dst, long src\r\n");)
    606                memcpy(longSrcAddr, (rxData.packet+8+srcAddrOffset), 8);
   \                     ??processRxPacket_9:
   \   0000008E   0822               MOVS     R2,#+8
   \   00000090   00F10901           ADD      R1,R0,#+9
   \   00000094   00A8               ADD      R0,SP,#+0
   \   00000096   ........           BL       __aeabi_memcpy
    607                payloadStart = 16+srcAddrOffset;
    608                if(pktHasSrcPanId) {
   \   0000009A   002E               CMP      R6,#+0
   \   0000009C   F2D1               BNE.N    ??processRxPacket_12
   \   0000009E   0DE0               B.N      ??processRxPacket_11
    609                  srcPanId = (rxData.packet[9]<<8)|(rxData.packet[8]<<0);
    610                }
    611                break;
    612              case FCF_LONGDST + FCF_SHORTSRC:
    613                RX_DETAILS(printf("long dst, short src\r\n");)
    614                shortSrcAddr = (rxData.packet[14+srcAddrOffset+1]<<8)|
    615                               (rxData.packet[14+srcAddrOffset+0]<<0);
    616                payloadStart = 16+srcAddrOffset;
    617                if(pktHasSrcPanId) {
   \                     ??processRxPacket_8:
   \   000000A0   66B1               CBZ.N    R6,??processRxPacket_11
    618                  srcPanId = (rxData.packet[15]<<8)|(rxData.packet[14]<<0);
   \                     ??processRxPacket_14:
   \   000000A2   287C               LDRB     R0,[R5, #+16]
   \   000000A4   E97B               LDRB     R1,[R5, #+15]
   \   000000A6   EFE7               B.N      ??processRxPacket_13
    619                }
    620                break;
    621              case FCF_LONGDST + FCF_LONGSRC:
    622                RX_DETAILS(printf("long dst, long src\r\n");)
    623                memcpy(longSrcAddr, (rxData.packet+14+srcAddrOffset), 8);
   \                     ??processRxPacket_10:
   \   000000A8   0822               MOVS     R2,#+8
   \   000000AA   00F10F01           ADD      R1,R0,#+15
   \   000000AE   00A8               ADD      R0,SP,#+0
   \   000000B0   ........           BL       __aeabi_memcpy
    624                payloadStart = 22+srcAddrOffset;
   \   000000B4   0BF11604           ADD      R4,R11,#+22
    625                if(pktHasSrcPanId) {
   \   000000B8   002E               CMP      R6,#+0
   \   000000BA   F2D1               BNE.N    ??processRxPacket_14
    626                  srcPanId = (rxData.packet[15]<<8)|(rxData.packet[14]<<0);
    627                }
    628                break;
    629              default:
    630                RX_DETAILS(printf("Unknown addressing mode\r\n");)
    631                goto stopProcessing;
    632            }
    633            
    634            RX_DETAILS(
    635              if(pktHasSrcPanId) {
    636                printf("src pan = 0x%04X\r\n", srcPanId);
    637              }
    638            )
    639            
    640            //Make sure the packet is long enough to obtain a payload type
    641            if(rxData.packet[0]<payloadStart) {
   \                     ??processRxPacket_11:
   \   000000BC   6878               LDRB     R0,[R5, #+1]
   \   000000BE   E4B2               UXTB     R4,R4
   \   000000C0   A042               CMP      R0,R4
   \   000000C2   12D3               BCC.N    ??processRxPacket_15
    642              RX_DETAILS(printf("Length byte too short\r\n");)
    643              goto stopProcessing;
    644            }
    645            
    646            //Finish deriving the packet type by obtaining the payload type.
    647            packetType |= (rxData.packet[payloadStart]<<0);
    648            RX_DETAILS(printf("packet type = 0x%02X\r\n", packetType);)
    649            
    650            switch(packetType) {
   \   000000C4   6019               ADDS     R0,R4,R5
   \   000000C6   4178               LDRB     R1,[R0, #+1]
   \   000000C8   41EA0A01           ORR      R1,R1,R10
   \   000000CC   1029               CMP      R1,#+16
   \   000000CE   0DD0               BEQ.N    ??processRxPacket_16
   \   000000D0   1229               CMP      R1,#+18
   \   000000D2   47D0               BEQ.N    ??processRxPacket_17
   \   000000D4   1429               CMP      R1,#+20
   \   000000D6   7BD0               BEQ.N    ??processRxPacket_18
   \   000000D8   1529               CMP      R1,#+21
   \   000000DA   00F08280           BEQ.W    ??processRxPacket_19
   \   000000DE   1829               CMP      R1,#+24
   \   000000E0   14D0               BEQ.N    ??processRxPacket_20
   \   000000E2   1929               CMP      R1,#+25
   \   000000E4   1FD0               BEQ.N    ??processRxPacket_21
   \   000000E6   1A29               CMP      R1,#+26
   \   000000E8   36D0               BEQ.N    ??processRxPacket_22
   \                     ??processRxPacket_15:
   \   000000EA   7DE0               B.N      ??processRxPacket_5
    651              case (GENERIC_DATA_PACKET): //executes on SUN and PLANET
    652                RX_DETAILS(printf("GENERIC_DATA_PACKET\r\n");)
    653          #ifdef SUN_ROLE
    654              halToggleLed(LED_D1);
    655              halCommonDelayMilliseconds(500);
    656              halClearLed(LED_D1);
    657          #endif
    658          #ifdef PLANET_ROLE
    659              halToggleLed(LED_D3);
   \                     ??processRxPacket_16:
   \   000000EC   ........           BL       ?Subroutine3
    660              halCommonDelayMilliseconds(500);
   \                     ??CrossCallReturnLabel_16:
   \   000000F0   ........           BL       ?Subroutine2
    661              halClearLed(LED_D3);    
   \                     ??CrossCallReturnLabel_9:
   \   000000F4   ........           BL       ?Subroutine4
    662          #endif
    663              //The LQI calculation wants the entire packet length.  The length
    664              //byte in the received packet does not include the length byte
    665              //itself or the two CRC bytes.
    666              rxData.lqi = calculateLqi(rxData.errors, (rxData.packet[0]+3));
   \                     ??CrossCallReturnLabel_20:
   \   000000F8   6878               LDRB     R0,[R5, #+1]
   \   000000FA   C11C               ADDS     R1,R0,#+3
   \   000000FC   C9B2               UXTB     R1,R1
   \   000000FE   B5F88800           LDRH     R0,[R5, #+136]
   \   00000102   ........           BL       calculateLqi
   \   00000106   85F88B00           STRB     R0,[R5, #+139]
    667              /*printf("RX: Addr=0x%04X, VDD=%dmV, RxSFD=0x%05X, ",
    668                       shortSrcAddr,
    669                       ((rxData.packet[payloadStart+1]<<0)|
    670                        (rxData.packet[payloadStart+2]<<8)),
    671                       rxData.time);
    672              if(rxData.packet[payloadStart+5]&0x80) {
    673                  //Only show the TX SFD if the transmitter was capable of getting
    674                  //the SFD into the packet in time.
    675                  rxData.packet[payloadStart+5] &= ~0x80;
    676                  printf("TxSFD=0x%05X, ",
    677                         ((rxData.packet[payloadStart+3]<< 0)|
    678                          (rxData.packet[payloadStart+4]<< 8)|
    679                          (rxData.packet[payloadStart+5]<<16)));
    680                } else {
    681                  printf("TxSFD=-------, ");
    682                }
    683                
    684                printf("RSSI=%ddBm, LQI=0x%02X\r\n",
    685                       rxData.rssi,
    686                       rxData.lqi);*/
    687                break;
   \   0000010A   6DE0               B.N      ??processRxPacket_5
    688          #ifdef PLANET_ROLE
    689              case (SYN_SLEEPING_WAITTIME):
    690                  printf("SYN_SLEEPING_WAITTIME\r\n");
   \                     ??processRxPacket_20:
   \   0000010C   ........           ADR.W    R0,`?<Constant "SYN_SLEEPING_WAITTIME\\r\\n">`
   \   00000110   ........           BL       printf
    691          	halToggleLed(LED_D3);    
   \   00000114   ........           BL       ?Subroutine3
    692          	halCommonDelayMilliseconds(1000);
   \                     ??CrossCallReturnLabel_15:
   \   00000118   4FF47A70           MOV      R0,#+1000
   \                     ??processRxPacket_23:
   \   0000011C   ........           BL       halCommonDelayMilliseconds
    693                  halClearLed(LED_D3);                
   \   00000120   ........           BL       ?Subroutine4
    694                  break;
   \                     ??CrossCallReturnLabel_19:
   \   00000124   60E0               B.N      ??processRxPacket_5
    695              case (SYN_LED_WAITTIME):
    696                  printf("SYN_LED_WAITTIME\r\n");
   \                     ??processRxPacket_21:
   \   00000126   ........           ADR.W    R0,`?<Constant "SYN_LED_WAITTIME\\r\\n">`
   \   0000012A   ........           BL       printf
    697          	halToggleLed(LED_D3);    //连续3次
   \   0000012E   ........           BL       ?Subroutine3
    698          	halCommonDelayMilliseconds(500);
   \                     ??CrossCallReturnLabel_14:
   \   00000132   ........           BL       ?Subroutine2
    699                  halClearLed(LED_D3); 
   \                     ??CrossCallReturnLabel_8:
   \   00000136   ........           BL       ?Subroutine4
    700                  halCommonDelayMilliseconds(500);
   \                     ??CrossCallReturnLabel_18:
   \   0000013A   ........           BL       ?Subroutine2
    701                  halToggleLed(LED_D3);    
   \                     ??CrossCallReturnLabel_7:
   \   0000013E   ........           BL       ?Subroutine3
    702          	halCommonDelayMilliseconds(500);
   \                     ??CrossCallReturnLabel_13:
   \   00000142   ........           BL       ?Subroutine2
    703                  halClearLed(LED_D3); 
   \                     ??CrossCallReturnLabel_6:
   \   00000146   ........           BL       ?Subroutine4
    704                  halCommonDelayMilliseconds(500);
   \                     ??CrossCallReturnLabel_17:
   \   0000014A   ........           BL       ?Subroutine2
    705                  halToggleLed(LED_D3);    
   \                     ??CrossCallReturnLabel_5:
   \   0000014E   ........           BL       ?Subroutine3
    706          	halCommonDelayMilliseconds(500);
   \                     ??CrossCallReturnLabel_12:
   \   00000152   4FF4FA70           MOV      R0,#+500
   \   00000156   E1E7               B.N      ??processRxPacket_23
    707                  halClearLed(LED_D3); 
    708                  break;
    709          #endif
    710              case (TRSEND_PACKET):
    711                  sendVddDataPacket(0x0000,0x0001,TRUE);
   \                     ??processRxPacket_22:
   \   00000158   0122               MOVS     R2,#+1
   \   0000015A   0121               MOVS     R1,#+1
   \   0000015C   0020               MOVS     R0,#+0
   \   0000015E   ........           BL       sendVddDataPacket
    712                  //printf("trsend success\r\n");
    713                  break;
   \   00000162   41E0               B.N      ??processRxPacket_5
    714          #ifdef SUN_ROLE
    715              case (SUN_SEARCH_PACKET): //executes on SUN
    716                RX_DETAILS(printf("SUN_SEARCH_PACKET\r\n");)
    717                //As a sun, if I have room in my planet table I transmit that
    718                //I am available.  Otherwise, I don't transmit anything.
    719                for(int i=0;i<PLANET_TABLE_SIZE;i++) {
    720                  if(!planetTable[i].active) {
    721                    //Length
    722                    packet[0] = (24+2);
    723                    packet[1] = FCF_DATA;
    724                    packet[2] = FCF_LONGDST + FCF_LONGSRC;
    725                    //New sequence number
    726                    currSeqNum++;
    727                    packet[3]=currSeqNum;
    728                    //dst PAN ID
    729                    packet[4] = (0xFFFF>>0)&0xFF;
    730                    packet[5] = (0xFFFF>>8)&0xFF;
    731                    //long dst addr
    732                    memcpy((packet+6), longSrcAddr, 8);
    733                    //src PAN ID
    734                    packet[14] = (ST_RadioGetPanId()>>0)&0xFF;
    735                    packet[15] = (ST_RadioGetPanId()>>8)&0xFF;
    736                    //Long src addr
    737                    memcpy((packet+16), ST_RadioGetEui64(), 8);
    738                    //payload type
    739                    packet[24] = PT_SUN_AVAILABLE;
    740                    //Broadcast response
    741                    enqueueTxPacket(TRUE, 0xFFFF, packet, 0);
    742                    break;
    743                  }
    744                }
    745                break;
    746          #endif
    747          #ifdef PLANET_ROLE
    748              case (SUN_AVAILABLE_PACKET): //executes on PLANET
    749                RX_DETAILS(printf("SUN_AVAILABLE_PACKET\r\n");)
    750                //If I already found a sun, ignore any subsequent available messages
    751                if(availableSunFound) {
   \                     ??processRxPacket_17:
   \   00000164   B878               LDRB     R0,[R7, #+2]
   \   00000166   0028               CMP      R0,#+0
   \   00000168   40D1               BNE.N    ??processRxPacket_0
    752                  return;
    753                }
    754                if(srcPanId!=MyPANID)
   \   0000016A   40F20110           MOVW     R0,#+257
   \   0000016E   8145               CMP      R9,R0
   \   00000170   3AD1               BNE.N    ??processRxPacket_5
    755                {
    756                   goto stopProcessing;
    757                }
    758                availableSunFound=TRUE;
   \   00000172   0121               MOVS     R1,#+1
   \   00000174   B970               STRB     R1,[R7, #+2]
    759                //As a planet, send a unicast join request to the sun.  But first,
    760                //switch to the sun's PAN in anticipation of completing the join.
    761                ST_RadioSetPanId(srcPanId);
   \   00000176   ........           BL       ST_RadioSetPanId
    762                //Length
    763                packet[0] = (22+2);
   \   0000017A   1820               MOVS     R0,#+24
   \   0000017C   8DF80800           STRB     R0,[SP, #+8]
    764                packet[1] = FCF_DATA + FCF_ACKREQ + FCF_INTRAPAN;
   \   00000180   02AC               ADD      R4,SP,#+8
   \   00000182   6120               MOVS     R0,#+97
   \   00000184   6070               STRB     R0,[R4, #+1]
    765                packet[2] = FCF_LONGDST + FCF_LONGSRC;
   \   00000186   CC20               MOVS     R0,#+204
   \   00000188   A070               STRB     R0,[R4, #+2]
    766                //New sequence number
    767                currSeqNum++;
   \   0000018A   7879               LDRB     R0,[R7, #+5]
   \   0000018C   401C               ADDS     R0,R0,#+1
   \   0000018E   7871               STRB     R0,[R7, #+5]
    768                packet[3]=currSeqNum;
   \   00000190   E070               STRB     R0,[R4, #+3]
    769                //dst PAN ID
    770                packet[4] = (ST_RadioGetPanId()>>0)&0xFF;
   \   00000192   ........           BL       ST_RadioGetPanId
   \   00000196   8DF80C00           STRB     R0,[SP, #+12]
    771                packet[5] = (ST_RadioGetPanId()>>8)&0xFF;
   \   0000019A   ........           BL       ST_RadioGetPanId
   \   0000019E   000A               LSRS     R0,R0,#+8
   \   000001A0   6071               STRB     R0,[R4, #+5]
    772                //long dst addr
    773                memcpy((packet+6), longSrcAddr, 8);
   \   000001A2   0822               MOVS     R2,#+8
   \   000001A4   00A9               ADD      R1,SP,#+0
   \   000001A6   0DF10E00           ADD      R0,SP,#+14
   \   000001AA   ........           BL       __aeabi_memcpy
    774                //long src addr
    775                memcpy((packet+14), ST_RadioGetEui64(), 8);
   \   000001AE   ........           BL       ST_RadioGetEui64
   \   000001B2   0146               MOV      R1,R0
   \   000001B4   0822               MOVS     R2,#+8
   \   000001B6   0DF11600           ADD      R0,SP,#+22
   \   000001BA   ........           BL       __aeabi_memcpy
    776                //payload type
    777                packet[22] = PT_JOIN_REQUEST;
   \   000001BE   0320               MOVS     R0,#+3
   \   000001C0   A075               STRB     R0,[R4, #+22]
    778                //Unicast join request
    779                enqueueTxPacket(TRUE, 0xFFFF, packet, 0);
   \   000001C2   0023               MOVS     R3,#+0
   \   000001C4   02AA               ADD      R2,SP,#+8
   \   000001C6   4146               MOV      R1,R8
   \   000001C8   0120               MOVS     R0,#+1
   \   000001CA   ........           BL       enqueueTxPacket
    780                break;
   \   000001CE   0BE0               B.N      ??processRxPacket_5
    781          #endif
    782          #ifdef SUN_ROLE
    783                case (JOIN_REQUEST_PACKET): //executes on SUN   // 收到请求加网的包
    784                RX_DETAILS(printf("JOIN_REQUEST_PACKET\r\n");)  //串口终端显示
    785                {
    786                  u8 flag=0;
    787                  u8 pt = PT_JOIN_DENIED;
    788                  u8 assignedShortId[2] = {0xFE, 0xFF};
    789                  //sun responds with unicast packet to long ID, acceptance, and the
    790                  //assigned short ID as payload.  denied packets have a short ID 0xFFFE
    791                  //Length
    792                  packet[0] = (24+2);
    793                  packet[1] = FCF_DATA + FCF_ACKREQ + FCF_INTRAPAN;
    794                  packet[2] = FCF_LONGDST + FCF_LONGSRC;
    795                  //New sequence number
    796                  currSeqNum++;
    797                  packet[3]=currSeqNum;
    798                  //dst PAN ID
    799                  packet[4] = (ST_RadioGetPanId()>>0)&0xFF;
    800                  packet[5] = (ST_RadioGetPanId()>>8)&0xFF;
    801                  //long dst addr
    802                  memcpy((packet+6), longSrcAddr, 8);
    803                  //long src addr
    804                  memcpy((packet+14), ST_RadioGetEui64(), 8);
    805                  
    806                  //sun looks for a free spot in the planet table
    807                  //if none, sun sends a unicast join denied, then idles
    808                  //if one, sun allocates the planet a short ID and sends a unicast
    809                  //  join accepted to long id with short id in payload, then idles
    810                  for(int i=0;i<PLANET_TABLE_SIZE;i++) {
    811                    u8 k=0;                                            //搜寻表中是否存在与加网节点相同的64位长地址，如果有则覆盖，若没有则继续遍历表
    812                    while(k<8)
    813                    { if(planetTable[i].longAddr[k]!=rxData.packet[14+k])
    814                        break;
    815                      k++;
    816                    }
    817                    if(k==8)
    818                    {
    819                      planetTable[i].active = TRUE;
    820                      shortAddrCounter++;
    821                      planetTable[i].shortAddr = shortAddrCounter;
    822                      //memcpy(planetTable[i].longAddr, longSrcAddr, 8);
    823                      pt = PT_JOIN_ACCEPTED;
    824                      assignedShortId[0] = (shortAddrCounter>>0)&0xFF;
    825                      assignedShortId[1] = (shortAddrCounter>>8)&0xFF;
    826                      printf("Join: Planet 0x%04X (index %d) has joined the network\r\n", shortAddrCounter, i);
    827                      flag=1;
    828                      break;
    829                    }
    830                  }
    831          
    832                  if(flag==0) //如果没有找到相同长地址，则查找空缺位置加进去
    833                  {
    834                 
    835                    for(int i=0;i<PLANET_TABLE_SIZE;i++)
    836                    {            
    837                      if(!planetTable[i].active) 
    838                      { 
    839                        planetTable[i].active = TRUE;
    840                        shortAddrCounter++;
    841                        planetTable[i].shortAddr = shortAddrCounter;
    842                        memcpy(planetTable[i].longAddr, longSrcAddr, 8);
    843                        pt = PT_JOIN_ACCEPTED;
    844                        assignedShortId[0] = (shortAddrCounter>>0)&0xFF;
    845                        assignedShortId[1] = (shortAddrCounter>>8)&0xFF;
    846                        printf("Join: Planet 0x%04X (index %d) has joined the network\r\n", shortAddrCounter, i);
    847                        break;
    848                      }
    849                    }
    850                  }
    851                  //payload type
    852                  packet[22] = pt;
    853                  packet[23] = assignedShortId[0];
    854                  packet[24] = assignedShortId[1];
    855                  //Unicast join request response
    856                  enqueueTxPacket(TRUE, 0xFFFF, packet, 0);
    857                }
    858                break;	
    859          #endif
    860          #ifdef PLANET_ROLE
    861              case (JOIN_ACCEPTED_PACKET): //executes on PLANET
    862                RX_DETAILS(printf("JOIN_ACCEPTED_PACKET\r\n");)
    863                //pan ID is already set during PT_SUN_AVAILABLE
    864                //set my short ID to the one assigned to me via the payload
    865                ST_RadioSetNodeId((rxData.packet[payloadStart+1]<<0)|(rxData.packet[payloadStart+2]<<8));
   \                     ??processRxPacket_18:
   \   000001D0   8178               LDRB     R1,[R0, #+2]
   \   000001D2   C078               LDRB     R0,[R0, #+3]
   \   000001D4   41EA0020           ORR      R0,R1,R0, LSL #+8
   \   000001D8   ........           BL       ST_RadioSetNodeId
    866                //join complete, halt the search
    867                networkJoinedStopSearching = TRUE;
   \   000001DC   0120               MOVS     R0,#+1
   \   000001DE   F870               STRB     R0,[R7, #+3]
    868                break;
   \   000001E0   02E0               B.N      ??processRxPacket_5
    869              case (JOIN_DENIED_PACKET): //executes on PLANET
    870                RX_DETAILS(printf("JOIN_DENIED_PACKET\r\n");)
    871                //return to broadcast PAN ID and try other suns/channels
    872                ST_RadioSetPanId(0xFFFF);
   \                     ??processRxPacket_19:
   \   000001E2   4046               MOV      R0,R8
   \   000001E4   ........           BL       ST_RadioSetPanId
    873                break;
    874          #endif
    875          #ifdef SUN_ROLE
    876              case (POLLING_PACKET): //executes on SUN
    877                RX_DETAILS(printf("POLLING_PACKET\r\n");)
    878                //Remember: ST_RadioDataPendingShortIdIsrCallback already did
    879                //the hard work of determining is the polling node has data.  If
    880                //ackFramePendingSet is true then we definitely have data from
    881                //the polling device.  Send the packet now.
    882                if(rxData.ackFramePendingSet) {
    883                  //When transmitting a packet in response to receiving a packet,
    884                  //we must wait 1ms to ensure our new transmission does not disrupt
    885                  //the ACK automatically sent in response to the reception.
    886                  halCommonDelayMilliseconds(1);
    887                  transmitIndirectPacketNow();
    888                }
    889                break;
    890                
    891              case (LEAVING_PACKET): //executes on SUN
    892                RX_DETAILS(printf("LEAVING_PACKET\r\n");)
    893                //Try to remove the child from the table (but don't worry about it
    894                //if we can't).
    895                for(int i=0;i<PLANET_TABLE_SIZE;i++) {
    896                  if(planetTable[i].active && (planetTable[i].shortAddr==shortSrcAddr)) {
    897                    printf("Leave: Planet 0x%04X (index %d) has left the network\r\n", shortSrcAddr, i);
    898                    planetTable[i].active = FALSE;
    899                    planetTable[i].shortAddr=0x0000;
    900                    memcpy(planetTable[i].longAddr, 0x0000000000000000, 8);
    901                    break;
    902                  }
    903                }
    904                break;
    905          #endif     
    906              default:
    907                RX_DETAILS(printf("Unknown payload type\r\n");)
    908                goto stopProcessing;
    909            }
    910            
    911          stopProcessing:
    912            rxData.packetBeingProcessed = FALSE;
   \                     ??processRxPacket_5:
   \   000001E8   0020               MOVS     R0,#+0
   \   000001EA   2870               STRB     R0,[R5, #+0]
    913          }
   \                     ??processRxPacket_0:
   \   000001EC   23B0               ADD      SP,SP,#+140
   \   000001EE   BDE8F08F           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0E20               MOVS     R0,#+14
   \   00000002   ........           B.W      halClearLed

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0E20               MOVS     R0,#+14
   \   00000002   ........           B.W      halToggleLed

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   4FF4FA70           MOV      R0,#+500
   \   00000004   ........           B.W      halCommonDelayMilliseconds
    914          
    915          //This callback must be defined.  This callback is enabled using the function
    916          //ST_RadioEnableOverflowNotification but should never be called by the phy
    917          //library.  If it is called, something went wront with receive.  Probably
    918          //long latency.

   \                                 In section .text, align 2, keep-with-next
    919          void ST_RadioOverflowIsrCallback(void)
    920          {
   \                     ST_RadioOverflowIsrCallback:
   \   00000000   80B5               PUSH     {R7,LR}
    921            assert(FALSE);
   \   00000002   40F29932           MOVW     R2,#+921
   \   00000006   ........           ADR.W    R1,`?<Constant "E:\\\\\\312\\265\\321\\3514 16\\265\\343\\3`
   \   0000000A   ........           ADR.W    R0,`?<Constant "FALSE">`
   \   0000000E   ........           BL       __aeabi_assert
   \   00000012   BDE80140           POP      {R0,LR}
   \   00000016   ........           B.W      __iar_EmptyStepPoint
    922          }
    923          
    924          //Command invoked with 'f'.  Form a network and become a sun.

   \                                 In section .text, align 2, keep-with-next
    925          void formCmd(void)
    926          {
   \                     formCmd:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
    927            u8 i;
    928            u8 searchChannel;
    929            s8 searchEnergy;
    930            u8 minEnergyChannel = ST_MIN_802_15_4_CHANNEL_NUMBER;
   \   00000004   0B24               MOVS     R4,#+11
    931            s8 minEnergy = 127;
   \   00000006   4FF07F0B           MOV      R11,#+127
    932            StStatus status = ST_SUCCESS;
    933          
    934            printf("\r\n");
   \   0000000A   ....               ADR.N    R0,??DataTable38  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000000C   ........           BL       printf
    935            if(activeInNetwork) {
   \   00000010   ........           LDR.W    R6,??DataTable41_1
   \   00000014   7078               LDRB     R0,[R6, #+1]
   \   00000016   20B1               CBZ.N    R0,??formCmd_0
    936              printf("Already in network\r\n");
   \   00000018   ........           ADR.W    R0,`?<Constant "Already in network\\r\\n">`
   \   0000001C   ........           BL       printf
    937              return;
   \   00000020   4AE0               B.N      ??formCmd_1
    938            }
    939            printf("Inactive node forming network and becoming the sun\r\n");
   \                     ??formCmd_0:
   \   00000022   ........           ADR.W    R0,`?<Constant "Inactive node forming...">`
   \   00000026   ........           BL       printf
    940            
    941            initNetworkState();
   \   0000002A   ........           BL       initNetworkState
    942            
    943            TURN_RADIO_ON();
   \   0000002E   ........           BL       ST_RadioWake
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   3070               STRB     R0,[R6, #+0]
    944            
    945            //Loop across all channels
    946            for(searchChannel=ST_MIN_802_15_4_CHANNEL_NUMBER;
   \   00000036   ........           BL       ?Subroutine10
    947                searchChannel<=ST_MAX_802_15_4_CHANNEL_NUMBER;
    948                searchChannel++) {
    949              s8 maxEnergy=-128;
   \                     ??CrossCallReturnLabel_41:
   \   0000003A   6FF07F0A           MVN      R10,#+127
    950              status = ST_RadioSetChannel(searchChannel);
    951              assert(status==ST_SUCCESS);
   \   0000003E   3846               MOV      R0,R7
   \   00000040   ........           BL       ST_RadioSetChannel
   \   00000044   28B1               CBZ.N    R0,??formCmd_2
   \   00000046   40F2B732           MOVW     R2,#+951
   \   0000004A   ........           BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_40:
   \   0000004E   ........           BL       __iar_EmptyStepPoint
    952              
    953              for(i=0;i<ENERGY_SAMPLES_COUNT;i++) {
   \                     ??formCmd_2:
   \   00000052   2025               MOVS     R5,#+32
    954                //Wait 16 symbol periods for energy readings to settle.
    955                halCommonDelayMicroseconds(256);
   \                     ??formCmd_3:
   \   00000054   4FF48070           MOV      R0,#+256
   \   00000058   ........           BL       halCommonDelayMicroseconds
    956                //Find the max energy for this channel
    957                searchEnergy = ST_RadioEnergyDetection();
   \   0000005C   ........           BL       ST_RadioEnergyDetection
    958                if(searchEnergy > maxEnergy) {
   \   00000060   8245               CMP      R10,R0
   \   00000062   B8BF               IT       LT 
   \   00000064   8246               MOVLT    R10,R0
    959                  maxEnergy = searchEnergy;
    960                }
    961              }
   \   00000066   6D1E               SUBS     R5,R5,#+1
   \   00000068   F4D1               BNE.N    ??formCmd_3
    962              //Find the channel with the lowest max energy
    963              if(maxEnergy < minEnergy) {
   \   0000006A   DA45               CMP      R10,R11
   \   0000006C   BCBF               ITT      LT 
   \   0000006E   D346               MOVLT    R11,R10
   \   00000070   3C46               MOVLT    R4,R7
    964                minEnergy = maxEnergy;
    965                minEnergyChannel = searchChannel;
    966              }
    967            }
   \   00000072   7F1C               ADDS     R7,R7,#+1
   \   00000074   1B2F               CMP      R7,#+27
   \   00000076   E0D3               BCC.N    ??CrossCallReturnLabel_41
    968            
    969            //Select the channel with the lowest max energy
    970            status = ST_RadioSetChannel(minEnergyChannel);
    971            assert(status==ST_SUCCESS);
   \   00000078   E0B2               UXTB     R0,R4
   \   0000007A   ........           BL       ST_RadioSetChannel
   \   0000007E   28B1               CBZ.N    R0,??formCmd_4
   \   00000080   40F2CB32           MOVW     R2,#+971
   \   00000084   ........           BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_39:
   \   00000088   ........           BL       __iar_EmptyStepPoint
    972            printf("Selected channel %d with energy %d dBm\r\n",
    973                   minEnergyChannel, minEnergy);
   \                     ??formCmd_4:
   \   0000008C   5A46               MOV      R2,R11
   \   0000008E   2146               MOV      R1,R4
   \   00000090   ........           ADR.W    R0,`?<Constant "Selected channel %d w...">`
   \   00000094   ........           BL       printf
    974            
    975            //Give our new network a random PAN ID
    976            ST_RadioSetPanId(MyPANID);
   \   00000098   40F20110           MOVW     R0,#+257
   \   0000009C   ........           BL       ST_RadioSetPanId
    977            printf("Randomly chose PAN ID: 0x%04X\r\n", ST_RadioGetPanId());
   \   000000A0   ........           BL       ST_RadioGetPanId
   \   000000A4   0146               MOV      R1,R0
   \   000000A6   ........           ADR.W    R0,`?<Constant "Randomly chose PAN ID...">`
   \   000000AA   ........           BL       printf
    978            
    979            //When forming a network, the sun always assigns itself Node ID 0.
    980            //(shortAddrCounter is initialized to 0 by initNetworkState)
    981            ST_RadioSetNodeId(shortAddrCounter);
   \   000000AE   3079               LDRB     R0,[R6, #+4]
   \   000000B0   ........           BL       ST_RadioSetNodeId
    982            
    983            //Address filtering was already enabled during  app initialization
    984            //Planet table was already cleared out by initNetworkState()
    985            
    986            //The new network is now formed and ready
    987            activeInNetwork = TRUE;
   \   000000B4   0120               MOVS     R0,#+1
   \   000000B6   7070               STRB     R0,[R6, #+1]
    988          }
   \                     ??formCmd_1:
   \   000000B8   BDE8F18F           POP      {R0,R4-R11,PC}   ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0B27               MOVS     R7,#+11
   \   00000002   ........           ADR.W    R8,`?<Constant "status==ST_SUCCESS">`
   \   00000006   ........           ADR.W    R9,`?<Constant "E:\\\\\\312\\265\\321\\3514 16\\265\\343\\3`
   \   0000000A   7047               BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   4946               MOV      R1,R9
   \   00000002   4046               MOV      R0,R8
   \   00000004   ........           B.W      __aeabi_assert
    989          
    990          
    991          //Command invoked with 'j'.  Join a network and become a planet.  After
    992          //the first packet is transmitted here, the rest of the join process
    993          //is handled by processRxPacket.

   \                                 In section .text, align 2, keep-with-next
    994          void joinCmd(void)
    995          {
   \                     joinCmd:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   A1B0               SUB      SP,SP,#+132
    996            u8 packet[128];
    997            u8 searchChannel;
    998            u32 lastTime;
    999            StStatus status = ST_SUCCESS;
   1000          
   1001            printf("\r\n");
   \   00000006   ........           BL       ?Subroutine8
   1002            if(activeInNetwork) {
   \                     ??CrossCallReturnLabel_37:
   \   0000000A   ........           LDR.W    R5,??DataTable41_1
   \   0000000E   6878               LDRB     R0,[R5, #+1]
   \   00000010   20B1               CBZ.N    R0,??joinCmd_0
   1003              printf("Already in network\r\n");
   \   00000012   ........           ADR.W    R0,`?<Constant "Already in network\\r\\n">`
   \   00000016   ........           BL       printf
   1004              return;
   \   0000001A   81E0               B.N      ??joinCmd_1
   1005            }
   1006            printf("Inactive node joining network and becoming a planet\r\n");
   \                     ??joinCmd_0:
   \   0000001C   ........           ADR.W    R0,`?<Constant "Inactive node joining...">`
   \   00000020   ........           BL       printf
   1007            
   1008            initNetworkState();
   \   00000024   ........           BL       initNetworkState
   1009            
   1010            TURN_RADIO_ON();
   \   00000028   ........           BL       ST_RadioWake
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   2870               STRB     R0,[R5, #+0]
   1011            //While we're not joined to a network yet, the receive ISR needs to be able
   1012            //to process packets.  This state will either stay TRUE if the join
   1013            //succeeds or return to FALSE if it doesn't.
   1014            activeInNetwork = TRUE;
   \   00000030   0120               MOVS     R0,#+1
   \   00000032   6870               STRB     R0,[R5, #+1]
   1015            
   1016            //Length
   1017            packet[0] = (18+2);
   \   00000034   1420               MOVS     R0,#+20
   \   00000036   8DF80000           STRB     R0,[SP, #+0]
   1018            packet[1] = FCF_DATA;
   \   0000003A   00AE               ADD      R6,SP,#+0
   \   0000003C   0120               MOVS     R0,#+1
   \   0000003E   7070               STRB     R0,[R6, #+1]
   1019            packet[2] = FCF_SHORTDST + FCF_LONGSRC;
   \   00000040   C820               MOVS     R0,#+200
   \   00000042   B070               STRB     R0,[R6, #+2]
   1020            //packet[3] - New sequence number is handled immediately before transmission
   1021            //dst PAN ID
   1022            packet[4] = (0xFFFF>>0)&0xFF;
   \   00000044   FF20               MOVS     R0,#+255
   \   00000046   8DF80400           STRB     R0,[SP, #+4]
   1023            packet[5] = (0xFFFF>>8)&0xFF;
   \   0000004A   7071               STRB     R0,[R6, #+5]
   1024            //Short dst addr
   1025            packet[6] = (0xFFFF>>0)&0xFF;
   \   0000004C   B071               STRB     R0,[R6, #+6]
   1026            packet[7] = (0xFFFF>>8)&0xFF;
   \   0000004E   8DF80700           STRB     R0,[SP, #+7]
   1027            //src PAN ID
   1028            packet[8] = (0xFFFF>>0)&0xFF;
   \   00000052   3072               STRB     R0,[R6, #+8]
   1029            packet[9] = (0xFFFF>>8)&0xFF;
   \   00000054   8DF80900           STRB     R0,[SP, #+9]
   1030            //Long src addr
   1031            memcpy((packet+10), ST_RadioGetEui64(), 8);
   \   00000058   ........           BL       ST_RadioGetEui64
   \   0000005C   0822               MOVS     R2,#+8
   \   0000005E   0146               MOV      R1,R0
   \   00000060   0DF10A00           ADD      R0,SP,#+10
   \   00000064   ........           BL       __aeabi_memcpy
   1032            //payload type
   1033            packet[18] = PT_SUN_SEARCH;
   \   00000068   0120               MOVS     R0,#+1
   \   0000006A   8DF81200           STRB     R0,[SP, #+18]
   1034            
   1035            printf("Trying channel");
   \   0000006E   ........           ADR.W    R0,`?<Constant "Trying channel">`
   \   00000072   ........           BL       printf
   1036            //Loop across all channels
   1037            for(searchChannel=ST_MIN_802_15_4_CHANNEL_NUMBER;
   \   00000076   ........           BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_42:
   \   0000007A   ........           ADR.W    R10,??DataTable40  ;; " %d"
   1038                searchChannel<=ST_MAX_802_15_4_CHANNEL_NUMBER;
   1039                searchChannel++) {
   1040              //Since we wait 200ms per channel while trying to join, the watchdog
   1041              //must be reset to prevent it from triggering.
   1042              halResetWatchdog();
   \                     ??joinCmd_2:
   \   0000007E   ........           BL       halInternalResetWatchDog
   1043              
   1044              printf(" %d", searchChannel);
   \   00000082   3946               MOV      R1,R7
   \   00000084   5046               MOV      R0,R10
   \   00000086   ........           BL       printf
   1045              status = ST_RadioSetChannel(searchChannel);
   1046              assert(status==ST_SUCCESS);
   \   0000008A   3846               MOV      R0,R7
   \   0000008C   ........           BL       ST_RadioSetChannel
   \   00000090   28B1               CBZ.N    R0,??joinCmd_3
   \   00000092   40F21642           MOVW     R2,#+1046
   \   00000096   ........           BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_38:
   \   0000009A   ........           BL       __iar_EmptyStepPoint
   1047          
   1048              //Populate the join packet with a new sequence number
   1049              currSeqNum++;
   \                     ??joinCmd_3:
   \   0000009E   6879               LDRB     R0,[R5, #+5]
   \   000000A0   401C               ADDS     R0,R0,#+1
   \   000000A2   6871               STRB     R0,[R5, #+5]
   1050              packet[3]=currSeqNum;
   \   000000A4   F070               STRB     R0,[R6, #+3]
   1051              
   1052              //Broadcast searching for any suns
   1053              availableSunFound = FALSE;
   \   000000A6   0020               MOVS     R0,#+0
   \   000000A8   A870               STRB     R0,[R5, #+2]
   1054              enqueueTxPacket(TRUE, 0xFFFF, packet, 0);
   \   000000AA   0023               MOVS     R3,#+0
   \   000000AC   00AA               ADD      R2,SP,#+0
   \   000000AE   4FF6FF71           MOVW     R1,#+65535
   \   000000B2   0120               MOVS     R0,#+1
   \   000000B4   ........           BL       enqueueTxPacket
   1055              
   1056              //Dwell for 200ms trying to complete a join with any sun on this channel
   1057              lastTime = halCommonGetInt32uMillisecondTick();
   \   000000B8   ........           BL       halCommonGetInt32uMillisecondTick
   \   000000BC   8346               MOV      R11,R0
   1058              do {
   1059                processRxPacket();
   \                     ??joinCmd_4:
   \   000000BE   ........           BL       processRxPacket
   1060                txTick();
   \   000000C2   ........           BL       txTick
   1061              } while(elapsedTimeInt32u(lastTime, halCommonGetInt32uMillisecondTick())<
   1062                      200);
   \   000000C6   ........           BL       halCommonGetInt32uMillisecondTick
   \   000000CA   A0EB0B00           SUB      R0,R0,R11
   \   000000CE   C828               CMP      R0,#+200
   \   000000D0   F5D3               BCC.N    ??joinCmd_4
   1063              
   1064              //If our join was accepted and we've successfully transmitted our join
   1065              //acceptence acknowledgment, we can exit the join channel search.
   1066              if(networkJoinedStopSearching) {
   \   000000D2   E878               LDRB     R0,[R5, #+3]
   \   000000D4   C0B1               CBZ.N    R0,??joinCmd_5
   1067                printf("\r\n");
   \   000000D6   ........           BL       ??Subroutine8_0
   1068                printf("Joined on channel %d with PAN ID 0x%04X.  My ID is now 0x%04X.\r\n",
   1069                       ST_RadioGetChannel(),
   1070                       ST_RadioGetPanId(),
   1071                       ST_RadioGetNodeId());
   \                     ??CrossCallReturnLabel_35:
   \   000000DA   ........           BL       ST_RadioGetNodeId
   \   000000DE   0446               MOV      R4,R0
   \   000000E0   ........           BL       ST_RadioGetPanId
   \   000000E4   0646               MOV      R6,R0
   \   000000E6   ........           BL       ST_RadioGetChannel
   \   000000EA   0146               MOV      R1,R0
   \   000000EC   2346               MOV      R3,R4
   \   000000EE   3246               MOV      R2,R6
   \   000000F0   ........           ADR.W    R0,`?<Constant "Joined on channel %d ...">`
   \   000000F4   ........           BL       printf
   1072                activeInNetwork = TRUE;
   \   000000F8   0120               MOVS     R0,#+1
   \   000000FA   6870               STRB     R0,[R5, #+1]
   1073                //shortaddr[currnum++]=ST_RadioGetNodeId();//!!!!!!!!!!11.22 20:41
   1074          #ifdef PLANET_ROLE
   1075                autoSendRate = 60;
   \   000000FC   3C20               MOVS     R0,#+60
   \   000000FE   A871               STRB     R0,[R5, #+6]
   1076                halSetLed(LED_D4);
   \   00000100   0D20               MOVS     R0,#+13
   \   00000102   ........           BL       halSetLed
   1077               // shortaddr[currnum++]=ST_RadioGetNodeId();//!!!!!!!!!!11.22 20:41
   1078          #endif
   1079                return;
   \   00000106   0BE0               B.N      ??joinCmd_1
   1080              }
   1081            }
   \                     ??joinCmd_5:
   \   00000108   7F1C               ADDS     R7,R7,#+1
   \   0000010A   FFB2               UXTB     R7,R7
   \   0000010C   1B2F               CMP      R7,#+27
   \   0000010E   B6D3               BCC.N    ??joinCmd_2
   1082            
   1083            printf("\r\n");
   \   00000110   ........           BL       ??Subroutine8_0
   1084            printf("Did not join.  Returning to inactive state.\r\n");
   \                     ??CrossCallReturnLabel_34:
   \   00000114   ........           ADR.W    R0,`?<Constant "Did not join.  Return...">`
   \   00000118   ........           BL       printf
   1085            //Getting here means we did not successful join a network.
   1086            activeInNetwork = FALSE;
   \   0000011C   0020               MOVS     R0,#+0
   \   0000011E   6870               STRB     R0,[R5, #+1]
   1087          }
   \                     ??joinCmd_1:
   \   00000120   21B0               ADD      SP,SP,#+132
   \   00000122   BDE8F08F           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   ....               ADR.N    R4,??DataTable41  ;; 0x0D, 0x0A, 0x00, 0x00
   \                     ??Subroutine8_0:
   \   00000002   2046               MOV      R0,R4
   \   00000004   ........           B.W      printf
   1088          /**************************************************************************
   1089          Derek
   1090          *************************************************************************/
   1091          #ifdef SUN_ROLE  
   1092          boolean fer = TRUE;
   1093          void sendSync()
   1094          {
   1095            u16 dstShortAddr=0xffff;//将此处的地址改为0xffff，即广播地址
   1096            u16 vddMillivolts = 0x0000;
   1097            boolean sendDirectly = TRUE;
   1098            
   1099            u8 packet[128];
   1100            
   1101            //Length
   1102            packet[0] = (19+2);
   1103            packet[1] = FCF_DATA + FCF_ACKREQ + FCF_INTRAPAN;
   1104            packet[2] = FCF_SHORTDST + FCF_SHORTSRC;
   1105            //New sequence number
   1106            currSeqNum++;
   1107            packet[3] = currSeqNum;
   1108            //dst PAN ID
   1109            packet[4] = (ST_RadioGetPanId()>>0)&0xFF;
   1110            packet[5] = (ST_RadioGetPanId()>>8)&0xFF;
   1111            //Short dst addr
   1112            packet[6] = (dstShortAddr>>0)&0xFF;
   1113            packet[7] = (dstShortAddr>>8)&0xFF;
   1114            //Short src addr
   1115            packet[8] = (ST_RadioGetNodeId()>>0)&0xFF;
   1116            packet[9] = (ST_RadioGetNodeId()>>8)&0xFF;
   1117            //payload type
   1118            packet[10] = PT_GENERIC_DATA;
   1119            //my VDD_PADS
   1120            packet[11] = (vddMillivolts>>0)&0xFF;
   1121            packet[12] = (vddMillivolts>>8)&0xFF;
   1122            //Derek: Sync 消息的标识
   1123           //if(fer)
   1124           //{
   1125             packet[13]='S';
   1126             packet[14]=0;
   1127             packet[15]=0;
   1128             packet[16]=0;
   1129             packet[17]=0;
   1130             //fer=!fer;
   1131           //}
   1132           /*else
   1133           {
   1134             packet[13]='L';
   1135             packet[14]=(back>>0)&0xff;
   1136             packet[15]=(back>>8)&0xff;
   1137             packet[16]=(back>>16)&0xff;
   1138             packet[17]=(back>>24)&0xff;
   1139              
   1140             back=-1;
   1141             fer=!fer;
   1142           }*/
   1143            //Zero out the TX SFD payload.  The MSB is used to indicate SFD valid.
   1144            packet[18] = 0;
   1145            packet[19] = 0;
   1146            packet[20] = 0;
   1147            /*printf("\r\n");
   1148            printf("syn packet:\r\n");
   1149            u8 i;
   1150            for(i=0;i<=packet[0];i++) {
   1151                  printf("%02X ",packet[i]);
   1152                }
   1153            printf("\r\n");
   1154            */
   1155            T1=halCommonGetInt32uMillisecondTick();
   1156            
   1157            enqueueTxPacket(sendDirectly, dstShortAddr, packet, 18);
   1158            //printf("send Sync already!\r\n");
   1159          }
   1160          
   1161          #endif
   1162          #ifdef PLANET_ROLE
   1163          //reply

   \                                 In section .text, align 2, keep-with-next
   1164          void replySync()
   1165          {
   \                     replySync:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   A1B0               SUB      SP,SP,#+132
   1166            u16 vddMillivolts=0xffff;
   1167            u16 dstShortAddr = 0x0000;
   1168            boolean sendDirectly = TRUE;
   1169            //
   1170            u8 not[4];
   1171            not[0]='r';
   \   00000004   7220               MOVS     R0,#+114
   \   00000006   8DF80000           STRB     R0,[SP, #+0]
   1172            not[1]='p';
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   7021               MOVS     R1,#+112
   \   0000000E   4170               STRB     R1,[R0, #+1]
   1173            not[2]='0';//LGZ：0对应planet0，1对应planet1，2对应planet2，3对应planet3
   \   00000010   3021               MOVS     R1,#+48
   \   00000012   8170               STRB     R1,[R0, #+2]
   1174            not[3]='y';
   \   00000014   7921               MOVS     R1,#+121
   \   00000016   C170               STRB     R1,[R0, #+3]
   1175            u8 packet[128];
   1176            
   1177            //Length
   1178            packet[0] = (27+2);
   \   00000018   1D20               MOVS     R0,#+29
   \   0000001A   8DF80400           STRB     R0,[SP, #+4]
   1179            packet[1] = FCF_DATA + FCF_ACKREQ + FCF_INTRAPAN;
   \   0000001E   01AC               ADD      R4,SP,#+4
   \   00000020   6120               MOVS     R0,#+97
   \   00000022   6070               STRB     R0,[R4, #+1]
   1180            packet[2] = FCF_SHORTDST + FCF_SHORTSRC;
   \   00000024   8820               MOVS     R0,#+136
   \   00000026   A070               STRB     R0,[R4, #+2]
   1181            //New sequence number
   1182            currSeqNum++;
   \   00000028   ....               LDR.N    R5,??DataTable41_1
   \   0000002A   6879               LDRB     R0,[R5, #+5]
   \   0000002C   401C               ADDS     R0,R0,#+1
   \   0000002E   6871               STRB     R0,[R5, #+5]
   1183            packet[3] = currSeqNum;
   \   00000030   E070               STRB     R0,[R4, #+3]
   1184            //dst PAN ID
   1185            packet[4] = (ST_RadioGetPanId()>>0)&0xFF;
   \   00000032   ........           BL       ST_RadioGetPanId
   \   00000036   2071               STRB     R0,[R4, #+4]
   1186            packet[5] = (ST_RadioGetPanId()>>8)&0xFF;
   \   00000038   ........           BL       ST_RadioGetPanId
   \   0000003C   000A               LSRS     R0,R0,#+8
   \   0000003E   6071               STRB     R0,[R4, #+5]
   1187            //Short dst addr
   1188            packet[6] = (dstShortAddr>>0)&0xFF;
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   ADF80A00           STRH     R0,[SP, #+10]
   1189            packet[7] = (dstShortAddr>>8)&0xFF;
   1190            //Short src addr
   1191            packet[8] = (ST_RadioGetNodeId()>>0)&0xFF;
   \   00000046   ........           BL       ST_RadioGetNodeId
   \   0000004A   2072               STRB     R0,[R4, #+8]
   1192            packet[9] = (ST_RadioGetNodeId()>>8)&0xFF;
   \   0000004C   ........           BL       ST_RadioGetNodeId
   \   00000050   000A               LSRS     R0,R0,#+8
   \   00000052   8DF80D00           STRB     R0,[SP, #+13]
   1193            //payload type
   1194            packet[10] = PT_TRSEND;
   \   00000056   0A20               MOVS     R0,#+10
   \   00000058   A072               STRB     R0,[R4, #+10]
   1195            //my VDD_PADS
   1196            packet[11] = (vddMillivolts>>0)&0xFF;
   \   0000005A   FF20               MOVS     R0,#+255
   \   0000005C   8DF80F00           STRB     R0,[SP, #+15]
   1197            packet[12] = (vddMillivolts>>8)&0xFF;
   \   00000060   2073               STRB     R0,[R4, #+12]
   1198            //Zero out the TX SFD payload.  The MSB is used to indicate SFD valid.
   1199            
   1200            for(int i=0; i < 4; i++)
   1201              packet[13+i]=not[i];
   \   00000062   0422               MOVS     R2,#+4
   \   00000064   00A9               ADD      R1,SP,#+0
   \   00000066   0DF11100           ADD      R0,SP,#+17
   \   0000006A   ........           BL       __aeabi_memcpy
   1202            
   1203            packet[17]=(T2>>0)&0xff;
   \   0000006E   A868               LDR      R0,[R5, #+8]
   \   00000070   8DF81500           STRB     R0,[SP, #+21]
   1204            packet[18]=(T2>>8)&0xff;
   \   00000074   010A               LSRS     R1,R0,#+8
   \   00000076   8DF81610           STRB     R1,[SP, #+22]
   1205            packet[19]=(T2>>16)&0xff;
   \   0000007A   010C               LSRS     R1,R0,#+16
   \   0000007C   8DF81710           STRB     R1,[SP, #+23]
   1206            packet[20]=(T2>>24)&0xff;
   \   00000080   000E               LSRS     R0,R0,#+24
   \   00000082   8DF81800           STRB     R0,[SP, #+24]
   1207            T3=halCommonGetInt32uMillisecondTick();
   \   00000086   ........           BL       halCommonGetInt32uMillisecondTick
   \   0000008A   E860               STR      R0,[R5, #+12]
   1208            packet[21]=(T3>>0)&0xff;
   \   0000008C   8DF81900           STRB     R0,[SP, #+25]
   1209            packet[22]=(T3>>8)&0xff;
   \   00000090   010A               LSRS     R1,R0,#+8
   \   00000092   8DF81A10           STRB     R1,[SP, #+26]
   1210            packet[23]=(T3>>16)&0xff;
   \   00000096   010C               LSRS     R1,R0,#+16
   \   00000098   8DF81B10           STRB     R1,[SP, #+27]
   1211            packet[24]=(T3>>24)&0xff;
   \   0000009C   000E               LSRS     R0,R0,#+24
   \   0000009E   2076               STRB     R0,[R4, #+24]
   1212            
   1213            packet[25] = 0;
   \   000000A0   0020               MOVS     R0,#+0
   \   000000A2   6076               STRB     R0,[R4, #+25]
   1214            packet[26] = 0;
   \   000000A4   ADF81E00           STRH     R0,[SP, #+30]
   1215            packet[27] = 0;
   1216            //halCommonDelayMilliseconds(200);//单位ms//LGZ：0ms对应planet0，30ms对应planet1，60ms对应planet2，90ms对应planet3
   1217            
   1218            enqueueTxPacket(sendDirectly, dstShortAddr, packet, 25);
   \   000000A8   1923               MOVS     R3,#+25
   \   000000AA   01AA               ADD      R2,SP,#+4
   \   000000AC   0021               MOVS     R1,#+0
   \   000000AE   0120               MOVS     R0,#+1
   \   000000B0   ........           BL       enqueueTxPacket
   1219           // printf("send Reply already!\r\n");
   1220          }
   \   000000B4   21B0               ADD      SP,SP,#+132
   \   000000B6   30BD               POP      {R4,R5,PC}       ;; return
   1221          
   1222          #endif
   1223          /**************************************************************************
   1224          功能描述：向参数中传入的地址发送类型负载类型为PT_GENERIC_DATA，类型为GENERIC_DATA_PACKET的数据包
   1225          输入参数：vddMillivolts为发送的16位数据，dstShortAddr为目的地址，sendDirectly为调用不同发送函数的表示符。
   1226          输出参数：无
   1227          *************************************************************************/
   1228          
   1229          //This function is indirectly invoked by the command 's' to send a data packet.

   \                                 In section .text, align 2, keep-with-next
   1230          void sendVddDataPacket(u16 vddMillivolts,
   1231                                 u16 dstShortAddr,
   1232                                 boolean sendDirectly)
   1233          {
   \                     sendVddDataPacket:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   A1B0               SUB      SP,SP,#+132
   \   00000004   ........           BL       ?Subroutine5
   1234            u8 packet[128];
   1235            
   1236            //Length
   1237            packet[0] = (15+2);
   1238            packet[1] = FCF_DATA + FCF_ACKREQ + FCF_INTRAPAN;
   1239            packet[2] = FCF_SHORTDST + FCF_SHORTSRC;
   1240            //New sequence number
   1241            currSeqNum++;
   1242            packet[3] = currSeqNum;
   1243            //dst PAN ID
   1244            packet[4] = (ST_RadioGetPanId()>>0)&0xFF;
   \                     ??CrossCallReturnLabel_24:
   \   00000008   ........           BL       ?Subroutine7
   1245            packet[5] = (ST_RadioGetPanId()>>8)&0xFF;
   \                     ??CrossCallReturnLabel_32:
   \   0000000C   ........           BL       ?Subroutine6
   1246            //Short dst addr
   1247            packet[6] = (dstShortAddr>>0)&0xFF;
   1248            packet[7] = (dstShortAddr>>8)&0xFF;
   1249            //Short src addr
   1250            packet[8] = (ST_RadioGetNodeId()>>0)&0xFF;
   \                     ??CrossCallReturnLabel_28:
   \   00000010   ........           BL       ?Subroutine11
   1251            packet[9] = (ST_RadioGetNodeId()>>8)&0xFF;
   \                     ??CrossCallReturnLabel_46:
   \   00000014   000A               LSRS     R0,R0,#+8
   \   00000016   8DF80900           STRB     R0,[SP, #+9]
   1252            //payload type
   1253            packet[10] = PT_GENERIC_DATA;
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   ........           BL       ?Subroutine1
   1254            //my VDD_PADS
   1255            packet[11] = (vddMillivolts>>0)&0xFF;
   1256            packet[12] = (vddMillivolts>>8)&0xFF;
   1257            //Derek
   1258            
   1259            //Zero out the TX SFD payload.  The MSB is used to indicate SFD valid.
   1260            packet[13] = 0;
   1261            packet[14] = 0;
   1262            packet[15] = 0;
   1263            
   1264            enqueueTxPacket(sendDirectly, dstShortAddr, packet, 13);
   1265           // printf("send already!\r\n");
   1266          }
   \                     ??CrossCallReturnLabel_2:
   \   00000020   21B0               ADD      SP,SP,#+132
   \   00000022   F0BD               POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   8DF80A00           STRB     R0,[SP, #+10]
   \   00000004   8DF80B40           STRB     R4,[SP, #+11]
   \   00000008   200A               LSRS     R0,R4,#+8
   \   0000000A   8DF80C00           STRB     R0,[SP, #+12]
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   7873               STRB     R0,[R7, #+13]
   \   00000012   ADF80E00           STRH     R0,[SP, #+14]
   \   00000016   0D23               MOVS     R3,#+13
   \   00000018   00AA               ADD      R2,SP,#+0
   \   0000001A   2946               MOV      R1,R5
   \   0000001C   3046               MOV      R0,R6
   \   0000001E   ........           B.W      enqueueTxPacket

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   3872               STRB     R0,[R7, #+8]
   \   00000002   ........           B.W      ST_RadioGetNodeId

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   8DF80400           STRB     R0,[SP, #+4]
   \   00000004   ........           B.W      ST_RadioGetPanId

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   000A               LSRS     R0,R0,#+8
   \   00000002   7871               STRB     R0,[R7, #+5]
   \   00000004   8DF80650           STRB     R5,[SP, #+6]
   \   00000008   280A               LSRS     R0,R5,#+8
   \   0000000A   8DF80700           STRB     R0,[SP, #+7]
   \   0000000E   ........           B.W      ST_RadioGetNodeId

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0446               MOV      R4,R0
   \   00000002   0D46               MOV      R5,R1
   \   00000004   1646               MOV      R6,R2
   \   00000006   1120               MOVS     R0,#+17
   \   00000008   8DF80000           STRB     R0,[SP, #+0]
   \   0000000C   00AF               ADD      R7,SP,#+0
   \   0000000E   6120               MOVS     R0,#+97
   \   00000010   7870               STRB     R0,[R7, #+1]
   \   00000012   8820               MOVS     R0,#+136
   \   00000014   8DF80200           STRB     R0,[SP, #+2]
   \   00000018   ....               LDR.N    R0,??DataTable41_1
   \   0000001A   4179               LDRB     R1,[R0, #+5]
   \   0000001C   491C               ADDS     R1,R1,#+1
   \   0000001E   4171               STRB     R1,[R0, #+5]
   \   00000020   8DF80310           STRB     R1,[SP, #+3]
   \   00000024   ........           B.W      ST_RadioGetPanId
   1267          
   1268          /**************************************************************************
   1269          功能描述：向参数中传入的地址发送类型负载类型为PT_SLEEPING，类型为SYN_SLEEPING_WAITTIME的数据包
   1270          输入参数：vddMillivolts为发送的16位数据，dstShortAddr为目的地址，sendDirectly为调用不同发送函数的表示符。
   1271          输出参数：无
   1272          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1273          void sendVddDataPacket1(u16 vddMillivolts,u16 dstShortAddr,boolean sendDirectly)
   1274          {
   \                     sendVddDataPacket1:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   A1B0               SUB      SP,SP,#+132
   \   00000004   ........           BL       ?Subroutine5
   1275            u8 packet[128];
   1276            
   1277            //Length
   1278            packet[0] = (15+2);
   1279            packet[1] = FCF_DATA + FCF_ACKREQ + FCF_INTRAPAN;
   1280            packet[2] = FCF_SHORTDST + FCF_SHORTSRC;
   1281            //New sequence number
   1282            currSeqNum++;
   1283            packet[3] = currSeqNum;
   1284            //dst PAN ID
   1285            packet[4] = (ST_RadioGetPanId()>>0)&0xFF;
   \                     ??CrossCallReturnLabel_23:
   \   00000008   ........           BL       ?Subroutine7
   1286            packet[5] = (ST_RadioGetPanId()>>8)&0xFF;
   \                     ??CrossCallReturnLabel_31:
   \   0000000C   ........           BL       ?Subroutine6
   1287            //Short dst addr
   1288            packet[6] = (dstShortAddr>>0)&0xFF;
   1289            packet[7] = (dstShortAddr>>8)&0xFF;
   1290            //Short src addr
   1291            packet[8] = (ST_RadioGetNodeId()>>0)&0xFF;
   \                     ??CrossCallReturnLabel_27:
   \   00000010   ........           BL       ?Subroutine11
   1292            packet[9] = (ST_RadioGetNodeId()>>8)&0xFF;
   \                     ??CrossCallReturnLabel_45:
   \   00000014   000A               LSRS     R0,R0,#+8
   \   00000016   8DF80900           STRB     R0,[SP, #+9]
   1293            //payload type
   1294            packet[10] = PT_SLEEPING;
   \   0000001A   0820               MOVS     R0,#+8
   \   0000001C   ........           BL       ?Subroutine1
   1295            //my VDD_PADS
   1296            packet[11] = (vddMillivolts>>0)&0xFF;
   1297            packet[12] = (vddMillivolts>>8)&0xFF;
   1298            //Zero out the TX SFD payload.  The MSB is used to indicate SFD valid.
   1299            packet[13] = 0;
   1300            packet[14] = 0;
   1301            packet[15] = 0;
   1302            
   1303            enqueueTxPacket(sendDirectly, dstShortAddr, packet, 13);
   1304          #ifdef SUN_ROLE  
   1305            halToggleLed(LED_D2);
   1306            halCommonDelayMilliseconds(500);
   1307            halClearLed(LED_D2);
   1308          #endif
   1309            printf("send sleeping packet to every planet!\r\n");
   \                     ??CrossCallReturnLabel_1:
   \   00000020   ........           ADR.W    R0,`?<Constant "send sleeping packet ...">`
   \   00000024   ....               B.N      ?Subroutine0
   1310          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           BL       printf
   \   00000004   21B0               ADD      SP,SP,#+132
   \   00000006   F0BD               POP      {R4-R7,PC}       ;; return
   1311          
   1312          /**************************************************************************
   1313          功能描述：向参数中传入的地址发送类型负载类型为PT_LED，类型为SYN_LED_WAITTIME的数据包
   1314          输入参数：vddMillivolts为发送的16位数据，dstShortAddr为目的地址，sendDirectly为调用不同发送函数的表示符。
   1315          输出参数：无
   1316          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1317          void sendVddDataPacket2(u16 vddMillivolts,u16 dstShortAddr,boolean sendDirectly)
   1318          {
   \                     sendVddDataPacket2:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   A1B0               SUB      SP,SP,#+132
   \   00000004   ........           BL       ?Subroutine5
   1319            u8 packet[128];
   1320            
   1321            //Length
   1322            packet[0] = (15+2);
   1323            packet[1] = FCF_DATA + FCF_ACKREQ + FCF_INTRAPAN;
   1324            packet[2] = FCF_SHORTDST + FCF_SHORTSRC;
   1325            //New sequence number
   1326            currSeqNum++;
   1327            packet[3] = currSeqNum;
   1328            //dst PAN ID
   1329            packet[4] = (ST_RadioGetPanId()>>0)&0xFF;
   \                     ??CrossCallReturnLabel_22:
   \   00000008   ........           BL       ?Subroutine7
   1330            packet[5] = (ST_RadioGetPanId()>>8)&0xFF;
   \                     ??CrossCallReturnLabel_30:
   \   0000000C   ........           BL       ?Subroutine6
   1331            //Short dst addr
   1332            packet[6] = (dstShortAddr>>0)&0xFF;
   1333            packet[7] = (dstShortAddr>>8)&0xFF;
   1334            //Short src addr
   1335            packet[8] = (ST_RadioGetNodeId()>>0)&0xFF;
   \                     ??CrossCallReturnLabel_26:
   \   00000010   ........           BL       ?Subroutine11
   1336            packet[9] = (ST_RadioGetNodeId()>>8)&0xFF;
   \                     ??CrossCallReturnLabel_44:
   \   00000014   000A               LSRS     R0,R0,#+8
   \   00000016   7872               STRB     R0,[R7, #+9]
   1337            //payload type
   1338            packet[10] = PT_LED;
   \   00000018   0920               MOVS     R0,#+9
   \   0000001A   ........           BL       ?Subroutine1
   1339            //my VDD_PADS
   1340            packet[11] = (vddMillivolts>>0)&0xFF;
   1341            packet[12] = (vddMillivolts>>8)&0xFF;
   1342            //Zero out the TX SFD payload.  The MSB is used to indicate SFD valid.
   1343            packet[13] = 0;
   1344            packet[14] = 0;
   1345            packet[15] = 0;
   1346            
   1347            enqueueTxPacket(sendDirectly, dstShortAddr, packet, 13);
   1348          #ifdef SUN_ROLE
   1349            halToggleLed(LED_D1);
   1350            halCommonDelayMilliseconds(500);
   1351            halClearLed(LED_D1);
   1352          #endif
   1353            printf("send message to every planet!\r\n");
   \                     ??CrossCallReturnLabel_0:
   \   0000001E   ........           ADR.W    R0,`?<Constant "send message to every...">`
   \   00000022                      REQUIRE ?Subroutine0
   \   00000022                      ;; // Fall through to label ?Subroutine0
   1354          }
   1355          
   1356          //函数实现向dstShortAddr表示的节点发送数据，数据内容为vddMillivolts

   \                                 In section .text, align 2, keep-with-next
   1357          void sendVddDataPacket3(u16 vddMillivolts,u16 dstShortAddr,boolean sendDirectly)
   1358          {
   \                     sendVddDataPacket3:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   A1B0               SUB      SP,SP,#+132
   \   00000004   ........           BL       ?Subroutine5
   1359            u8 packet[128];
   1360            
   1361            //Length
   1362            packet[0] = (15+2);
   1363            packet[1] = FCF_DATA + FCF_ACKREQ + FCF_INTRAPAN;
   1364            packet[2] = FCF_SHORTDST + FCF_SHORTSRC;
   1365            //New sequence number
   1366            currSeqNum++;
   1367            packet[3] = currSeqNum;
   1368            //dst PAN ID
   1369            packet[4] = (ST_RadioGetPanId()>>0)&0xFF;
   \                     ??CrossCallReturnLabel_21:
   \   00000008   ........           BL       ?Subroutine7
   1370            packet[5] = (ST_RadioGetPanId()>>8)&0xFF;
   \                     ??CrossCallReturnLabel_29:
   \   0000000C   ........           BL       ?Subroutine6
   1371            //Short dst addr
   1372            packet[6] = (dstShortAddr>>0)&0xFF;
   1373            packet[7] = (dstShortAddr>>8)&0xFF;
   1374            //Short src addr
   1375            packet[8] = (ST_RadioGetNodeId()>>0)&0xFF;
   \                     ??CrossCallReturnLabel_25:
   \   00000010   ........           BL       ?Subroutine11
   1376            packet[9] = (ST_RadioGetNodeId()>>8)&0xFF;
   \                     ??CrossCallReturnLabel_43:
   \   00000014   000A               LSRS     R0,R0,#+8
   \   00000016   8DF80900           STRB     R0,[SP, #+9]
   1377            //payload type
   1378            packet[10] = PT_TRSEND;
   \   0000001A   0A20               MOVS     R0,#+10
   \   0000001C   B872               STRB     R0,[R7, #+10]
   1379            //my VDD_PADS
   1380            packet[11] = (vddMillivolts>>0)&0xFF;
   \   0000001E   8DF80B40           STRB     R4,[SP, #+11]
   1381            packet[12] = (vddMillivolts>>8)&0xFF;
   \   00000022   200A               LSRS     R0,R4,#+8
   \   00000024   8DF80C00           STRB     R0,[SP, #+12]
   1382            //Zero out the TX SFD payload.  The MSB is used to indicate SFD valid.
   1383            packet[13] = 0;
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   7873               STRB     R0,[R7, #+13]
   1384            packet[14] = 0;
   \   0000002C   F881               STRH     R0,[R7, #+14]
   1385            packet[15] = 0;
   1386            
   1387            enqueueTxPacket(sendDirectly, dstShortAddr, packet, 13);
   \   0000002E   0D23               MOVS     R3,#+13
   \   00000030   00AA               ADD      R2,SP,#+0
   \   00000032   2946               MOV      R1,R5
   \   00000034   3046               MOV      R0,R6
   \   00000036   ........           BL       enqueueTxPacket
   1388            #ifdef PLANET_ROLE
   1389            halToggleLed(LED_D3);
   \   0000003A   ........           BL       ?Subroutine3
   1390            halCommonDelayMilliseconds(500);
   \                     ??CrossCallReturnLabel_11:
   \   0000003E   ........           BL       ?Subroutine2
   1391            halToggleLed(LED_D3);
   \                     ??CrossCallReturnLabel_4:
   \   00000042   ........           BL       ?Subroutine3
   1392            halCommonDelayMilliseconds(500);
   \                     ??CrossCallReturnLabel_10:
   \   00000046   ........           BL       ?Subroutine2
   1393          #endif
   1394            //printf("trsend already!\r\n");
   1395          }
   \                     ??CrossCallReturnLabel_3:
   \   0000004A   21B0               ADD      SP,SP,#+132
   \   0000004C   F0BD               POP      {R4-R7,PC}       ;; return
   1396          
   1397          //Command invoked with 'p'.  Print the planet table.

   \                                 In section .text, align 2, keep-with-next
   1398          void planetTableCmd(void)
   1399          {
   \                     planetTableCmd:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
   1400            u8 i,k;
   1401            
   1402            printf("\r\n");
   \   00000004   ........           BL       ?Subroutine8
   1403            if(!activeInNetwork) {
   \                     ??CrossCallReturnLabel_36:
   \   00000008   ....               LDR.N    R0,??DataTable41_1
   \   0000000A   4078               LDRB     R0,[R0, #+1]
   \   0000000C   20B9               CBNZ.N   R0,??planetTableCmd_0
   1404              printf("Not active in a network\r\n");
   \   0000000E   ........           ADR.W    R0,`?<Constant "Not active in a netwo...">`
   \                     ??planetTableCmd_1:
   \   00000012   ........           BL       printf
   1405              return;
   \   00000016   3BE0               B.N      ??planetTableCmd_2
   1406            }
   1407            if(ST_RadioGetNodeId() != 0x0000) {
   \                     ??planetTableCmd_0:
   \   00000018   ........           BL       ST_RadioGetNodeId
   \   0000001C   10B1               CBZ.N    R0,??planetTableCmd_3
   1408              printf("Not a sun\r\n");
   \   0000001E   ........           ADR.W    R0,`?<Constant "Not a sun\\r\\n">`
   \   00000022   F6E7               B.N      ??planetTableCmd_1
   1409              return;
   1410            }
   1411            
   1412            printf("Planet Table\r\n");
   \                     ??planetTableCmd_3:
   \   00000024   ........           ADR.W    R0,`?<Constant "Planet Table\\r\\n">`
   \   00000028   ........           BL       printf
   1413            printf("Active | DataPending | Short Address |    Long Address\r\n");
   \   0000002C   ........           ADR.W    R0,`?<Constant "Active | DataPending ...">`
   \   00000030   ........           BL       printf
   1414            for(i=0;i<PLANET_TABLE_SIZE;i++) {
   \   00000034   0025               MOVS     R5,#+0
   \   00000036   ........           ADR.W    R10,`?<Constant "%02X">`
   \   0000003A   ........           ADR.W    R11,`?<Constant "      %d     | ">`
   \   0000003E   ........           ADR.W    R8,`?<Constant "   %d   | ">`
   \   00000042   ........           LDR.W    R9,??DataTable41_4
   1415          
   1416              printf("   %d   | ", planetTable[i].active);
   \                     ??planetTableCmd_4:
   \   00000046   0C20               MOVS     R0,#+12
   \   00000048   00FB05F6           MUL      R6,R0,R5
   \   0000004C   16F80910           LDRB     R1,[R6, R9]
   \   00000050   4046               MOV      R0,R8
   \   00000052   ........           BL       printf
   1417              printf("      %d     | ", isDataPendingForShortId(planetTable[i].shortAddr));
   \   00000056   4E44               ADD      R6,R6,R9
   \   00000058   7088               LDRH     R0,[R6, #+2]
   \   0000005A   ........           BL       isDataPendingForShortId
   \   0000005E   0146               MOV      R1,R0
   \   00000060   5846               MOV      R0,R11
   \   00000062   ........           BL       printf
   1418              printf("    0x%04X    | 0x", planetTable[i].shortAddr);
   \   00000066   7188               LDRH     R1,[R6, #+2]
   \   00000068   ........           ADR.W    R0,`?<Constant "    0x%04X    | 0x">`
   \   0000006C   ........           BL       printf
   1419              k=8;
   \   00000070   0827               MOVS     R7,#+8
   \   00000072   05E0               B.N      ??planetTableCmd_5
   1420              while(k--) {
   1421                printf("%02X", planetTable[i].longAddr[k]);
   \                     ??planetTableCmd_6:
   \   00000074   CFB2               UXTB     R7,R1
   \   00000076   B819               ADDS     R0,R7,R6
   \   00000078   0179               LDRB     R1,[R0, #+4]
   \   0000007A   5046               MOV      R0,R10
   \   0000007C   ........           BL       printf
   1422              }
   \                     ??planetTableCmd_5:
   \   00000080   791E               SUBS     R1,R7,#+1
   \   00000082   002F               CMP      R7,#+0
   \   00000084   F6D1               BNE.N    ??planetTableCmd_6
   1423              printf("\r\n");
   \   00000086   ........           BL       ??Subroutine8_0
   1424            }
   \                     ??CrossCallReturnLabel_33:
   \   0000008A   6D1C               ADDS     R5,R5,#+1
   \   0000008C   0A2D               CMP      R5,#+10
   \   0000008E   DADB               BLT.N    ??planetTableCmd_4
   \                     ??planetTableCmd_2:
   \   00000090   BDE8F18F           POP      {R0,R4-R11,PC}   ;; return
   1425          }
   1426          
   1427          //******************************************************************************
   1428          // Application main:  Entry point, initialization, command line implementation,
   1429          // and event control.
   1430          
   1431          /**************************************************************************
   1432          功能描述：实现SUN节点组网，PLANET节点加网。多节点通信。
   1433          输入参数：无
   1434          输出参数：无
   1435          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1436          int main(void)
   1437          {
   \                     main:
   \   00000000   2DE9F047           PUSH     {R4-R10,LR}
   \   00000004   82B0               SUB      SP,SP,#+8
   1438              u32 seed;
   1439              StStatus status = ST_SUCCESS;
   1440              
   1441              //Initialize the HAL.
   1442              halInit();
   \   00000006   ........           BL       halInit
   1443            
   1444              //Initialize the UART.  uartInit will configure PB1=OUT_ALT and PB2=IN.
   1445              uartInit(115200, 8, PARITY_NONE, 1);
   \   0000000A   0123               MOVS     R3,#+1
   \   0000000C   0022               MOVS     R2,#+0
   \   0000000E   0821               MOVS     R1,#+8
   \   00000010   4FF4E130           MOV      R0,#+115200
   \   00000014   ........           BL       uartInit
   1446            
   1447              //Configure PA4 and PA5 as alternate outputs for Packet Trace.
   1448              halGpioConfig(PORTA_PIN(4),GPIOCFG_OUT_ALT);
   \   00000018   0921               MOVS     R1,#+9
   \   0000001A   0420               MOVS     R0,#+4
   \   0000001C   ........           BL       halGpioConfig
   1449              halGpioConfig(PORTA_PIN(5),GPIOCFG_OUT_ALT);
   \   00000020   0921               MOVS     R1,#+9
   \   00000022   0520               MOVS     R0,#+5
   \   00000024   ........           BL       halGpioConfig
   1450              //No other GPIO initialization is performed for this application.
   1451            
   1452              //Connect IRQD to PB2/SC1RXD
   1453              GPIO_IRQDSEL = PORTB_PIN(2);
   \   00000028   ....               LDR.N    R0,??DataTable41_6  ;; 0x4000bc18
   \   0000002A   0A21               MOVS     R1,#+10
   \   0000002C   0160               STR      R1,[R0, #+0]
   1454              //Allow the IRQD flag to set on any IRQD activity.  This does not
   1455              //enable the top level interrupt since no interrupt is desired; just
   1456              //an activity flag is needed to know when to avoid deep sleep.
   1457              GPIO_INTCFGD = (3<<GPIO_INTMOD_BIT);
   \   0000002E   ....               LDR.N    R4,??DataTable41_7  ;; 0x4000a814
   \   00000030   6020               MOVS     R0,#+96
   \   00000032   A065               STR      R0,[R4, #+88]
   1458              INT_GPIOFLAG = INT_IRQDFLAG;
   \   00000034   0820               MOVS     R0,#+8
   \   00000036   2060               STR      R0,[R4, #+0]
   1459              INT_PENDCLR = INT_IRQD;
   \   00000038   ........           LDR.W    R8,??DataTable41_8  ;; 0xe000e280
   \   0000003C   4FF40049           MOV      R9,#+32768
   \   00000040   C8F80090           STR      R9,[R8, #+0]
   1460              INTERRUPTS_ON();
   \   00000044   ........           BL       _enableBasePri
   1461              
   1462              //LGZ：
   1463              //int32u time = 0;
   1464             // settime(time);
   1465              u32 getTime;
   1466              getTime=halCommonGetInt32uMillisecondTick();
   \   00000048   ........           BL       halCommonGetInt32uMillisecondTick
   1467          
   1468             u16 count = 0;
   \   0000004C   0027               MOVS     R7,#+0
   1469              
   1470              
   1471          #ifdef PLANET_ROLE
   1472              halInitLed();   //初始化LED灯
   \   0000004E   ........           BL       halInitLed
   1473              halInitButton(); //初始化按键
   \   00000052   ........           BL       halInitButton
   1474              printf("\r\nSimpleMAC (%s) Sample Application: 'Planet role'!\r\n",SIMPLEMAC_VERSION_STRING);
   \   00000056   ........           ADR.W    R1,`?<Constant "1.0.1">`
   \   0000005A   ........           ADR.W    R0,`?<Constant "\\r\\nSimpleMAC (%s) Samp...">`
   \   0000005E   ........           BL       printf
   1475          #endif
   1476            
   1477          
   1478          #ifdef SUN_ROLE
   1479              halInitLed();   //初始化LED灯
   1480              halInitButton(); //初始化按键
   1481              printf("\r\nSimpleMAC (%s) Sample Application: 'Sun role'!\r\n",SIMPLEMAC_VERSION_STRING);
   1482          #endif
   1483            
   1484              //Initialize random number generation.
   1485              ST_RadioGetRandomNumbers((u16 *)&seed, 2);
   \   00000062   0221               MOVS     R1,#+2
   \   00000064   00A8               ADD      R0,SP,#+0
   \   00000066   ........           BL       ST_RadioGetRandomNumbers
   1486              halCommonSeedRandom(seed);
   \   0000006A   0098               LDR      R0,[SP, #+0]
   \   0000006C   ........           BL       halCommonSeedRandom
   1487            
   1488              //Initialize the radio.
   1489              ST_RadioEnableOverflowNotification(TRUE);
   \   00000070   0120               MOVS     R0,#+1
   \   00000072   ........           BL       ST_RadioEnableOverflowNotification
   1490              status = ST_RadioInit(radioPowerState);
   1491              assert(status==ST_SUCCESS);  
   \   00000076   ....               LDR.N    R5,??DataTable41_1
   \   00000078   2878               LDRB     R0,[R5, #+0]
   \   0000007A   ........           BL       ST_RadioInit
   \   0000007E   48B1               CBZ.N    R0,??main_0
   \   00000080   40F2D352           MOVW     R2,#+1491
   \   00000084   ........           ADR.W    R1,`?<Constant "E:\\\\\\312\\265\\321\\3514 16\\265\\343\\3`
   \   00000088   ........           ADR.W    R0,`?<Constant "status==ST_SUCCESS">`
   \   0000008C   ........           BL       __aeabi_assert
   \   00000090   ........           BL       __iar_EmptyStepPoint
   1492              printf("Enter ? for list of commands\r\n");
   \                     ??main_0:
   \   00000094   ........           ADR.W    R0,`?<Constant "Enter ? for list of c...">`
   \   00000098   ........           BL       printf
   1493              printf("\r\n> ");
   \   0000009C   ........           ADR.W    R0,`?<Constant "\\r\\n> ">`
   \   000000A0   ........           BL       printf
   1494              
   1495          #ifdef SUN_ROLE
   1496              u8 ch;
   1497              formCmd(); //SUN节点首先创建网络
   1498              u32 icou = 0;
   1499              do
   1500                  {
   1501                      processRxPacket();//检测收到数据包并处理
   1502                     
   1503                      halCommonDelayMilliseconds(10);//延时10毫秒
   1504                      icou++;
   1505               }while ((!__io_getcharNonBlocking(&ch))&&icou<500); 
   1506              settime(0);
   1507              while(TRUE)
   1508              { 
   1509                /*  
   1510                do
   1511                  {
   1512                      processRxPacket();//检测收到数据包并处理
   1513                     
   1514                      halCommonDelayMilliseconds(10);//延时10毫秒
   1515                  }while ((!__io_getcharNonBlocking(&ch))); //获取串口发送的命令
   1516                  
   1517                  
   1518                  if(ch=='x')//Derek:同步开始命令'x'
   1519                  {
   1520                     // printf("x command is running!\n");
   1521                      sendSync();
   1522                  }
   1523                   if(ch=='t')//Derek:回传T2
   1524                  {
   1525                    //  printf("T2 back!\n");
   1526                      sendSync();
   1527                  }
   1528                  else
   1529                      //printf("Unknown Commamd\r\n");
   1530                  INT_GPIOFLAG = INT_IRQDFLAG;
   1531                  INT_PENDCLR = INT_IRQD;
   1532                */
   1533                
   1534              getTime=halCommonGetInt32uMillisecondTick();
   1535              u16 ww1,ww2,ww3,ww4,ww5,ww6,ww7,ww8;
   1536              double mm;
   1537              
   1538              if(getTime%5000==0)
   1539              {
   1540                sendSync();
   1541                count++;
   1542                printf("A%d\r\n",count);
   1543              /*
   1544              u16 ww1,ww2,ww3,ww4,ww5,ww6,ww7,ww8;
   1545              double mm;
   1546              mm=getTime;
   1547              ww1=mm/10000000;
   1548              ww2=(mm-ww1*10000000)/1000000;
   1549              ww3=((mm-ww1*10000000)-ww2*1000000)/100000;
   1550              ww4=(((mm-ww1*10000000)-ww2*1000000)-ww3*100000)/10000;
   1551              ww5=((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)/1000;
   1552              ww6=(((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)/100;
   1553              ww7=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)/10;
   1554              ww8=((((((mm-ww1*10000000)-ww2*1000000)-ww3*100000)-ww4*10000)-ww5*1000)-ww6*100)-ww7*10;
   1555              printf("%d",ww1); 
   1556              printf("%d",ww2); 
   1557              printf("%d",ww3);
   1558              printf("%d",ww4); 
   1559              printf("%d",ww5);
   1560              printf("%d",ww6); 
   1561              printf("%d",ww7);
   1562              printf("%d\r\n",ww8); 
   1563              ww1=0;ww2=0;ww3=0;ww4=0;ww5=0;ww6=0;ww7=0;ww8=0;
   1564              
   1565               printf("get LGZ");*/ 
   1566                halCommonDelayMilliseconds(50);
   1567                processRxPacket();//检测收到数据包并处理     
   1568                //halCommonDelayMilliseconds(10);//延时10毫秒  
   1569                    
   1570              }
   1571               INT_GPIOFLAG = INT_IRQDFLAG;
   1572               INT_PENDCLR = INT_IRQD;
   1573              }
   1574              
   1575          #endif
   1576          
   1577          #ifdef PLANET_ROLE
   1578              activeInNetwork = FALSE;
   \   000000A4   6F70               STRB     R7,[R5, #+1]
   1579              printf("pl has start\r\n");
   \   000000A6   ........           ADR.W    R0,`?<Constant "pl has start\\r\\n">`
   \   000000AA   ........           BL       printf
   1580              do
   1581              {
   1582                  joinCmd(); //请求加入网络
   \                     ??main_1:
   \   000000AE   ........           BL       joinCmd
   1583              }while(!activeInNetwork);
   \   000000B2   6878               LDRB     R0,[R5, #+1]
   \   000000B4   0028               CMP      R0,#+0
   \   000000B6   FAD0               BEQ.N    ??main_1
   1584              u16 tiger=0;
   \   000000B8   0026               MOVS     R6,#+0
   1585              settime(0);
                     ^
Warning[Pe223]: function "settime" declared implicitly
   \   000000BA   3846               MOV      R0,R7
   \   000000BC   ........           BL       settime
   \   000000C0   ........           ADR.W    R5,`?<Constant "B%d\\r\\n">`
   1586              while(TRUE)
   1587              {
   1588                //LGZ:
   1589                  getTime=halCommonGetInt32uMillisecondTick();
   \                     ??main_2:
   \   000000C4   ........           BL       halCommonGetInt32uMillisecondTick
   1590                  if(getTime/5000>tiger)
   \   000000C8   41F28831           MOVW     R1,#+5000
   \   000000CC   B0FBF1FA           UDIV     R10,R0,R1
   \   000000D0   B0B2               UXTH     R0,R6
   \   000000D2   5045               CMP      R0,R10
   \   000000D4   05D2               BCS.N    ??main_3
   1591                  {
   1592                   
   1593                   printf("B%d\r\n",count);
   \   000000D6   BFB2               UXTH     R7,R7
   \   000000D8   3946               MOV      R1,R7
   \   000000DA   2846               MOV      R0,R5
   \   000000DC   ........           BL       printf
   1594                   count++;
   \   000000E0   7F1C               ADDS     R7,R7,#+1
   1595                   
   1596                  } 
   1597                  tiger=getTime/5000;
   \                     ??main_3:
   \   000000E2   5646               MOV      R6,R10
   1598                  processRxPacket();
   \   000000E4   ........           BL       processRxPacket
   1599                  halCommonDelayMilliseconds(10);
   \   000000E8   0A20               MOVS     R0,#+10
   \   000000EA   ........           BL       halCommonDelayMilliseconds
   1600                  /*if(halGetButtonStatus(BUTTON_S3) == BUTTON_PRESSED) //如果S3被按下，向Sun节点发送信息
   1601                  {
   1602                      sendVddDataPacket3(0x0001, 0x0000, TRUE);
   1603                      halCommonDelayMilliseconds(400); //延迟400ms
   1604                  }*/        
   1605                  INT_GPIOFLAG = INT_IRQDFLAG;
   \   000000EE   0820               MOVS     R0,#+8
   \   000000F0   2060               STR      R0,[R4, #+0]
   1606                  INT_PENDCLR = INT_IRQD;
   \   000000F2   C8F80090           STR      R9,[R8, #+0]
   \   000000F6   E5E7               B.N      ??main_2
   1607              } 
   1608               
   1609          #endif
   1610          }
   1611          
   1612          
   1613          //******************************************************************************
   1614          //The MAC Timer compare functionality is not used in this app.

   \                                 In section .text, align 2, keep-with-next
   1615          void ST_RadioMacTimerCompareIsrCallback(void) {}
   \                     ST_RadioMacTimerCompareIsrCallback:
   \   00000000   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   0D0A0000           DC8      0x0D, 0x0A, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   20256400           DC8      " %d"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   0D0A0000           DC8      0x0D, 0x0A, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_1:
   \   00000000   ........           DC32     radioPowerState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_2:
   \   00000000   ........           DC32     txPacketInFlight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_3:
   \   00000000   ........           DC32     framePendingPktEnroute

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_4:
   \   00000000   ........           DC32     planetTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_5:
   \   00000000   ........           DC32     rxData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_6:
   \   00000000   18BC0040           DC32     0x4000bc18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_7:
   \   00000000   14A80040           DC32     0x4000a814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_8:
   \   00000000   80E200E0           DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SYN_SLEEPING_WAITTIME\\r\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   53594E5F534C       DC8 83, 89, 78, 95, 83, 76, 69, 69, 80, 73
   \              45455049    
   \   0000000A   4E475F574149       DC8 78, 71, 95, 87, 65, 73, 84, 84, 73, 77
   \              5454494D    
   \   00000014   450D0A00           DC8 69, 13, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SYN_LED_WAITTIME\\r\\n">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   53594E5F4C45       DC8 83, 89, 78, 95, 76, 69, 68, 95, 87, 65
   \              445F5741    
   \   0000000A   495454494D45       DC8 73, 84, 84, 73, 77, 69, 13, 10, 0, 0
   \              0D0A0000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FALSE">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   46414C534500       DC8 70, 65, 76, 83, 69, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "E:\\\\\\312\\265\\321\\3514 16\\265\\343\\3`:
   \   00000000                      ; Initializer data, 68 bytes
   \   00000000   453A5CCAB5D1       DC8 69, 58, 92, 202, 181, 209, 233, 52, 32, 49
   \              E9342031    
   \   0000000A   36B5E3D7E9CD       DC8 54, 181, 227, 215, 233, 205, 248, 92, 185, 164
   \              F85CB9A4    
   \   00000014   B3CCD4B4B4FA       DC8 179, 204, 212, 180, 180, 250, 194, 235, 92, 115
   \              C2EB5C73    
   \   0000001E   696D706C656D       DC8 105, 109, 112, 108, 101, 109, 97, 99, 92, 100
   \              61635C64    
   \   00000028   656D6F735C73       DC8 101, 109, 111, 115, 92, 115, 97, 109, 112, 108
   \              616D706C    
   \   00000032   655C736F6C61       DC8 101, 92, 115, 111, 108, 97, 114, 45, 115, 121
   \              722D7379    
   \   0000003C   7374656D2E63       DC8 115, 116, 101, 109, 46, 99, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   0D0A0000           DC8 13, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Already in network\\r\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   416C72656164       DC8 65, 108, 114, 101, 97, 100, 121, 32, 105, 110
   \              7920696E    
   \   0000000A   206E6574776F       DC8 32, 110, 101, 116, 119, 111, 114, 107, 13, 10
   \              726B0D0A    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Inactive node forming...">`:
   \   00000000                      ; Initializer data, 56 bytes
   \   00000000   496E61637469       DC8 73, 110, 97, 99, 116, 105, 118, 101, 32, 110
   \              7665206E    
   \   0000000A   6F646520666F       DC8 111, 100, 101, 32, 102, 111, 114, 109, 105, 110
   \              726D696E    
   \   00000014   67206E657477       DC8 103, 32, 110, 101, 116, 119, 111, 114, 107, 32
   \              6F726B20    
   \   0000001E   616E64206265       DC8 97, 110, 100, 32, 98, 101, 99, 111, 109, 105
   \              636F6D69    
   \   00000028   6E6720746865       DC8 110, 103, 32, 116, 104, 101, 32, 115, 117, 110
   \              2073756E    
   \   00000032   0D0A00000000       DC8 13, 10, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "status==ST_SUCCESS">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   737461747573       DC8 115, 116, 97, 116, 117, 115, 61, 61, 83, 84
   \              3D3D5354    
   \   0000000A   5F5355434345       DC8 95, 83, 85, 67, 67, 69, 83, 83, 0, 0
   \              53530000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Selected channel %d w...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   53656C656374       DC8 83, 101, 108, 101, 99, 116, 101, 100, 32, 99
   \              65642063    
   \   0000000A   68616E6E656C       DC8 104, 97, 110, 110, 101, 108, 32, 37, 100, 32
   \              20256420    
   \   00000014   776974682065       DC8 119, 105, 116, 104, 32, 101, 110, 101, 114, 103
   \              6E657267    
   \   0000001E   792025642064       DC8 121, 32, 37, 100, 32, 100, 66, 109, 13, 10
   \              426D0D0A    
   \   00000028   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Randomly chose PAN ID...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   52616E646F6D       DC8 82, 97, 110, 100, 111, 109, 108, 121, 32, 99
   \              6C792063    
   \   0000000A   686F73652050       DC8 104, 111, 115, 101, 32, 80, 65, 78, 32, 73
   \              414E2049    
   \   00000014   443A20307825       DC8 68, 58, 32, 48, 120, 37, 48, 52, 88, 13
   \              3034580D    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Inactive node joining...">`:
   \   00000000                      ; Initializer data, 56 bytes
   \   00000000   496E61637469       DC8 73, 110, 97, 99, 116, 105, 118, 101, 32, 110
   \              7665206E    
   \   0000000A   6F6465206A6F       DC8 111, 100, 101, 32, 106, 111, 105, 110, 105, 110
   \              696E696E    
   \   00000014   67206E657477       DC8 103, 32, 110, 101, 116, 119, 111, 114, 107, 32
   \              6F726B20    
   \   0000001E   616E64206265       DC8 97, 110, 100, 32, 98, 101, 99, 111, 109, 105
   \              636F6D69    
   \   00000028   6E6720612070       DC8 110, 103, 32, 97, 32, 112, 108, 97, 110, 101
   \              6C616E65    
   \   00000032   740D0A000000       DC8 116, 13, 10, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Trying channel">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   547279696E67       DC8 84, 114, 121, 105, 110, 103, 32, 99, 104, 97
   \              20636861    
   \   0000000A   6E6E656C0000       DC8 110, 110, 101, 108, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %d">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   20256400           DC8 32, 37, 100, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Joined on channel %d ...">`:
   \   00000000                      ; Initializer data, 68 bytes
   \   00000000   4A6F696E6564       DC8 74, 111, 105, 110, 101, 100, 32, 111, 110, 32
   \              206F6E20    
   \   0000000A   6368616E6E65       DC8 99, 104, 97, 110, 110, 101, 108, 32, 37, 100
   \              6C202564    
   \   00000014   207769746820       DC8 32, 119, 105, 116, 104, 32, 80, 65, 78, 32
   \              50414E20    
   \   0000001E   494420307825       DC8 73, 68, 32, 48, 120, 37, 48, 52, 88, 46
   \              3034582E    
   \   00000028   20204D792049       DC8 32, 32, 77, 121, 32, 73, 68, 32, 105, 115
   \              44206973    
   \   00000032   206E6F772030       DC8 32, 110, 111, 119, 32, 48, 120, 37, 48, 52
   \              78253034    
   \   0000003C   582E0D0A0000       DC8 88, 46, 13, 10, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Did not join.  Return...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   446964206E6F       DC8 68, 105, 100, 32, 110, 111, 116, 32, 106, 111
   \              74206A6F    
   \   0000000A   696E2E202052       DC8 105, 110, 46, 32, 32, 82, 101, 116, 117, 114
   \              65747572    
   \   00000014   6E696E672074       DC8 110, 105, 110, 103, 32, 116, 111, 32, 105, 110
   \              6F20696E    
   \   0000001E   616374697665       DC8 97, 99, 116, 105, 118, 101, 32, 115, 116, 97
   \              20737461    
   \   00000028   74652E0D0A00       DC8 116, 101, 46, 13, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "send sleeping packet ...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   73656E642073       DC8 115, 101, 110, 100, 32, 115, 108, 101, 101, 112
   \              6C656570    
   \   0000000A   696E67207061       DC8 105, 110, 103, 32, 112, 97, 99, 107, 101, 116
   \              636B6574    
   \   00000014   20746F206576       DC8 32, 116, 111, 32, 101, 118, 101, 114, 121, 32
   \              65727920    
   \   0000001E   706C616E6574       DC8 112, 108, 97, 110, 101, 116, 33, 13, 10, 0
   \              210D0A00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "send message to every...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   73656E64206D       DC8 115, 101, 110, 100, 32, 109, 101, 115, 115, 97
   \              65737361    
   \   0000000A   676520746F20       DC8 103, 101, 32, 116, 111, 32, 101, 118, 101, 114
   \              65766572    
   \   00000014   7920706C616E       DC8 121, 32, 112, 108, 97, 110, 101, 116, 33, 13
   \              6574210D    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Not active in a netwo...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   4E6F74206163       DC8 78, 111, 116, 32, 97, 99, 116, 105, 118, 101
   \              74697665    
   \   0000000A   20696E206120       DC8 32, 105, 110, 32, 97, 32, 110, 101, 116, 119
   \              6E657477    
   \   00000014   6F726B0D0A00       DC8 111, 114, 107, 13, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Not a sun\\r\\n">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4E6F74206120       DC8 78, 111, 116, 32, 97, 32, 115, 117, 110, 13
   \              73756E0D    
   \   0000000A   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Planet Table\\r\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   506C616E6574       DC8 80, 108, 97, 110, 101, 116, 32, 84, 97, 98
   \              20546162    
   \   0000000A   6C650D0A0000       DC8 108, 101, 13, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Active | DataPending ...">`:
   \   00000000                      ; Initializer data, 60 bytes
   \   00000000   416374697665       DC8 65, 99, 116, 105, 118, 101, 32, 124, 32, 68
   \              207C2044    
   \   0000000A   61746150656E       DC8 97, 116, 97, 80, 101, 110, 100, 105, 110, 103
   \              64696E67    
   \   00000014   207C2053686F       DC8 32, 124, 32, 83, 104, 111, 114, 116, 32, 65
   \              72742041    
   \   0000001E   646472657373       DC8 100, 100, 114, 101, 115, 115, 32, 124, 32, 32
   \              207C2020    
   \   00000028   20204C6F6E67       DC8 32, 32, 76, 111, 110, 103, 32, 65, 100, 100
   \              20416464    
   \   00000032   726573730D0A       DC8 114, 101, 115, 115, 13, 10, 0, 0, 0, 0
   \              00000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   %d   | ">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   202020256420       DC8 32, 32, 32, 37, 100, 32, 32, 32, 124, 32
   \              20207C20    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "      %d     | ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   202020202020       DC8 32, 32, 32, 32, 32, 32, 37, 100, 32, 32
   \              25642020    
   \   0000000A   2020207C2000       DC8 32, 32, 32, 124, 32, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    0x%04X    | 0x">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   202020203078       DC8 32, 32, 32, 32, 48, 120, 37, 48, 52, 88
   \              25303458    
   \   0000000A   202020207C20       DC8 32, 32, 32, 32, 124, 32, 48, 120, 0, 0
   \              30780000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02X">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   253032580000       DC8 37, 48, 50, 88, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSimpleMAC (%s) Samp...">`:
   \   00000000                      ; Initializer data, 56 bytes
   \   00000000   0D0A53696D70       DC8 13, 10, 83, 105, 109, 112, 108, 101, 77, 65
   \              6C654D41    
   \   0000000A   432028257329       DC8 67, 32, 40, 37, 115, 41, 32, 83, 97, 109
   \              2053616D    
   \   00000014   706C65204170       DC8 112, 108, 101, 32, 65, 112, 112, 108, 105, 99
   \              706C6963    
   \   0000001E   6174696F6E3A       DC8 97, 116, 105, 111, 110, 58, 32, 39, 80, 108
   \              2027506C    
   \   00000028   616E65742072       DC8 97, 110, 101, 116, 32, 114, 111, 108, 101, 39
   \              6F6C6527    
   \   00000032   210D0A000000       DC8 33, 13, 10, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1.0.1">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   312E302E3100       DC8 49, 46, 48, 46, 49, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter ? for list of c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 63, 32, 102, 111
   \              3F20666F    
   \   0000000A   72206C697374       DC8 114, 32, 108, 105, 115, 116, 32, 111, 102, 32
   \              206F6620    
   \   00000014   636F6D6D616E       DC8 99, 111, 109, 109, 97, 110, 100, 115, 13, 10
   \              64730D0A    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n> ">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0D0A3E200000       DC8 13, 10, 62, 32, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "pl has start\\r\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   706C20686173       DC8 112, 108, 32, 104, 97, 115, 32, 115, 116, 97
   \              20737461    
   \   0000000A   72740D0A0000       DC8 114, 116, 13, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "B%d\\r\\n">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4225640D0A00       DC8 66, 37, 100, 13, 10, 0, 0, 0
   \              0000        
   1616          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     ST_RadioMacTimerCompareIsrCallback
                                         0
     ST_RadioOverflowIsrCallback         8
     ST_RadioReceiveIsrCallback         20
     calculateLqi                        0
     formCmd                            40
     initNetworkState                   16
     joinCmd                           168
     main                               40
     planetTableCmd                     40
     processRxPacket                   176
     replySync                         144
     sendVddDataPacket                 152
     sendVddDataPacket1                152
     sendVddDataPacket2                152
     sendVddDataPacket3                152


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     radioTransmitConfig                               8
     rxData                                          140
     diff                                              8
     p11                                               8
     x                                                 8
     TT1                                               8
     TT2                                               8
     TT3                                               8
     TT4                                               8
     TT5                                               8
     timeoffset                                        8
     autoSendRateDstShortAddr                          2
     autoSendLastQsTick                                2
     radioPowerState                                  16
     activeInNetwork
     availableSunFound
     networkJoinedStopSearching
     shortAddrCounter
     currSeqNum
     autoSendRate
     autoPollRate
     T2
     T3
     T1                                                4
     T4                                                4
     T5                                                4
     back                                              4
     autoPollLastQsTick                                2
     planetTable                                     120
     counter                                           2
     counter2                                          2
     planet_join_by_button                             1
     initNetworkState                                100
     calculateLqi                                     20
     ST_RadioReceiveIsrCallback                       66
     processRxPacket                                 498
     ?Subroutine4                                      6
     ?Subroutine3                                      6
     ?Subroutine2                                      8
     ST_RadioOverflowIsrCallback                      26
     formCmd                                         188
     ?Subroutine10                                    12
     ?Subroutine9                                      8
     joinCmd                                         294
     ?Subroutine8                                      8
     replySync                                       184
     sendVddDataPacket                                36
     ?Subroutine1                                     34
     ?Subroutine11                                     6
     ?Subroutine7                                      8
     ?Subroutine6                                     18
     ?Subroutine5                                     40
     sendVddDataPacket1                               38
     ?Subroutine0                                      8
     sendVddDataPacket2                               34
     sendVddDataPacket3                               78
     planetTableCmd                                  148
     main                                            248
     ST_RadioMacTimerCompareIsrCallback
                                                       2
     ??DataTable38                                     4
     ??DataTable40                                     4
     ??DataTable41                                     4
     ??DataTable41_1                                   4
     ??DataTable41_2                                   4
     ??DataTable41_3                                   4
     ??DataTable41_4                                   4
     ??DataTable41_5                                   4
     ??DataTable41_6                                   4
     ??DataTable41_7                                   4
     ??DataTable41_8                                   4
     ?<Constant {0}>                                   8
     ?<Constant "SYN_SLEEPING_WAITTIME\r\n">          24
     ?<Constant "SYN_LED_WAITTIME\r\n">               20
     ?<Constant "FALSE">                               8
     ?<Constant "E:\\\312\265\321\3514 16\265\343\3   68
     ?<Constant "\r\n">                                4
     ?<Constant "Already in network\r\n">             24
     ?<Constant "Inactive node forming...">           56
     ?<Constant "status==ST_SUCCESS">                 20
     ?<Constant "Selected channel %d w...">           44
     ?<Constant "Randomly chose PAN ID...">           32
     ?<Constant "Inactive node joining...">           56
     ?<Constant "Trying channel">                     16
     ?<Constant " %d">                                 4
     ?<Constant "Joined on channel %d ...">           68
     ?<Constant "Did not join.  Return...">           48
     ?<Constant "send sleeping packet ...">           40
     ?<Constant "send message to every...">           32
     ?<Constant "Not active in a netwo...">           28
     ?<Constant "Not a sun\r\n">                      12
     ?<Constant "Planet Table\r\n">                   16
     ?<Constant "Active | DataPending ...">           60
     ?<Constant "   %d   | ">                         12
     ?<Constant "      %d     | ">                    16
     ?<Constant "    0x%04X    | 0x">                 20
     ?<Constant "%02X">                                8
     ?<Constant "\r\nSimpleMAC (%s) Samp...">         56
     ?<Constant "1.0.1">                               8
     ?<Constant "Enter ? for list of c...">           32
     ?<Constant "\r\n> ">                              8
     ?<Constant "pl has start\r\n">                   16
     ?<Constant "B%d\r\n">                             8

 
   343 bytes in section .bss
    40 bytes in section .data
 3 038 bytes in section .text
 
 3 038 bytes of CODE memory
   383 bytes of DATA memory

Errors: none
Warnings: 4
