###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     17/Jul/2014  09:45:01 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\mfg-toke #
#                    n.c                                                      #
#    Command line =  "E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\mfg-tok #
#                    en.c" -D BOARD_MB851 -D "PLATFORM_HEADER=\"hal/micro/cor #
#                    texm3/compiler/iar.h\"" -D "BOARD_HEADER=\"hal/micro/cor #
#                    texm3/stm32w108/board.h\"" -D CORTEXM3 -D                #
#                    CORTEXM3_STM32W108 -D PHY_STM32W108XX -D                 #
#                    DISABLE_WATCHDOG -D PLANET_ROLE -D BOARD_MB851 -D        #
#                    "__SOURCEFILE__=\"mfg-token.c\"" -lC "E:\实验4           #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\ #
#                    List\" --diag_suppress Pa050 -o "E:\实验4                #
#                    16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\ #
#                    Obj\" --debug --endian=little --cpu=Cortex-M3 -e         #
#                    --fpu=None --dlib_config "D:\study                       #
#                    soft\IAR6.10\IARsoft\arm\INC\c\DLib_Config_Normal.h" -I  #
#                    "E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\" -I    #
#                    "E:\实验4 16点组网\工程源代码\simplemac\demos\sample\..\ #
#                    ..\..\simplemac\include\" -I "E:\实验4                   #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\"    #
#                    -I "E:\实验4 16点组网\工程源代码\simplemac\demos\sample\ #
#                    ..\..\..\hal\" -I "E:\实验4                              #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\HAL\ #
#                    MICRO\CORTEXM3\STM32W108\" -I "E:\实验4                  #
#                    16点组网\工程源代码\simplemac\demos\sample\..\..\..\simp #
#                    lemac\" -I "E:\实验4 16点组网\工程源代码\simplemac\demos #
#                    \sample\..\..\..\shared\" -Ohz --use_c++_inline          #
#    List file    =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB85 #
#                    1_PLANET\List\mfg-token.lst                              #
#    Object file  =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB85 #
#                    1_PLANET\Obj\mfg-token.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\mfg-token.c
      1          /** @file hal/micro/cortexm3/mfg-token.c
      2           * @brief Cortex-M3 Manufacturing-Token system
      3           *
      4           * <!--(C) COPYRIGHT 2010 STMicroelectronics. All rights reserved.        -->
      5           */
      6          #include PLATFORM_HEADER
      7          #include "error.h"
      8          #include "hal/micro/cortexm3/flash.h"
      9          #include "mfg-token.h"
     10          
     11          
     12          
     13          
     14          #define DEFINETOKENS
     15          #define TOKEN_MFG(name,creator,iscnt,isidx,type,arraysize,...) \
     16            const int16u TOKEN_##name = TOKEN_##name##_ADDRESS;
     17            #include "hal/micro/cortexm3/token-manufacturing.h"

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CHIP_DATA
   \                     TOKEN_MFG_CHIP_DATA:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   7E07               DC16 1918

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_PART_DATA
   \                     TOKEN_MFG_PART_DATA:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   9607               DC16 1942

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_TESTER_DATA
   \                     TOKEN_MFG_TESTER_DATA:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   9C07               DC16 1948

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ST_EUI_64
   \                     TOKEN_MFG_ST_EUI_64:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   A207               DC16 1954

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_NORMAL
   \                     TOKEN_MFG_ANALOG_TRIM_NORMAL:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   AA07               DC16 1962

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_BOOST
   \                     TOKEN_MFG_ANALOG_TRIM_BOOST:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   BE07               DC16 1982

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_BOTH
   \                     TOKEN_MFG_ANALOG_TRIM_BOTH:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   D207               DC16 2002

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_REG_TRIM
   \                     TOKEN_MFG_REG_TRIM:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   DC07               DC16 2012

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_1V8_REG_VOLTAGE
   \                     TOKEN_MFG_1V8_REG_VOLTAGE:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   DE07               DC16 2014

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_VREF_VOLTAGE
   \                     TOKEN_MFG_VREF_VOLTAGE:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   E007               DC16 2016

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_TEMP_CAL
   \                     TOKEN_MFG_TEMP_CAL:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   E207               DC16 2018

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_VERSION
   \                     TOKEN_MFG_FIB_VERSION:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   F407               DC16 2036

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_CHECKSUM
   \                     TOKEN_MFG_FIB_CHECKSUM:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   F607               DC16 2038

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_OBS
   \                     TOKEN_MFG_FIB_OBS:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   F807               DC16 2040

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CIB_OBS
   \                     TOKEN_MFG_CIB_OBS:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   0008               DC16 2048

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CUSTOM_VERSION
   \                     TOKEN_MFG_CUSTOM_VERSION:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   1008               DC16 2064

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CUSTOM_EUI_64
   \                     TOKEN_MFG_CUSTOM_EUI_64:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   1208               DC16 2066

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_STRING
   \                     TOKEN_MFG_STRING:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   1A08               DC16 2074

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_BOARD_NAME
   \                     TOKEN_MFG_BOARD_NAME:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   2A08               DC16 2090

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_MANUF_ID
   \                     TOKEN_MFG_MANUF_ID:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3A08               DC16 2106

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_PHY_CONFIG
   \                     TOKEN_MFG_PHY_CONFIG:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3C08               DC16 2108

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_BOOTLOAD_AES_KEY
   \                     TOKEN_MFG_BOOTLOAD_AES_KEY:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3E08               DC16 2110

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_EZSP_STORAGE
   \                     TOKEN_MFG_EZSP_STORAGE:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4E08               DC16 2126

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ASH_CONFIG
   \                     TOKEN_MFG_ASH_CONFIG:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5608               DC16 2134

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CBKE_DATA
   \                     TOKEN_MFG_CBKE_DATA:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   7E08               DC16 2174

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_INSTALLATION_CODE
   \                     TOKEN_MFG_INSTALLATION_CODE:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   DA08               DC16 2266

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_OSC24M_BIAS_TRIM
   \                     TOKEN_MFG_OSC24M_BIAS_TRIM:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   EE08               DC16 2286

   \                                 In section .text, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_EUI_64
   \                     TOKEN_MFG_EUI_64:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   0080               DC16 32768
     18          #undef TOKEN_DEF
     19          #undef TOKEN_MFG
     20          #undef DEFINETOKENS
     21          
     22          
     23          
     24          
     25          
     26          
     27          
     28          

   \                                 In section .text, align 4, keep-with-next
     29          static const int8u nullEui[] = { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF };
   \                     nullEui:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFF        
     30          
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void halInternalGetMfgTokenData(void *data, int16u ID, int8u index, int8u len)
     33          {
   \                     halInternalGetMfgTokenData:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   \   00000004   0446               MOV      R4,R0
   \   00000006   1046               MOV      R0,R2
     34            int8u *ram = (int8u*)data;
     35            
     36            //0x7F is a non-indexed token.  Remap to 0 for the address calculation
     37            index = (index==0x7F) ? 0 : index;
   \   00000008   7F28               CMP      R0,#+127
   \   0000000A   08BF               IT       EQ 
   \   0000000C   0020               MOVEQ    R0,#+0
     38            
     39            if(ID == MFG_EUI_64_LOCATION) {
   \   0000000E   B1F5004F           CMP      R1,#+32768
   \   00000012   1AD1               BNE.N    ??halInternalGetMfgTokenData_0
     40              //There are two EUI64's stored in the Info Blocks, St and Custom.
     41              //0x0A00 is the address used by the generic EUI64 token, and it is
     42              //token.c's responbility to pick the returned EUI64 from either St
     43              //or Custom.  Return the Custom EUI64 if it is not all FF's, otherwise
     44              //return the St EUI64.
     45              tokTypeMfgEui64 eui64;
     46              halCommonGetMfgToken(&eui64, TOKEN_MFG_CUSTOM_EUI_64);
   \   00000014   0823               MOVS     R3,#+8
   \   00000016   7F22               MOVS     R2,#+127
   \   00000018   40F61201           MOVW     R1,#+2066
   \   0000001C   00A8               ADD      R0,SP,#+0
   \   0000001E   FFF7EFFF           BL       halInternalGetMfgTokenData
     47              if(MEMCOMPARE(eui64,nullEui, 8 /*EUI64_SIZE*/) == 0) {
   \   00000022   0822               MOVS     R2,#+8
   \   00000024   ........           ADR.W    R1,nullEui
   \   00000028   00A8               ADD      R0,SP,#+0
   \   0000002A   ........           BL       halCommonMemCompare
   \   0000002E   30B9               CBNZ.N   R0,??halInternalGetMfgTokenData_1
     48                halCommonGetMfgToken(&eui64, TOKEN_MFG_ST_EUI_64);
   \   00000030   0823               MOVS     R3,#+8
   \   00000032   7F22               MOVS     R2,#+127
   \   00000034   40F2A271           MOVW     R1,#+1954
   \   00000038   00A8               ADD      R0,SP,#+0
   \   0000003A   FFF7E1FF           BL       halInternalGetMfgTokenData
     49              }
     50              MEMCOPY(ram, eui64, 8 /*EUI64_SIZE*/);
   \                     ??halInternalGetMfgTokenData_1:
   \   0000003E   0822               MOVS     R2,#+8
   \   00000040   00A9               ADD      R1,SP,#+0
   \   00000042   2046               MOV      R0,R4
   \   00000044   ........           BL       halCommonMemCopy
   \   00000048   37BD               POP      {R0-R2,R4,R5,PC}
     51            } else {
     52              //read from the Information Blocks.  The token ID is only the
     53              //bottom 16bits of the token's actual address.  Since the info blocks
     54              //exist in the range DATA_BIG_INFO_BASE-DATA_BIG_INFO_END, we need
     55              //to OR the ID with DATA_BIG_INFO_BASE to get the real address.
     56              int32u realAddress = (DATA_BIG_INFO_BASE|ID) + (len*index);
     57              int8u *flash = (int8u *)realAddress;
     58          
     59          
     60          
     61          
     62          
     63          
     64          
     65          
     66          
     67          
     68          
     69          
     70          
     71          
     72              MEMCOPY(ram, flash, len);
   \                     ??halInternalGetMfgTokenData_0:
   \   0000004A   1A46               MOV      R2,R3
   \   0000004C   ....               LDR.N    R5,??DataTable36  ;; 0x8040000
   \   0000004E   2943               ORRS     R1,R5,R1
   \   00000050   00FB0311           MLA      R1,R0,R3,R1
   \   00000054   2046               MOV      R0,R4
   \   00000056   ........           BL       halCommonMemCopy
     73            }
     74          }
   \   0000005A   37BD               POP      {R0-R2,R4,R5,PC}  ;; return
     75          
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void halInternalSetMfgTokenData(int16u token, void *data, int8u len)
     78          {
   \                     halInternalSetMfgTokenData:
   \   00000000   2DE9F84C           PUSH     {R3-R7,R10,R11,LR}
   \   00000004   0C46               MOV      R4,R1
   \   00000006   1546               MOV      R5,R2
     79            StStatus flashStatus;
     80            int32u realAddress = (DATA_BIG_INFO_BASE|token);
   \   00000008   ....               LDR.N    R1,??DataTable36  ;; 0x8040000
   \   0000000A   41EA0006           ORR      R6,R1,R0
     81            int8u * flash = (int8u *)realAddress;
     82            int32u i;
     83            
     84            //The flash library (and hardware) requires the address and length to both
     85            //be multiples of 16bits.  Since this API is only valid for writing to
     86            //the CIB, verify that the token+len falls within the CIB.
     87            assert((token&1) != 1);
   \   0000000E   ........           ADR.W    R10,`?<Constant "E:\\\\\\312\\265\\321\\3514 16\\265\\343\\3`
   \   00000012   C007               LSLS     R0,R0,#+31
   \   00000014   07D5               BPL.N    ??halInternalSetMfgTokenData_0
   \   00000016   5722               MOVS     R2,#+87
   \   00000018   5146               MOV      R1,R10
   \   0000001A   ........           ADR.W    R0,`?<Constant "(token&1) != 1">`
   \   0000001E   ........           BL       __aeabi_assert
   \   00000022   ........           BL       __iar_EmptyStepPoint
     88            assert((len&1) != 1);
   \                     ??halInternalSetMfgTokenData_0:
   \   00000026   E807               LSLS     R0,R5,#+31
   \   00000028   07D5               BPL.N    ??halInternalSetMfgTokenData_1
   \   0000002A   5822               MOVS     R2,#+88
   \   0000002C   5146               MOV      R1,R10
   \   0000002E   ........           ADR.W    R0,`?<Constant "(len&1) != 1">`
   \   00000032   ........           BL       __aeabi_assert
   \   00000036   ........           BL       __iar_EmptyStepPoint
     89            assert((realAddress>=CIB_BOTTOM) && ((realAddress+len-1)<=CIB_TOP));
   \                     ??halInternalSetMfgTokenData_1:
   \   0000003A   ....               LDR.N    R0,??DataTable36_1  ;; 0x8040800
   \   0000003C   8642               CMP      R6,R0
   \   0000003E   04D3               BCC.N    ??halInternalSetMfgTokenData_2
   \   00000040   A819               ADDS     R0,R5,R6
   \   00000042   401E               SUBS     R0,R0,#+1
   \   00000044   ....               LDR.N    R1,??DataTable36_2  ;; 0x8040a00
   \   00000046   8842               CMP      R0,R1
   \   00000048   07D3               BCC.N    ??halInternalSetMfgTokenData_3
   \                     ??halInternalSetMfgTokenData_2:
   \   0000004A   5922               MOVS     R2,#+89
   \   0000004C   5146               MOV      R1,R10
   \   0000004E   ........           ADR.W    R0,`?<Constant "(realAddress>=CIB_BOT...">`
   \   00000052   ........           BL       __aeabi_assert
   \   00000056   ........           BL       __iar_EmptyStepPoint
     90            
     91            //CIB manufacturing tokens can only be written by on-chip code if the token
     92            //is currently unprogrammed.  Verify the entire token is unwritten.  The
     93            //flash library performs a similar check, but verifying here ensures that
     94            //the entire token is unprogrammed and will prevent partial writes.
     95            for(i=0;i<len;i++) {
   \                     ??halInternalSetMfgTokenData_3:
   \   0000005A   0027               MOVS     R7,#+0
   \   0000005C   ........           ADR.W    R11,`?<Constant "flash[i] == 0xFF">`
   \   00000060   0AE0               B.N      ??halInternalSetMfgTokenData_4
     96              assert(flash[i] == 0xFF);
   \                     ??halInternalSetMfgTokenData_5:
   \   00000062   B85D               LDRB     R0,[R7, R6]
   \   00000064   FF28               CMP      R0,#+255
   \   00000066   06D0               BEQ.N    ??halInternalSetMfgTokenData_6
   \   00000068   6022               MOVS     R2,#+96
   \   0000006A   5146               MOV      R1,R10
   \   0000006C   5846               MOV      R0,R11
   \   0000006E   ........           BL       __aeabi_assert
   \   00000072   ........           BL       __iar_EmptyStepPoint
     97            }
   \                     ??halInternalSetMfgTokenData_6:
   \   00000076   7F1C               ADDS     R7,R7,#+1
   \                     ??halInternalSetMfgTokenData_4:
   \   00000078   AF42               CMP      R7,R5
   \   0000007A   F2D3               BCC.N    ??halInternalSetMfgTokenData_5
     98            
     99            //Remember, the flash library operates in 16bit quantities, but the
    100            //token system operates in 8bit quantities.  Hence the divide by 2.
    101            flashStatus = halInternalFlashWrite(realAddress, data, (len/2));
    102            assert(flashStatus == ST_SUCCESS);
   \   0000007C   6A08               LSRS     R2,R5,#+1
   \   0000007E   2146               MOV      R1,R4
   \   00000080   3046               MOV      R0,R6
   \   00000082   ........           BL       halInternalFlashWrite
   \   00000086   38B1               CBZ.N    R0,??halInternalSetMfgTokenData_7
   \   00000088   6622               MOVS     R2,#+102
   \   0000008A   5146               MOV      R1,R10
   \   0000008C   ........           ADR.W    R0,`?<Constant "flashStatus == ST_SUC...">`
   \   00000090   ........           BL       __aeabi_assert
   \   00000094   ........           BL       __iar_EmptyStepPoint
    103          }
   \                     ??halInternalSetMfgTokenData_7:
   \   00000098   BDE8F18C           POP      {R0,R4-R7,R10,R11,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   00000408           DC32     0x8040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_1:
   \   00000000   00080408           DC32     0x8040800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_2:
   \   00000000   000A0408           DC32     0x8040a00

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "(token&1) != 1">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   28746F6B656E       DC8 40, 116, 111, 107, 101, 110, 38, 49, 41, 32
   \              26312920    
   \   0000000A   213D20310000       DC8 33, 61, 32, 49, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "E:\\\\\\312\\265\\321\\3514 16\\265\\343\\3`:
   \   00000000                      ; Initializer data, 60 bytes
   \   00000000   453A5CCAB5D1       DC8 69, 58, 92, 202, 181, 209, 233, 52, 32, 49
   \              E9342031    
   \   0000000A   36B5E3D7E9CD       DC8 54, 181, 227, 215, 233, 205, 248, 92, 185, 164
   \              F85CB9A4    
   \   00000014   B3CCD4B4B4FA       DC8 179, 204, 212, 180, 180, 250, 194, 235, 92, 104
   \              C2EB5C68    
   \   0000001E   616C5C6D6963       DC8 97, 108, 92, 109, 105, 99, 114, 111, 92, 99
   \              726F5C63    
   \   00000028   6F727465786D       DC8 111, 114, 116, 101, 120, 109, 51, 92, 109, 102
   \              335C6D66    
   \   00000032   672D746F6B65       DC8 103, 45, 116, 111, 107, 101, 110, 46, 99, 0
   \              6E2E6300    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "(len&1) != 1">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   286C656E2631       DC8 40, 108, 101, 110, 38, 49, 41, 32, 33, 61
   \              2920213D    
   \   0000000A   203100000000       DC8 32, 49, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "(realAddress>=CIB_BOT...">`:
   \   00000000                      ; Initializer data, 60 bytes
   \   00000000   287265616C41       DC8 40, 114, 101, 97, 108, 65, 100, 100, 114, 101
   \              64647265    
   \   0000000A   73733E3D4349       DC8 115, 115, 62, 61, 67, 73, 66, 95, 66, 79
   \              425F424F    
   \   00000014   54544F4D2920       DC8 84, 84, 79, 77, 41, 32, 38, 38, 32, 40
   \              26262028    
   \   0000001E   287265616C41       DC8 40, 114, 101, 97, 108, 65, 100, 100, 114, 101
   \              64647265    
   \   00000028   73732B6C656E       DC8 115, 115, 43, 108, 101, 110, 45, 49, 41, 60
   \              2D31293C    
   \   00000032   3D4349425F54       DC8 61, 67, 73, 66, 95, 84, 79, 80, 41, 0
   \              4F502900    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "flash[i] == 0xFF">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   666C6173685B       DC8 102, 108, 97, 115, 104, 91, 105, 93, 32, 61
   \              695D203D    
   \   0000000A   3D2030784646       DC8 61, 32, 48, 120, 70, 70, 0, 0, 0, 0
   \              00000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "flashStatus == ST_SUC...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   666C61736853       DC8 102, 108, 97, 115, 104, 83, 116, 97, 116, 117
   \              74617475    
   \   0000000A   73203D3D2053       DC8 115, 32, 61, 61, 32, 83, 84, 95, 83, 85
   \              545F5355    
   \   00000014   434345535300       DC8 67, 67, 69, 83, 83, 0, 0, 0
   \              0000        
    104          

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     halInternalGetMfgTokenData     24
     halInternalSetMfgTokenData     40


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     TOKEN_MFG_CHIP_DATA                               2
     TOKEN_MFG_PART_DATA                               2
     TOKEN_MFG_TESTER_DATA                             2
     TOKEN_MFG_ST_EUI_64                               2
     TOKEN_MFG_ANALOG_TRIM_NORMAL                      2
     TOKEN_MFG_ANALOG_TRIM_BOOST                       2
     TOKEN_MFG_ANALOG_TRIM_BOTH                        2
     TOKEN_MFG_REG_TRIM                                2
     TOKEN_MFG_1V8_REG_VOLTAGE                         2
     TOKEN_MFG_VREF_VOLTAGE                            2
     TOKEN_MFG_TEMP_CAL                                2
     TOKEN_MFG_FIB_VERSION                             2
     TOKEN_MFG_FIB_CHECKSUM                            2
     TOKEN_MFG_FIB_OBS                                 2
     TOKEN_MFG_CIB_OBS                                 2
     TOKEN_MFG_CUSTOM_VERSION                          2
     TOKEN_MFG_CUSTOM_EUI_64                           2
     TOKEN_MFG_STRING                                  2
     TOKEN_MFG_BOARD_NAME                              2
     TOKEN_MFG_MANUF_ID                                2
     TOKEN_MFG_PHY_CONFIG                              2
     TOKEN_MFG_BOOTLOAD_AES_KEY                        2
     TOKEN_MFG_EZSP_STORAGE                            2
     TOKEN_MFG_ASH_CONFIG                              2
     TOKEN_MFG_CBKE_DATA                               2
     TOKEN_MFG_INSTALLATION_CODE                       2
     TOKEN_MFG_OSC24M_BIAS_TRIM                        2
     TOKEN_MFG_EUI_64                                  2
     nullEui                                           8
     halInternalGetMfgTokenData                       92
     halInternalSetMfgTokenData                      156
     ??DataTable36                                     4
     ??DataTable36_1                                   4
     ??DataTable36_2                                   4
     ?<Constant "(token&1) != 1">                     16
     ?<Constant "E:\\\312\265\321\3514 16\265\343\3   60
     ?<Constant "(len&1) != 1">                       16
     ?<Constant "(realAddress>=CIB_BOT...">           60
     ?<Constant "flash[i] == 0xFF">                   20
     ?<Constant "flashStatus == ST_SUC...">           28

 
 524 bytes in section .text
 
 524 bytes of CODE memory

Errors: none
Warnings: none
