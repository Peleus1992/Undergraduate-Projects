###############################################################################
#                                                                             #
#     IAR Assembler V6.10.1.52143/W32 for ARM 17/Jul/2014  09:45:16           #
#     Copyright 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\spmr.s79#
#           List file     =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\List\spmr.lst#
#           Object file   =  E:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\Obj\spmr.o#
#           Command line  =  E:\实验4 16点组网\工程源代码\hal\micro\cortexm3\spmr.s79 #
#                            -OE:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\Obj\ #
#                            -s+ -M<> -w+ -r -DBOARD_MB851                    #
#                            -DPLATFORM_HEADER="hal/micro/cortexm3/compiler/iar.h" #
#                            -DBOARD_HEADER="hal/micro/cortexm3/stm32w108/board.h" #
#                            -DCORTEXM3 -DCORTEXM3_STM32W108                  #
#                            -DPHY_STM32W108XX -DDISABLE_WATCHDOG             #
#                            -D__SOURCEFILE__="spmr.s79"                      #
#                            -LE:\实验4 16点组网\工程源代码\simplemac\demos\sample\MB851_PLANET\List\ #
#                            -t2 --cpu Cortex-M3 --fpu None                   #
#                            -IE:\实验4 16点组网\工程源代码\hal\micro\cortexm3\ #
#                            -IE:\实验4 16点组网\工程源代码\simplemac\demos\sample\..\..\..\simplemac\include\ #
#                            -IE:\实验4 16点组网\工程源代码\simplemac\demos\sample\..\..\..\ #
#                            -IE:\实验4 16点组网\工程源代码\simplemac\demos\sample\..\..\..\hal\ #
#                            -IE:\实验4 16点组网\工程源代码\simplemac\demos\sample\..\..\..\HAL\MICRO\CORTEXM3\STM32W108\ #
#                            -IE:\实验4 16点组网\工程源代码\simplemac\demos\sample\..\..\..\simplemac\ #
#                            -IE:\实验4 16点组网\工程源代码\simplemac\demos\sample\..\..\..\shared\ #
#                                                                             #
###############################################################################

    1                          //---------------------------------------------
                               ---------------------------------
    2                          // @file hal/micro/cortexm3/spmr.s79
    3                          // @brief SPMR (Special Purpose Mask Registers)
                                manipulation routines.
    4                          // 
    5                          // Since the compiler does not provide low
                                level intrinsic functions for some
    6                          // required operations, this file maintains the
                                small set of assembly code
    7                          // needed to manipulate the Special Purpose
                                Mask Registers.
    8                          // 
    9                          // While it is possible to add this functionali
                               ty as inline assembly in C files,
   10                          // IAR highly recommends against this due to
                                not only code being fragile in its
   11                          // surroundings, but it also negates the
                                possibility of size optimization.
   12                          // 
   13                          // NOTE: This file looks more complicated than
                                it really is.  It was originally
   14                          // generated by writing a C file and having the
                                compiler generate the
   15                          // corresponding assembly file.  This is where
                                all the CFI (Call Frame
   16                          // Information) expressions came from.  The CFI
                                information enables proper debug
   17                          // backtrace ability.  The pieces to pay
                                attention to are the actual funtions
   18                          // near the end.
   19                          //
   20                          // * <!--(C) COPYRIGHT 2010 STMicroelectronics.
                                All rights reserved.        -->
   21                          //---------------------------------------------
                               ---------------------------------
   22                          
   23                          #include "compiler/asm.h"
   24                          
   25                          // NOTE!! IF THIS VALUE IS CHANGED, NVIC-CONFIG
                               .H MUST ALSO BE UPDATED 
   26                          #define INTERRUPTS_DISABLED_PRIORITY (12 <<
                                3)
   27                          
   28                                  __EXPORT__ _readBasePri
   29                                  __EXPORT__ _writeBasePri
   30                                  __EXPORT__ _disableBasePri
   31                                  __EXPORT__ _basePriIsDisabled
   32                                  __EXPORT__ _enableBasePri
   33                                  __EXPORT__ _setPriMask
   34                                  __EXPORT__ _clearPriMask
   35                                  __EXPORT__ _executeBarrierInstructions
   36                          
   37                          //---------------------------------------------
                               ---------------------------------
   38                          //   int8u _readBasePri(void)
   39                          //
   40                          // Read and return the BASEPRI value.
   41                          //
   42                          //---------------------------------------------
                               ---------------------------------
   43                                  __CODE__
   44                                  __THUMB__
   45                                  __CFI__(Block cfiBlock0 Using
                                cfiCommon0)
   46                                  __CFI__(Function _readBasePri)
   47                          _readBasePri:
   48    00000000 EFF31180             MRS  R0, BASEPRI                    //
                                                 read current BASEPRI
   49    00000004 7047                 BX   LR
   50                                  __CFI__(EndBlock cfiBlock0)
   51                          
   52                          //---------------------------------------------
                               ---------------------------------
   53                          //    void _writeBasePri(int8u priority)
   54                          //
   55                          // Write BASEPRI with the passed value to
                                obtain the proper preemptive priority
   56                          // group masking. Note that the value passed
                                must have been left shifted by 3
   57                          // to be properly aligned in the BASEPRI
                                register.
   58                          // (Refer to nvic-config.h for the PRIGROUP
                                table.)
   59                          //
   60                          //---------------------------------------------
                               ---------------------------------
   61                                  __CODE__
   62                                  __THUMB__
   63                                  __CFI__(Block cfiBlock1 Using
                                cfiCommon0)
   64                                  __CFI__(Function _writeBasePri)
   65                          _writeBasePri:
   66    00000000 80F31188             MSR BASEPRI, R0                     //
                                                     load BASEPRI from variable
                                                     (R0)
   67    00000004 7047                 BX  LR
   68                                  __CFI__(EndBlock cfiBlock1)
   69                          
   70                          //---------------------------------------------
                               ---------------------------------
   71                          //   int8u _disableBasePri(void)
   72                          //
   73                          // Set BASEPRI to mask out interrupts but allow
                                faults. It returns the value
   74                          // BASEPRI had when it was called.
   75                          //
   76                          //---------------------------------------------
                               ---------------------------------
   77                                  __CODE__
   78                                  __THUMB__
   79                                  __CFI__(Block cfiBlock2 Using
                                cfiCommon0)
   80                                  __CFI__(Function _disableBasePri)
   81                          _disableBasePri:
   82    00000000 EFF31180             MRS  R0, BASEPRI                       
                                                 // read current BASEPRI
   83    00000004 6021                 LDR  R1, =INTERRUPTS_DISABLED_PRIORITY 
                                                 // disable ints, allow
                                                 faults
   84    00000006 81F31188             MSR  BASEPRI, R1                    
                                                      
   85    0000000A 7047                 BX   LR
   86                                  __CFI__(EndBlock cfiBlock2)
   87                            
   88                          //---------------------------------------------
                               ---------------------------------
   89                          //   boolean _basePriIsDisabled(void)
   90                          //
   91                          // Compare BASEPRI to the priority used to
                                disable interrupts (but not faults). 
   92                          // Return TRUE if the priority is higher or
                                equal to that.
   93                          //
   94                          //---------------------------------------------
                               ---------------------------------
   95                                  __CODE__
   96                                  __THUMB__
   97                                  __CFI__(Block cfiBlock3 Using
                                cfiCommon0)
   98                                  __CFI__(Function _basePriIsDisabled)
   99                          _basePriIsDisabled:
  100    00000000 EFF31180             MRS  R0, BASEPRI                    //
                                                 read current BASEPRI
  101    00000004 6028                 CMP  R0, #INTERRUPTS_DISABLED_PRIORITY
  102    00000006 D4BF                 ITE  le
  103    00000008 0120                 LDRLE R0, =1
  104    0000000A 0020                 LDRGT R0, =0
  105    0000000C 7047                 BX   LR
  106                                  __CFI__(EndBlock cfiBlock3)
  107                          
  108                          //---------------------------------------------
                               ---------------------------------
  109                          //   void _enableBasePri(void)
  110                          // 
  111                          // Set BASEPRI to 0, which disables it from
                                masking any interrupts.
  112                          //
  113                          //---------------------------------------------
                               ---------------------------------
  114                                  __CODE__
  115                                  __THUMB__
  116                                  __CFI__(Block cfiBlock4 Using
                                cfiCommon0)
  117                                  __CFI__(Function _enableBasePri)
  118                          _enableBasePri:
  119    00000000 0021                 LDR  R1, = 0                        //
                                                 zero disables BASEPRI
                                                 masking
  120    00000002 81F31188             MSR  BASEPRI, R1                    
                                                      
  121    00000006 7047                 BX   LR
  122                                  __CFI__(EndBlock cfiBlock4)
  123                          
  124                          //---------------------------------------------
                               ---------------------------------
  125                          //   void _setPriMask(void)
  126                          //
  127                          // Set the 1-bit PRIMASK register, which sets
                                the base priority to 0. This
  128                          // locks out all interrupts and configurable
                                faults (usage, memory management
  129                          // and bus faults).
  130                          //
  131                          // Note: generally speaking PRIMASK should not
                                be set because faults should
  132                          // be enabled even when interrupts are
                                disabled. If they are not enabled,
  133                          // a fault will immediately escalate to a hard
                                fault.
  134                          //
  135                          //---------------------------------------------
                               ---------------------------------
  136                                  __CODE__
  137                                  __THUMB__
  138                                  __CFI__(Block cfiBlock5 Using
                                cfiCommon0)
  139                                  __CFI__(Function _setPriMask)
  140                          _setPriMask:
  141    00000000 72B6                 CPSID i
  142    00000002 7047                 BX   LR
  143                                  __CFI__(EndBlock cfiBlock5)
  144                          
  145                          //---------------------------------------------
                               ---------------------------------
  146                          //   void _clearPriMask(void)
  147                          //
  148                          // Clears the 1-bit PRIMASK register, which
                                allows the BASEPRI value to 
  149                          // mask interrupts (if non-zero).
  150                          //
  151                          //---------------------------------------------
                               ---------------------------------
  152                                  __CODE__
  153                                  __THUMB__
  154                                  __CFI__(Block cfiBlock6 Using
                                cfiCommon0)
  155                                  __CFI__(Function _clearPriMask)
  156                          _clearPriMask:
  157    00000000 62B6                 CPSIE i
  158    00000002 7047                 BX   LR
  159                                  __CFI__(EndBlock cfiBlock6)
  160                          
  161                          //---------------------------------------------
                               ---------------------------------
  162                          //   void _executeBarrierInstructions(void)
  163                          //
  164                          //A utility function for inserting barrier
                                instructions.  These
  165                          //instructions should be used whenever the MPU
                                is enabled or disabled so
  166                          //that all memory/instruction accesses can
                                complete before the MPU changes
  167                          //state. 
  168                          //
  169                          //---------------------------------------------
                               ---------------------------------
  170                                  __CODE__
  171                                  __THUMB__
  172                                  __CFI__(Block cfiBlock7 Using
                                cfiCommon0)
  173                                  __CFI__(Function _executeBarrierInstruc
                               tions)
  174                          _executeBarrierInstructions:
  175    00000000 BFF35F8F             DMB
  176    00000004 BFF34F8F             DSB
  177    00000008 BFF36F8F             ISB
  178    0000000C 7047                 BX   LR
  179                                  __CFI__(EndBlock cfiBlock7)
  180                          
  181                                  __END__
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 68          #
##############################



